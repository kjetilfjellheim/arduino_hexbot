

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Oct 07 20:44:31 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.44
    54                           ; Generated 14/09/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F2480 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	idataBANK0
    89  001E1C                     __pidataBANK0:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _rotation
    93  001E1C  10                 	db	16
    94  001E1D  49                 	db	73
    95  001E1E  3F                 	db	63
    96                           
    97                           ;initializer for _forwardSpeed
    98  001E1F  00                 	db	0
    99  001E20  80                 	db	128
   100  001E21  3F                 	db	63
   101                           
   102                           	psect	idataBANK1
   103  001968                     __pidataBANK1:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _servosets
   107  001968  0000               	dw	0
   108  00196A  31                 	db	49
   109  00196B  32                 	db	50
   110  00196C  00                 	db	0
   111  00196D  31                 	db	49
   112  00196E  00                 	db	0
   113  00196F  00                 	db	0
   114  001970  32                 	db	50
   115  001971  00                 	db	0
   116  001972  00                 	db	0
   117  001973  06A4               	dw	1700
   118  001975  0898               	dw	2200
   119  001977  0708               	dw	1800
   120  001979  0001               	dw	1
   121  00197B  0001               	dw	1
   122  00197D  0002               	dw	2
   123  00197F  34                 	db	52
   124  001980  00                 	db	0
   125  001981  00                 	db	0
   126  001982  35                 	db	53
   127  001983  00                 	db	0
   128  001984  00                 	db	0
   129  001985  36                 	db	54
   130  001986  00                 	db	0
   131  001987  00                 	db	0
   132  001988  0546               	dw	1350
   133  00198A  0640               	dw	1600
   134  00198C  06A4               	dw	1700
   135  00198E  0001               	dw	1
   136  001990  0001               	dw	1
   137  001992  0000               	dw	0
   138  001994  38                 	db	56
   139  001995  00                 	db	0
   140  001996  00                 	db	0
   141  001997  39                 	db	57
   142  001998  00                 	db	0
   143  001999  00                 	db	0
   144  00199A  31                 	db	49
   145  00199B  30                 	db	48
   146  00199C  00                 	db	0
   147  00199D  03E8               	dw	1000
   148  00199F  0640               	dw	1600
   149  0019A1  0708               	dw	1800
   150  0019A3  0001               	dw	1
   151  0019A5  0001               	dw	1
   152  0019A7  0002               	dw	2
   153  0019A9  31                 	db	49
   154  0019AA  36                 	db	54
   155  0019AB  00                 	db	0
   156  0019AC  31                 	db	49
   157  0019AD  37                 	db	55
   158  0019AE  00                 	db	0
   159  0019AF  31                 	db	49
   160  0019B0  38                 	db	56
   161  0019B1  00                 	db	0
   162  0019B2  0640               	dw	1600
   163  0019B4  04B0               	dw	1200
   164  0019B6  05DC               	dw	1500
   165  0019B8  FFFF               	dw	65535
   166  0019BA  FFFF               	dw	65535
   167  0019BC  0000               	dw	0
   168  0019BE  32                 	db	50
   169  0019BF  30                 	db	48
   170  0019C0  00                 	db	0
   171  0019C1  32                 	db	50
   172  0019C2  31                 	db	49
   173  0019C3  00                 	db	0
   174  0019C4  32                 	db	50
   175  0019C5  32                 	db	50
   176  0019C6  00                 	db	0
   177  0019C7  0834               	dw	2100
   178  0019C9  0514               	dw	1300
   179  0019CB  03E8               	dw	1000
   180  0019CD  FFFF               	dw	65535
   181  0019CF  FFFF               	dw	65535
   182  0019D1  0002               	dw	2
   183  0019D3  32                 	db	50
   184  0019D4  34                 	db	52
   185  0019D5  00                 	db	0
   186  0019D6  32                 	db	50
   187  0019D7  35                 	db	53
   188  0019D8  00                 	db	0
   189  0019D9  32                 	db	50
   190  0019DA  36                 	db	54
   191  0019DB  00                 	db	0
   192  0019DC  076C               	dw	1900
   193  0019DE  0578               	dw	1400
   194  0019E0  03E8               	dw	1000
   195  0019E2  FFFF               	dw	65535
   196  0019E4  FFFF               	dw	65535
   197                           
   198                           	psect	smallconst
   199  000300                     __psmallconst:
   200                           	opt stack 0
   201  000300  00                 	db	0
   202  000301                     _turns:
   203                           	opt stack 0
   204  000301  00                 	db	0
   205  000302  80                 	db	128
   206  000303  BF                 	db	191
   207  000304  00                 	db	0
   208  000305  80                 	db	128
   209  000306  BF                 	db	191
   210  000307  00                 	db	0
   211  000308  80                 	db	128
   212  000309  BF                 	db	191
   213  00030A  00                 	db	0
   214  00030B  80                 	db	128
   215  00030C  3F                 	db	63
   216  00030D  00                 	db	0
   217  00030E  80                 	db	128
   218  00030F  3F                 	db	63
   219  000310  00                 	db	0
   220  000311  80                 	db	128
   221  000312  3F                 	db	63
   222  000313  00                 	db	0
   223  000314  80                 	db	128
   224  000315  3F                 	db	63
   225  000316  00                 	db	0
   226  000317  80                 	db	128
   227  000318  3F                 	db	63
   228  000319  00                 	db	0
   229  00031A  80                 	db	128
   230  00031B  3F                 	db	63
   231  00031C  00                 	db	0
   232  00031D  80                 	db	128
   233  00031E  3F                 	db	63
   234  00031F  00                 	db	0
   235  000320  80                 	db	128
   236  000321  3F                 	db	63
   237  000322  00                 	db	0
   238  000323  80                 	db	128
   239  000324  3F                 	db	63
   240  000325                     __end_of_turns:
   241                           	opt stack 0
   242  000325                     _positions:
   243                           	opt stack 0
   244  000325  0000               	dw	0
   245  000327  0000               	dw	0
   246  000329  00C8               	dw	200
   247  00032B  0000               	dw	0
   248  00032D  0000               	dw	0
   249  00032F  00C8               	dw	200
   250  000331  0000               	dw	0
   251  000333  FF38               	dw	65336
   252  000335                     __end_of_positions:
   253                           	opt stack 0
   254  000335                     _dpowers:
   255                           	opt stack 0
   256  000335  0001               	dw	1
   257  000337  000A               	dw	10
   258  000339  0064               	dw	100
   259  00033B  03E8               	dw	1000
   260  00033D  2710               	dw	10000
   261  00033F                     __end_of_dpowers:
   262                           	opt stack 0
   263  00033F                     sin@coeff_a:
   264                           	opt stack 0
   265  00033F  F4                 	db	244
   266  000340  4A                 	db	74
   267  000341  48                 	db	72
   268  000342  95                 	db	149
   269  000343  95                 	db	149
   270  000344  C7                 	db	199
   271  000345  C1                 	db	193
   272  000346  DC                 	db	220
   273  000347  45                 	db	69
   274  000348  DC                 	db	220
   275  000349  6D                 	db	109
   276  00034A  C3                 	db	195
   277  00034B  B3                 	db	179
   278  00034C  33                 	db	51
   279  00034D  40                 	db	64
   280  00034E                     __end_ofsin@coeff_a:
   281                           	opt stack 0
   282  00034E                     sin@coeff_b:
   283                           	opt stack 0
   284  00034E  34                 	db	52
   285  00034F  01                 	db	1
   286  000350  48                 	db	72
   287  000351  9D                 	db	157
   288  000352  B0                 	db	176
   289  000353  45                 	db	69
   290  000354  00                 	db	0
   291  000355  DA                 	db	218
   292  000356  42                 	db	66
   293  000357  00                 	db	0
   294  000358  80                 	db	128
   295  000359  3F                 	db	63
   296  00035A                     __end_ofsin@coeff_b:
   297                           	opt stack 0
   298  0000                     _OSCCONbits	set	4051
   299  0000                     _OSCTUNEbits	set	3995
   300  0000                     _TXREG	set	4013
   301  0000                     _TRISCbits	set	3988
   302  0000                     _RCSTAbits	set	4011
   303  0000                     _SPBRGH	set	4016
   304  0000                     _SPBRG	set	4015
   305  0000                     _TXSTAbits	set	4012
   306  0000                     _BAUDCONbits	set	4024
   307  0000                     _TRMT	set	32097
   308  00035A                     STR_10:
   309  00035A  54                 	db	84	;'T'
   310  00035B  34                 	db	52	;'4'
   311  00035C  30                 	db	48	;'0'
   312  00035D  30                 	db	48	;'0'
   313  00035E  0D                 	db	13
   314  00035F  00                 	db	0
   315  000360                     STR_3:
   316  000360  25                 	db	37
   317  000361  64                 	db	100	;'d'
   318  000362  00                 	db	0
   319  000363                     STR_1:
   320  000363  23                 	db	35
   321  000364  00                 	db	0
   322  000365                     STR_2:
   323  000365  50                 	db	80	;'P'
   324  000366  00                 	db	0
   325  0000                     
   326                           ; #config settings
   327  000367  00                 	db	0	; dummy byte at the end
   328  0000                     
   329                           	psect	cinit
   330  001AD8                     __pcinit:
   331                           	opt stack 0
   332  001AD8                     start_initialization:
   333                           	opt stack 0
   334  001AD8                     __initialization:
   335                           	opt stack 0
   336                           
   337                           ; Initialize objects allocated to BANK1 (126 bytes)
   338                           ; load TBLPTR registers with __pidataBANK1
   339  001AD8  0E68               	movlw	low __pidataBANK1
   340  001ADA  6EF6               	movwf	tblptrl,c
   341  001ADC  0E19               	movlw	high __pidataBANK1
   342  001ADE  6EF7               	movwf	tblptrh,c
   343  001AE0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   344  001AE2  6EF8               	movwf	tblptru,c
   345  001AE4  EE01  F000         	lfsr	0,__pdataBANK1
   346  001AE8  EE10 F07E          	lfsr	1,126
   347  001AEC                     copy_data0:
   348  001AEC  0009               	tblrd		*+
   349  001AEE  CFF5 FFEE          	movff	tablat,postinc0
   350  001AF2  50E5               	movf	postdec1,w,c
   351  001AF4  50E1               	movf	fsr1l,w,c
   352  001AF6  E1FA               	bnz	copy_data0
   353                           
   354                           ; Initialize objects allocated to BANK0 (6 bytes)
   355                           ; load TBLPTR registers with __pidataBANK0
   356  001AF8  0E1C               	movlw	low __pidataBANK0
   357  001AFA  6EF6               	movwf	tblptrl,c
   358  001AFC  0E1E               	movlw	high __pidataBANK0
   359  001AFE  6EF7               	movwf	tblptrh,c
   360  001B00  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   361  001B02  6EF8               	movwf	tblptru,c
   362  001B04  EE00  F0BF         	lfsr	0,__pdataBANK0
   363  001B08  EE10 F006          	lfsr	1,6
   364  001B0C                     copy_data1:
   365  001B0C  0009               	tblrd		*+
   366  001B0E  CFF5 FFEE          	movff	tablat,postinc0
   367  001B12  50E5               	movf	postdec1,w,c
   368  001B14  50E1               	movf	fsr1l,w,c
   369  001B16  E1FA               	bnz	copy_data1
   370                           
   371                           ; Clear objects allocated to BANK2 (256 bytes)
   372  001B18  EE02  F000         	lfsr	0,__pbssBANK2
   373  001B1C  EE11 F000          	lfsr	1,256
   374  001B20                     clear_0:
   375  001B20  6AEE               	clrf	postinc0,c
   376  001B22  50E5               	movf	postdec1,w,c
   377  001B24  50E1               	movf	fsr1l,w,c
   378  001B26  E1FC               	bnz	clear_0
   379  001B28  50E2               	movf	fsr1h,w,c
   380  001B2A  E1FA               	bnz	clear_0
   381                           
   382                           ; Clear objects allocated to COMRAM (2 bytes)
   383  001B2C  6A37               	clrf	(__pbssCOMRAM+1)& (0+255),c
   384  001B2E  6A36               	clrf	__pbssCOMRAM& (0+255),c
   385  001B30                     end_of_initialization:
   386                           	opt stack 0
   387  001B30                     __end_of__initialization:
   388                           	opt stack 0
   389  001B30  9038               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   390  001B32  9238               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   391  001B34  0E00               	movlw	low (__Lmediumconst shr (0+16))
   392  001B36  6EF8               	movwf	tblptru,c
   393  001B38  0100               	movlb	0
   394  001B3A  EFC4  F00A         	goto	_main	;jump to C main() function
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           postdec1	equ	0xFE5
   401                           fsr1h	equ	0xFE2
   402                           fsr1l	equ	0xFE1
   403                           
   404                           	psect	bssCOMRAM
   405  000036                     __pbssCOMRAM:
   406                           	opt stack 0
   407  000036                     _errno:
   408                           	opt stack 0
   409  000036                     	ds	2
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           postdec1	equ	0xFE5
   416                           fsr1h	equ	0xFE2
   417                           fsr1l	equ	0xFE1
   418                           
   419                           	psect	dataBANK0
   420  0000BF                     __pdataBANK0:
   421                           	opt stack 0
   422  0000BF                     _rotation:
   423                           	opt stack 0
   424  0000BF                     	ds	3
   425  0000C2                     _forwardSpeed:
   426                           	opt stack 0
   427  0000C2                     	ds	3
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           postdec1	equ	0xFE5
   434                           fsr1h	equ	0xFE2
   435                           fsr1l	equ	0xFE1
   436                           
   437                           	psect	dataBANK1
   438  000100                     __pdataBANK1:
   439                           	opt stack 0
   440  000100                     _servosets:
   441                           	opt stack 0
   442  000100                     	ds	126
   443                           tblptru	equ	0xFF8
   444                           tblptrh	equ	0xFF7
   445                           tblptrl	equ	0xFF6
   446                           tablat	equ	0xFF5
   447                           postinc0	equ	0xFEE
   448                           postdec1	equ	0xFE5
   449                           fsr1h	equ	0xFE2
   450                           fsr1l	equ	0xFE1
   451                           
   452                           	psect	bssBANK2
   453  000200                     __pbssBANK2:
   454                           	opt stack 0
   455  000200                     _movementString:
   456                           	opt stack 0
   457  000200                     	ds	256
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           postinc0	equ	0xFEE
   463                           postdec1	equ	0xFE5
   464                           fsr1h	equ	0xFE2
   465                           fsr1l	equ	0xFE1
   466                           
   467                           	psect	cstackBANK0
   468  000060                     __pcstackBANK0:
   469                           	opt stack 0
   470  000060                     ?_sprintf:
   471                           	opt stack 0
   472  000060                     ?___ftmul:
   473                           	opt stack 0
   474  000060                     sprintf@sp:
   475                           	opt stack 0
   476  000060                     ___ftmul@f1:
   477                           	opt stack 0
   478                           
   479                           ; 3 bytes @ 0x0
   480  000060                     	ds	2
   481  000062                     sprintf@f:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x2
   485  000062                     	ds	1
   486  000063                     ___ftmul@f2:
   487                           	opt stack 0
   488                           
   489                           ; 3 bytes @ 0x3
   490  000063                     	ds	3
   491  000066                     ??___ftmul:
   492  000066                     sprintf@ap:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x6
   496  000066                     	ds	2
   497  000068                     sprintf@flag:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x8
   501  000068                     	ds	1
   502  000069                     sprintf@prec:
   503                           	opt stack 0
   504  000069                     ___ftmul@exp:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x9
   508  000069                     	ds	1
   509  00006A                     sprintf@val:
   510                           	opt stack 0
   511  00006A                     ___ftmul@f3_as_product:
   512                           	opt stack 0
   513                           
   514                           ; 3 bytes @ 0xA
   515  00006A                     	ds	2
   516  00006C                     sprintf@c:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0xC
   520  00006C                     	ds	1
   521  00006D                     ___ftmul@cntr:
   522                           	opt stack 0
   523  00006D                     InitServos@tmp:
   524                           	opt stack 0
   525                           
   526                           ; 5 bytes @ 0xD
   527  00006D                     	ds	1
   528  00006E                     ___ftmul@sign:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0xE
   532  00006E                     	ds	1
   533  00006F                     ?___ftadd:
   534                           	opt stack 0
   535  00006F                     ___ftadd@f1:
   536                           	opt stack 0
   537                           
   538                           ; 3 bytes @ 0xF
   539  00006F                     	ds	3
   540  000072                     InitServos@i:
   541                           	opt stack 0
   542  000072                     ___ftadd@f2:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x12
   546  000072                     	ds	3
   547  000075                     ??___ftadd:
   548                           
   549                           ; 1 bytes @ 0x15
   550  000075                     	ds	3
   551  000078                     ___ftadd@sign:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x18
   555  000078                     	ds	1
   556  000079                     ___ftadd@exp2:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x19
   560  000079                     	ds	1
   561  00007A                     ___ftadd@exp1:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x1A
   565  00007A                     	ds	1
   566  00007B                     ?_eval_poly:
   567                           	opt stack 0
   568  00007B                     ?___fttol:
   569                           	opt stack 0
   570  00007B                     ___fttol@f1:
   571                           	opt stack 0
   572  00007B                     eval_poly@x:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0x1B
   576  00007B                     	ds	3
   577  00007E                     eval_poly@d:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x1E
   581  00007E                     	ds	1
   582  00007F                     ??___fttol:
   583                           
   584                           ; 1 bytes @ 0x1F
   585  00007F                     	ds	1
   586  000080                     eval_poly@n:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x20
   590  000080                     	ds	2
   591  000082                     eval_poly@res:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0x22
   595  000082                     	ds	2
   596  000084                     ___fttol@sign1:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x24
   600  000084                     	ds	1
   601  000085                     ?___ftdiv:
   602                           	opt stack 0
   603  000085                     ___ftdiv@f1:
   604                           	opt stack 0
   605  000085                     ___fttol@lval:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x25
   609  000085                     	ds	3
   610  000088                     ___ftdiv@f2:
   611                           	opt stack 0
   612                           
   613                           ; 3 bytes @ 0x28
   614  000088                     	ds	1
   615  000089                     ___fttol@exp1:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x29
   619  000089                     	ds	1
   620  00008A                     ?___altoft:
   621                           	opt stack 0
   622  00008A                     FillServoPositionString@forward:
   623                           	opt stack 0
   624  00008A                     ___altoft@c:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0x2A
   628  00008A                     	ds	1
   629  00008B                     ??___ftdiv:
   630                           
   631                           ; 1 bytes @ 0x2B
   632  00008B                     	ds	2
   633  00008D                     FillServoPositionString@left:
   634                           	opt stack 0
   635                           
   636                           ; 3 bytes @ 0x2D
   637  00008D                     	ds	1
   638  00008E                     ??___altoft:
   639  00008E                     ___ftdiv@cntr:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x2E
   643  00008E                     	ds	1
   644  00008F                     ___ftdiv@f3:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0x2F
   648  00008F                     	ds	1
   649  000090                     ??_FillServoPositionString:
   650                           
   651                           ; 1 bytes @ 0x30
   652  000090                     	ds	2
   653  000092                     ?_floor:
   654                           	opt stack 0
   655  000092                     ___ftdiv@exp:
   656                           	opt stack 0
   657  000092                     floor@x:
   658                           	opt stack 0
   659  000092                     _FillServoPositionString$1140:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x32
   663  000092                     	ds	1
   664  000093                     ___ftdiv@sign:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x33
   668  000093                     	ds	2
   669  000095                     floor@i:
   670                           	opt stack 0
   671  000095                     _FillServoPositionString$1141:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x35
   675  000095                     	ds	3
   676  000098                     floor@expon:
   677                           	opt stack 0
   678  000098                     _FillServoPositionString$1144:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x38
   682  000098                     	ds	2
   683  00009A                     ?___ftsub:
   684                           	opt stack 0
   685  00009A                     ___ftsub@f1:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x3A
   689  00009A                     	ds	1
   690  00009B                     FillServoPositionString@deltaHorizontal:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x3B
   694  00009B                     	ds	2
   695  00009D                     FillServoPositionString@newHorizontalPosition:
   696                           	opt stack 0
   697  00009D                     ___ftsub@f2:
   698                           	opt stack 0
   699                           
   700                           ; 3 bytes @ 0x3D
   701  00009D                     	ds	2
   702  00009F                     FillServoPositionString@deltaVertical:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x3F
   706  00009F                     	ds	1
   707  0000A0                     ?_sin:
   708                           	opt stack 0
   709  0000A0                     sin@f:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x40
   713  0000A0                     	ds	1
   714  0000A1                     FillServoPositionString@newVerticalPosition:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x41
   718  0000A1                     	ds	2
   719  0000A3                     _FillServoPositionString$1142:
   720                           	opt stack 0
   721  0000A3                     sin@y:
   722                           	opt stack 0
   723                           
   724                           ; 3 bytes @ 0x43
   725  0000A3                     	ds	2
   726  0000A5                     _FillServoPositionString$1143:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x45
   730  0000A5                     	ds	1
   731  0000A6                     _sin$1146:
   732                           	opt stack 0
   733                           
   734                           ; 3 bytes @ 0x46
   735  0000A6                     	ds	1
   736  0000A7                     FillServoPositionString@tmp:
   737                           	opt stack 0
   738                           
   739                           ; 5 bytes @ 0x47
   740  0000A7                     	ds	2
   741  0000A9                     sin@x2:
   742                           	opt stack 0
   743                           
   744                           ; 3 bytes @ 0x49
   745  0000A9                     	ds	3
   746  0000AC                     sin@sgn:
   747                           	opt stack 0
   748  0000AC                     _FillServoPositionString$1138:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x4C
   752  0000AC                     	ds	1
   753  0000AD                     ?_cos:
   754                           	opt stack 0
   755  0000AD                     cos@f:
   756                           	opt stack 0
   757                           
   758                           ; 3 bytes @ 0x4D
   759  0000AD                     	ds	1
   760  0000AE                     _FillServoPositionString$1139:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x4E
   764  0000AE                     	ds	2
   765  0000B0                     FillServoPositionString@i:
   766                           	opt stack 0
   767  0000B0                     _cos$1145:
   768                           	opt stack 0
   769                           
   770                           ; 3 bytes @ 0x50
   771  0000B0                     	ds	3
   772  0000B3                     main@forward:
   773                           	opt stack 0
   774                           
   775                           ; 3 bytes @ 0x53
   776  0000B3                     	ds	3
   777  0000B6                     main@left:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x56
   781  0000B6                     	ds	3
   782  0000B9                     _main$1136:
   783                           	opt stack 0
   784                           
   785                           ; 3 bytes @ 0x59
   786  0000B9                     	ds	3
   787  0000BC                     _main$1137:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x5C
   791  0000BC                     	ds	3
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           postinc0	equ	0xFEE
   797                           postdec1	equ	0xFE5
   798                           fsr1h	equ	0xFE2
   799                           fsr1l	equ	0xFE1
   800                           
   801                           	psect	cstackCOMRAM
   802  000001                     __pcstackCOMRAM:
   803                           	opt stack 0
   804  000001                     ??_high_isr:
   805  000001                     
   806                           ; 1 bytes @ 0x0
   807  000001                     	ds	18
   808  000013                     ??_low_isr:
   809                           
   810                           ; 1 bytes @ 0x12
   811  000013                     	ds	21
   812  000028                     ??_UART_Init:
   813  000028                     ?_strlen:
   814                           	opt stack 0
   815  000028                     ?___wmul:
   816                           	opt stack 0
   817  000028                     ?___lwdiv:
   818                           	opt stack 0
   819  000028                     ?___ftpack:
   820                           	opt stack 0
   821  000028                     ?___ftneg:
   822                           	opt stack 0
   823  000028                     UART_Write@data:
   824                           	opt stack 0
   825  000028                     ___wmul@multiplier:
   826                           	opt stack 0
   827  000028                     ___lwdiv@dividend:
   828                           	opt stack 0
   829  000028                     memset@p1:
   830                           	opt stack 0
   831  000028                     strlen@s:
   832                           	opt stack 0
   833  000028                     ___ftpack@arg:
   834                           	opt stack 0
   835  000028                     ___ftge@ff1:
   836                           	opt stack 0
   837  000028                     ___ftneg@f1:
   838                           	opt stack 0
   839  000028                     frexp@value:
   840                           	opt stack 0
   841                           
   842                           ; 3 bytes @ 0x27
   843  000028                     	ds	2
   844  00002A                     ??_strlen:
   845  00002A                     ___wmul@multiplicand:
   846                           	opt stack 0
   847  00002A                     ___lwdiv@divisor:
   848                           	opt stack 0
   849  00002A                     memset@c:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x29
   853  00002A                     	ds	1
   854  00002B                     ___ftpack@exp:
   855                           	opt stack 0
   856  00002B                     frexp@eptr:
   857                           	opt stack 0
   858  00002B                     ___ftge@ff2:
   859                           	opt stack 0
   860                           
   861                           ; 3 bytes @ 0x2A
   862  00002B                     	ds	1
   863  00002C                     ___ftpack@sign:
   864                           	opt stack 0
   865  00002C                     ___wmul@product:
   866                           	opt stack 0
   867  00002C                     ___lwdiv@quotient:
   868                           	opt stack 0
   869  00002C                     memset@n:
   870                           	opt stack 0
   871  00002C                     strlen@cp:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x2B
   875  00002C                     	ds	1
   876  00002D                     ??___ftpack:
   877  00002D                     ??_frexp:
   878                           
   879                           ; 1 bytes @ 0x2C
   880  00002D                     	ds	1
   881  00002E                     ??___ftge:
   882  00002E                     ___lwdiv@counter:
   883                           	opt stack 0
   884  00002E                     UART_Write_String@str:
   885                           	opt stack 0
   886  00002E                     memset@p:
   887                           	opt stack 0
   888  00002E                     strcat@to:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x2D
   892  00002E                     	ds	1
   893  00002F                     ?___lwmod:
   894                           	opt stack 0
   895  00002F                     ___lwmod@dividend:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x2E
   899  00002F                     	ds	1
   900  000030                     ??_UART_Write_String:
   901  000030                     ?___awtoft:
   902                           	opt stack 0
   903  000030                     RotatePositions@i:
   904                           	opt stack 0
   905  000030                     ___awtoft@c:
   906                           	opt stack 0
   907  000030                     strcat@from:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x2F
   911  000030                     	ds	1
   912  000031                     UART_Write_String@arrayLength:
   913                           	opt stack 0
   914  000031                     ___lwmod@divisor:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x30
   918  000031                     	ds	1
   919  000032                     strcat@cp:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x31
   923  000032                     	ds	1
   924  000033                     ___awtoft@sign:
   925                           	opt stack 0
   926  000033                     ___lwmod@counter:
   927                           	opt stack 0
   928  000033                     UART_Write_String@i:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x32
   932  000033                     	ds	1
   933  000034                     ??_sprintf:
   934  000034                     ??_eval_poly:
   935  000034                     ___altoft@exp:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x33
   939  000034                     	ds	1
   940  000035                     UART_Write_String@a:
   941                           	opt stack 0
   942  000035                     ___altoft@sign:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x34
   946  000035                     	ds	1
   947  000036                     tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           tblptrl	equ	0xFF6
   950                           tablat	equ	0xFF5
   951                           postinc0	equ	0xFEE
   952                           postdec1	equ	0xFE5
   953                           fsr1h	equ	0xFE2
   954                           fsr1l	equ	0xFE1
   955                           
   956                           ; 1 bytes @ 0x35
   957 ;;
   958 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   959 ;;
   960 ;; *************** function _main *****************
   961 ;; Defined at:
   962 ;;		line 154 in file "main.c"
   963 ;; Parameters:    Size  Location     Type
   964 ;;		None
   965 ;; Auto vars:     Size  Location     Type
   966 ;;  left            3   86[BANK0 ] float 
   967 ;;  forward         3   83[BANK0 ] float 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  1    wreg      void 
   970 ;; Registers used:
   971 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   977 ;;      Params:         0       0       0       0
   978 ;;      Locals:         0      12       0       0
   979 ;;      Temps:          0       0       0       0
   980 ;;      Totals:         0      12       0       0
   981 ;;Total ram usage:       12 bytes
   982 ;; Hardware stack levels required when called:    7
   983 ;; This function calls:
   984 ;;		_ConfigureOscillator
   985 ;;		_FillServoPositionString
   986 ;;		_InitServos
   987 ;;		_RotatePositions
   988 ;;		_UART_Init
   989 ;;		_UART_Write_String
   990 ;;		___ftmul
   991 ;;		_cos
   992 ;;		_sin
   993 ;; This function is called by:
   994 ;;		Startup code after reset
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text0
   999  001588                     __ptext0:
  1000                           	opt stack 0
  1001  001588                     _main:
  1002                           	opt stack 24
  1003                           
  1004                           ;main.c: 156: float forward = cos(rotation) * forwardSpeed;
  1005                           
  1006                           ;incstack = 0
  1007  001588  C0BF  F0AD         	movff	_rotation,cos@f
  1008  00158C  C0C0  F0AE         	movff	_rotation+1,cos@f+1
  1009  001590  C0C1  F0AF         	movff	_rotation+2,cos@f+2
  1010  001594  EC25  F00B         	call	_cos	;wreg free
  1011  001598  C0AD  F0B9         	movff	?_cos,_main$1136
  1012  00159C  C0AE  F0BA         	movff	?_cos+1,_main$1136+1
  1013  0015A0  C0AF  F0BB         	movff	?_cos+2,_main$1136+2
  1014                           
  1015                           ;main.c: 156: float forward = cos(rotation) * forwardSpeed;
  1016  0015A4  C0B9  F060         	movff	_main$1136,___ftmul@f1
  1017  0015A8  C0BA  F061         	movff	_main$1136+1,___ftmul@f1+1
  1018  0015AC  C0BB  F062         	movff	_main$1136+2,___ftmul@f1+2
  1019  0015B0  C0C2  F063         	movff	_forwardSpeed,___ftmul@f2
  1020  0015B4  C0C3  F064         	movff	_forwardSpeed+1,___ftmul@f2+1
  1021  0015B8  C0C4  F065         	movff	_forwardSpeed+2,___ftmul@f2+2
  1022  0015BC  ECF9  F008         	call	___ftmul	;wreg free
  1023  0015C0  C060  F0B3         	movff	?___ftmul,main@forward
  1024  0015C4  C061  F0B4         	movff	?___ftmul+1,main@forward+1
  1025  0015C8  C062  F0B5         	movff	?___ftmul+2,main@forward+2
  1026                           
  1027                           ;main.c: 157: float left = sin(rotation) * forwardSpeed;;
  1028  0015CC  C0BF  F0A0         	movff	_rotation,sin@f
  1029  0015D0  C0C0  F0A1         	movff	_rotation+1,sin@f+1
  1030  0015D4  C0C1  F0A2         	movff	_rotation+2,sin@f+2
  1031  0015D8  ECCD  F005         	call	_sin	;wreg free
  1032  0015DC  C0A0  F0BC         	movff	?_sin,_main$1137
  1033  0015E0  C0A1  F0BD         	movff	?_sin+1,_main$1137+1
  1034  0015E4  C0A2  F0BE         	movff	?_sin+2,_main$1137+2
  1035                           
  1036                           ;main.c: 157: float left = sin(rotation) * forwardSpeed;;
  1037  0015E8  C0BC  F060         	movff	_main$1137,___ftmul@f1
  1038  0015EC  C0BD  F061         	movff	_main$1137+1,___ftmul@f1+1
  1039  0015F0  C0BE  F062         	movff	_main$1137+2,___ftmul@f1+2
  1040  0015F4  C0C2  F063         	movff	_forwardSpeed,___ftmul@f2
  1041  0015F8  C0C3  F064         	movff	_forwardSpeed+1,___ftmul@f2+1
  1042  0015FC  C0C4  F065         	movff	_forwardSpeed+2,___ftmul@f2+2
  1043  001600  ECF9  F008         	call	___ftmul	;wreg free
  1044  001604  C060  F0B6         	movff	?___ftmul,main@left
  1045  001608  C061  F0B7         	movff	?___ftmul+1,main@left+1
  1046  00160C  C062  F0B8         	movff	?___ftmul+2,main@left+2
  1047                           
  1048                           ;main.c: 162: ConfigureOscillator();
  1049  001610  ECFB  F00E         	call	_ConfigureOscillator	;wreg free
  1050                           
  1051                           ;main.c: 166: UART_Init();
  1052  001614  EC9A  F00E         	call	_UART_Init	;wreg free
  1053                           
  1054                           ;main.c: 170: InitServos();
  1055  001618  EC6E  F004         	call	_InitServos	;wreg free
  1056  00161C                     
  1057                           ;main.c: 178: FillServoPositionString(forward, left);
  1058  00161C  C0B3  F08A         	movff	main@forward,FillServoPositionString@forward
  1059  001620  C0B4  F08B         	movff	main@forward+1,FillServoPositionString@forward+1
  1060  001624  C0B5  F08C         	movff	main@forward+2,FillServoPositionString@forward+2
  1061  001628  C0B6  F08D         	movff	main@left,FillServoPositionString@left
  1062  00162C  C0B7  F08E         	movff	main@left+1,FillServoPositionString@left+1
  1063  001630  C0B8  F08F         	movff	main@left+2,FillServoPositionString@left+2
  1064  001634  ECB4  F001         	call	_FillServoPositionString	;wreg free
  1065                           
  1066                           ;main.c: 182: UART_Write_String(movementString);
  1067  001638  0E00               	movlw	low _movementString
  1068  00163A  6E2E               	movwf	UART_Write_String@str,c
  1069  00163C  0E02               	movlw	high _movementString
  1070  00163E  6E2F               	movwf	UART_Write_String@str+1,c
  1071  001640  ECCB  F00D         	call	_UART_Write_String	;wreg free
  1072                           
  1073                           ;main.c: 186: RotatePositions();
  1074  001644  ECD4  F00B         	call	_RotatePositions	;wreg free
  1075  001648  D7E9               	goto	l73
  1076  00164A                     __end_of_main:
  1077                           	opt stack 0
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           tblptrl	equ	0xFF6
  1081                           tablat	equ	0xFF5
  1082                           postinc0	equ	0xFEE
  1083                           postdec1	equ	0xFE5
  1084                           fsr1h	equ	0xFE2
  1085                           fsr1l	equ	0xFE1
  1086                           
  1087 ;; *************** function _cos *****************
  1088 ;; Defined at:
  1089 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\cos.c"
  1090 ;; Parameters:    Size  Location     Type
  1091 ;;  f               3   77[BANK0 ] void 
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;		None
  1094 ;; Return value:  Size  Location     Type
  1095 ;;                  3   77[BANK0 ] void 
  1096 ;; Registers used:
  1097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1098 ;; Tracked objects:
  1099 ;;		On entry : 0/0
  1100 ;;		On exit  : 0/0
  1101 ;;		Unchanged: 0/0
  1102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1103 ;;      Params:         0       3       0       0
  1104 ;;      Locals:         0       3       0       0
  1105 ;;      Temps:          0       0       0       0
  1106 ;;      Totals:         0       6       0       0
  1107 ;;Total ram usage:        6 bytes
  1108 ;; Hardware stack levels used:    1
  1109 ;; Hardware stack levels required when called:    6
  1110 ;; This function calls:
  1111 ;;		___ftadd
  1112 ;;		___ftge
  1113 ;;		_sin
  1114 ;; This function is called by:
  1115 ;;		_main
  1116 ;; This function uses a non-reentrant model
  1117 ;;
  1118                           
  1119                           	psect	text1
  1120  00164A                     __ptext1:
  1121                           	opt stack 0
  1122  00164A                     _cos:
  1123                           	opt stack 24
  1124                           
  1125                           ;incstack = 0
  1126  00164A  0E10               	movlw	16
  1127  00164C  6E28               	movwf	___ftge@ff1,c
  1128  00164E  0E49               	movlw	73
  1129  001650  6E29               	movwf	___ftge@ff1+1,c
  1130  001652  0E40               	movlw	64
  1131  001654  6E2A               	movwf	___ftge@ff1+2,c
  1132  001656  C0AD  F02B         	movff	cos@f,___ftge@ff2
  1133  00165A  C0AE  F02C         	movff	cos@f+1,___ftge@ff2+1
  1134  00165E  C0AF  F02D         	movff	cos@f+2,___ftge@ff2+2
  1135  001662  EC6C  F00C         	call	___ftge	;wreg free
  1136  001666  B0D8               	btfsc	status,0,c
  1137  001668  D024               	goto	l352
  1138  00166A  C0AD  F06F         	movff	cos@f,___ftadd@f1
  1139  00166E  C0AE  F070         	movff	cos@f+1,___ftadd@f1+1
  1140  001672  C0AF  F071         	movff	cos@f+2,___ftadd@f1+2
  1141  001676  0ECC               	movlw	204
  1142  001678  0100               	movlb	0	; () banked
  1143  00167A  6F72               	movwf	___ftadd@f2& (0+255),b
  1144  00167C  0E96               	movlw	150
  1145  00167E  6F73               	movwf	(___ftadd@f2+1)& (0+255),b
  1146  001680  0EC0               	movlw	192
  1147  001682  6F74               	movwf	(___ftadd@f2+2)& (0+255),b
  1148  001684  EC00  F007         	call	___ftadd	;wreg free
  1149  001688  C06F  F0B0         	movff	?___ftadd,_cos$1145
  1150  00168C  C070  F0B1         	movff	?___ftadd+1,_cos$1145+1
  1151  001690  C071  F0B2         	movff	?___ftadd+2,_cos$1145+2
  1152  001694  C0B0  F0A0         	movff	_cos$1145,sin@f
  1153  001698  C0B1  F0A1         	movff	_cos$1145+1,sin@f+1
  1154  00169C  C0B2  F0A2         	movff	_cos$1145+2,sin@f+2
  1155  0016A0  ECCD  F005         	call	_sin	;wreg free
  1156  0016A4  C0A0  F0AD         	movff	?_sin,?_cos
  1157  0016A8  C0A1  F0AE         	movff	?_sin+1,?_cos+1
  1158  0016AC  C0A2  F0AF         	movff	?_sin+2,?_cos+2
  1159  0016B0  0012               	return	
  1160  0016B2                     l352:
  1161  0016B2  C0AD  F06F         	movff	cos@f,___ftadd@f1
  1162  0016B6  C0AE  F070         	movff	cos@f+1,___ftadd@f1+1
  1163  0016BA  C0AF  F071         	movff	cos@f+2,___ftadd@f1+2
  1164  0016BE  0E10               	movlw	16
  1165  0016C0  0100               	movlb	0	; () banked
  1166  0016C2  6F72               	movwf	___ftadd@f2& (0+255),b
  1167  0016C4  0EC9               	movlw	201
  1168  0016C6  6F73               	movwf	(___ftadd@f2+1)& (0+255),b
  1169  0016C8  0E3F               	movlw	63
  1170  0016CA  6F74               	movwf	(___ftadd@f2+2)& (0+255),b
  1171  0016CC  EC00  F007         	call	___ftadd	;wreg free
  1172  0016D0  C06F  F0B0         	movff	?___ftadd,_cos$1145
  1173  0016D4  C070  F0B1         	movff	?___ftadd+1,_cos$1145+1
  1174  0016D8  C071  F0B2         	movff	?___ftadd+2,_cos$1145+2
  1175  0016DC  C0B0  F0A0         	movff	_cos$1145,sin@f
  1176  0016E0  C0B1  F0A1         	movff	_cos$1145+1,sin@f+1
  1177  0016E4  C0B2  F0A2         	movff	_cos$1145+2,sin@f+2
  1178  0016E8  ECCD  F005         	call	_sin	;wreg free
  1179  0016EC  C0A0  F0AD         	movff	?_sin,?_cos
  1180  0016F0  C0A1  F0AE         	movff	?_sin+1,?_cos+1
  1181  0016F4  C0A2  F0AF         	movff	?_sin+2,?_cos+2
  1182  0016F8  0012               	return	
  1183  0016FA                     __end_of_cos:
  1184                           	opt stack 0
  1185                           tblptru	equ	0xFF8
  1186                           tblptrh	equ	0xFF7
  1187                           tblptrl	equ	0xFF6
  1188                           tablat	equ	0xFF5
  1189                           postinc0	equ	0xFEE
  1190                           postdec1	equ	0xFE5
  1191                           fsr1h	equ	0xFE2
  1192                           fsr1l	equ	0xFE1
  1193                           status	equ	0xFD8
  1194                           
  1195 ;; *************** function _sin *****************
  1196 ;; Defined at:
  1197 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sin.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  f               3   64[BANK0 ] void 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  x2              3   73[BANK0 ] void 
  1202 ;;  y               3   67[BANK0 ] void 
  1203 ;;  sgn             1   76[BANK0 ] unsigned char 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  3   64[BANK0 ] unsigned char 
  1206 ;; Registers used:
  1207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1213 ;;      Params:         0       3       0       0
  1214 ;;      Locals:         0      10       0       0
  1215 ;;      Temps:          0       0       0       0
  1216 ;;      Totals:         0      13       0       0
  1217 ;;Total ram usage:       13 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    5
  1220 ;; This function calls:
  1221 ;;		___ftadd
  1222 ;;		___ftdiv
  1223 ;;		___ftge
  1224 ;;		___ftmul
  1225 ;;		___ftneg
  1226 ;;		___ftsub
  1227 ;;		_eval_poly
  1228 ;;		_floor
  1229 ;; This function is called by:
  1230 ;;		_main
  1231 ;;		_cos
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text2
  1236  000B9A                     __ptext2:
  1237                           	opt stack 0
  1238  000B9A                     _sin:
  1239                           	opt stack 25
  1240                           
  1241                           ;incstack = 0
  1242  000B9A  0E00               	movlw	0
  1243  000B9C  0100               	movlb	0	; () banked
  1244  000B9E  6FAC               	movwf	sin@sgn& (0+255),b
  1245                           
  1246                           ; BSR set to: 0
  1247  000BA0  AFA2               	btfss	(sin@f+2)& (0+255),7,b
  1248  000BA2  D011               	goto	l598
  1249                           
  1250                           ; BSR set to: 0
  1251  000BA4  C0A0  F028         	movff	sin@f,___ftneg@f1
  1252  000BA8  C0A1  F029         	movff	sin@f+1,___ftneg@f1+1
  1253  000BAC  C0A2  F02A         	movff	sin@f+2,___ftneg@f1+2
  1254  000BB0  ECDA  F00E         	call	___ftneg	;wreg free
  1255  000BB4  C028  F0A0         	movff	?___ftneg,sin@f
  1256  000BB8  C029  F0A1         	movff	?___ftneg+1,sin@f+1
  1257  000BBC  C02A  F0A2         	movff	?___ftneg+2,sin@f+2
  1258  000BC0  0E01               	movlw	1
  1259  000BC2  0100               	movlb	0	; () banked
  1260  000BC4  6FAC               	movwf	sin@sgn& (0+255),b
  1261  000BC6                     l598:
  1262                           
  1263                           ; BSR set to: 0
  1264                           
  1265                           ; BSR set to: 0
  1266  000BC6  C0A0  F060         	movff	sin@f,___ftmul@f1
  1267  000BCA  C0A1  F061         	movff	sin@f+1,___ftmul@f1+1
  1268  000BCE  C0A2  F062         	movff	sin@f+2,___ftmul@f1+2
  1269  000BD2  0EFA               	movlw	250
  1270  000BD4  6F63               	movwf	___ftmul@f2& (0+255),b
  1271  000BD6  0E22               	movlw	34
  1272  000BD8  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  1273  000BDA  0E3E               	movlw	62
  1274  000BDC  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  1275  000BDE  ECF9  F008         	call	___ftmul	;wreg free
  1276  000BE2  C060  F0A0         	movff	?___ftmul,sin@f
  1277  000BE6  C061  F0A1         	movff	?___ftmul+1,sin@f+1
  1278  000BEA  C062  F0A2         	movff	?___ftmul+2,sin@f+2
  1279  000BEE  C0A0  F09A         	movff	sin@f,___ftsub@f1
  1280  000BF2  C0A1  F09B         	movff	sin@f+1,___ftsub@f1+1
  1281  000BF6  C0A2  F09C         	movff	sin@f+2,___ftsub@f1+2
  1282  000BFA  C0A0  F092         	movff	sin@f,floor@x
  1283  000BFE  C0A1  F093         	movff	sin@f+1,floor@x+1
  1284  000C02  C0A2  F094         	movff	sin@f+2,floor@x+2
  1285  000C06  ECE8  F009         	call	_floor	;wreg free
  1286  000C0A  C092  F09D         	movff	?_floor,___ftsub@f2
  1287  000C0E  C093  F09E         	movff	?_floor+1,___ftsub@f2+1
  1288  000C12  C094  F09F         	movff	?_floor+2,___ftsub@f2+2
  1289  000C16  EC1F  F00E         	call	___ftsub	;wreg free
  1290  000C1A  C09A  F0A0         	movff	?___ftsub,sin@f
  1291  000C1E  C09B  F0A1         	movff	?___ftsub+1,sin@f+1
  1292  000C22  C09C  F0A2         	movff	?___ftsub+2,sin@f+2
  1293  000C26  C0A0  F060         	movff	sin@f,___ftmul@f1
  1294  000C2A  C0A1  F061         	movff	sin@f+1,___ftmul@f1+1
  1295  000C2E  C0A2  F062         	movff	sin@f+2,___ftmul@f1+2
  1296  000C32  0E00               	movlw	0
  1297  000C34  0100               	movlb	0	; () banked
  1298  000C36  6F63               	movwf	___ftmul@f2& (0+255),b
  1299  000C38  0E80               	movlw	128
  1300  000C3A  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  1301  000C3C  0E40               	movlw	64
  1302  000C3E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  1303  000C40  ECF9  F008         	call	___ftmul	;wreg free
  1304  000C44  C060  F0A0         	movff	?___ftmul,sin@f
  1305  000C48  C061  F0A1         	movff	?___ftmul+1,sin@f+1
  1306  000C4C  C062  F0A2         	movff	?___ftmul+2,sin@f+2
  1307  000C50  0E00               	movlw	0
  1308  000C52  6E28               	movwf	___ftge@ff1,c
  1309  000C54  0E00               	movlw	0
  1310  000C56  6E29               	movwf	___ftge@ff1+1,c
  1311  000C58  0E40               	movlw	64
  1312  000C5A  6E2A               	movwf	___ftge@ff1+2,c
  1313  000C5C  C0A0  F02B         	movff	sin@f,___ftge@ff2
  1314  000C60  C0A1  F02C         	movff	sin@f+1,___ftge@ff2+1
  1315  000C64  C0A2  F02D         	movff	sin@f+2,___ftge@ff2+2
  1316  000C68  EC6C  F00C         	call	___ftge	;wreg free
  1317  000C6C  B0D8               	btfsc	status,0,c
  1318  000C6E  D01D               	goto	l599
  1319  000C70  C0A0  F09A         	movff	sin@f,___ftsub@f1
  1320  000C74  C0A1  F09B         	movff	sin@f+1,___ftsub@f1+1
  1321  000C78  C0A2  F09C         	movff	sin@f+2,___ftsub@f1+2
  1322  000C7C  0E00               	movlw	0
  1323  000C7E  0100               	movlb	0	; () banked
  1324  000C80  6F9D               	movwf	___ftsub@f2& (0+255),b
  1325  000C82  0E00               	movlw	0
  1326  000C84  6F9E               	movwf	(___ftsub@f2+1)& (0+255),b
  1327  000C86  0E40               	movlw	64
  1328  000C88  6F9F               	movwf	(___ftsub@f2+2)& (0+255),b
  1329  000C8A  EC1F  F00E         	call	___ftsub	;wreg free
  1330  000C8E  C09A  F0A0         	movff	?___ftsub,sin@f
  1331  000C92  C09B  F0A1         	movff	?___ftsub+1,sin@f+1
  1332  000C96  C09C  F0A2         	movff	?___ftsub+2,sin@f+2
  1333  000C9A  0100               	movlb	0	; () banked
  1334  000C9C  51AC               	movf	sin@sgn& (0+255),w,b
  1335  000C9E  A4D8               	btfss	status,2,c
  1336  000CA0  D002               	goto	u2490
  1337  000CA2  0E01               	movlw	1
  1338  000CA4  D001               	goto	u2500
  1339  000CA6                     u2490:
  1340  000CA6  0E00               	movlw	0
  1341  000CA8                     u2500:
  1342  000CA8  6FAC               	movwf	sin@sgn& (0+255),b
  1343  000CAA                     l599:
  1344                           
  1345                           ; BSR set to: 0
  1346  000CAA  0E00               	movlw	0
  1347  000CAC  6E28               	movwf	___ftge@ff1,c
  1348  000CAE  0E80               	movlw	128
  1349  000CB0  6E29               	movwf	___ftge@ff1+1,c
  1350  000CB2  0E3F               	movlw	63
  1351  000CB4  6E2A               	movwf	___ftge@ff1+2,c
  1352  000CB6  C0A0  F02B         	movff	sin@f,___ftge@ff2
  1353  000CBA  C0A1  F02C         	movff	sin@f+1,___ftge@ff2+1
  1354  000CBE  C0A2  F02D         	movff	sin@f+2,___ftge@ff2+2
  1355  000CC2  EC6C  F00C         	call	___ftge	;wreg free
  1356  000CC6  B0D8               	btfsc	status,0,c
  1357  000CC8  D01D               	goto	l600
  1358  000CCA  C0A0  F028         	movff	sin@f,___ftneg@f1
  1359  000CCE  C0A1  F029         	movff	sin@f+1,___ftneg@f1+1
  1360  000CD2  C0A2  F02A         	movff	sin@f+2,___ftneg@f1+2
  1361  000CD6  ECDA  F00E         	call	___ftneg	;wreg free
  1362  000CDA  C028  F06F         	movff	?___ftneg,___ftadd@f1
  1363  000CDE  C029  F070         	movff	?___ftneg+1,___ftadd@f1+1
  1364  000CE2  C02A  F071         	movff	?___ftneg+2,___ftadd@f1+2
  1365  000CE6  0E00               	movlw	0
  1366  000CE8  0100               	movlb	0	; () banked
  1367  000CEA  6F72               	movwf	___ftadd@f2& (0+255),b
  1368  000CEC  0E00               	movlw	0
  1369  000CEE  6F73               	movwf	(___ftadd@f2+1)& (0+255),b
  1370  000CF0  0E40               	movlw	64
  1371  000CF2  6F74               	movwf	(___ftadd@f2+2)& (0+255),b
  1372  000CF4  EC00  F007         	call	___ftadd	;wreg free
  1373  000CF8  C06F  F0A0         	movff	?___ftadd,sin@f
  1374  000CFC  C070  F0A1         	movff	?___ftadd+1,sin@f+1
  1375  000D00  C071  F0A2         	movff	?___ftadd+2,sin@f+2
  1376  000D04                     l600:
  1377  000D04  C0A0  F060         	movff	sin@f,___ftmul@f1
  1378  000D08  C0A1  F061         	movff	sin@f+1,___ftmul@f1+1
  1379  000D0C  C0A2  F062         	movff	sin@f+2,___ftmul@f1+2
  1380  000D10  C0A0  F063         	movff	sin@f,___ftmul@f2
  1381  000D14  C0A1  F064         	movff	sin@f+1,___ftmul@f2+1
  1382  000D18  C0A2  F065         	movff	sin@f+2,___ftmul@f2+2
  1383  000D1C  ECF9  F008         	call	___ftmul	;wreg free
  1384  000D20  C060  F0A9         	movff	?___ftmul,sin@x2
  1385  000D24  C061  F0AA         	movff	?___ftmul+1,sin@x2+1
  1386  000D28  C062  F0AB         	movff	?___ftmul+2,sin@x2+2
  1387  000D2C  C0A9  F07B         	movff	sin@x2,eval_poly@x
  1388  000D30  C0AA  F07C         	movff	sin@x2+1,eval_poly@x+1
  1389  000D34  C0AB  F07D         	movff	sin@x2+2,eval_poly@x+2
  1390  000D38  0E4E               	movlw	low sin@coeff_b
  1391  000D3A  0100               	movlb	0	; () banked
  1392  000D3C  6F7E               	movwf	eval_poly@d& (0+255),b
  1393  000D3E  0E03               	movlw	high sin@coeff_b
  1394  000D40  6F7F               	movwf	(eval_poly@d+1)& (0+255),b
  1395  000D42  0E00               	movlw	0
  1396  000D44  6F81               	movwf	(eval_poly@n+1)& (0+255),b
  1397  000D46  0E03               	movlw	3
  1398  000D48  6F80               	movwf	eval_poly@n& (0+255),b
  1399  000D4A  EC59  F00A         	call	_eval_poly	;wreg free
  1400  000D4E  C07B  F0A3         	movff	?_eval_poly,sin@y
  1401  000D52  C07C  F0A4         	movff	?_eval_poly+1,sin@y+1
  1402  000D56  C07D  F0A5         	movff	?_eval_poly+2,sin@y+2
  1403  000D5A  C0A3  F088         	movff	sin@y,___ftdiv@f2
  1404  000D5E  C0A4  F089         	movff	sin@y+1,___ftdiv@f2+1
  1405  000D62  C0A5  F08A         	movff	sin@y+2,___ftdiv@f2+2
  1406  000D66  0E00               	movlw	0
  1407  000D68  0100               	movlb	0	; () banked
  1408  000D6A  6F81               	movwf	(eval_poly@n+1)& (0+255),b
  1409  000D6C  0E04               	movlw	4
  1410  000D6E  6F80               	movwf	eval_poly@n& (0+255),b
  1411  000D70  0E3F               	movlw	low sin@coeff_a
  1412  000D72  6F7E               	movwf	eval_poly@d& (0+255),b
  1413  000D74  0E03               	movlw	high sin@coeff_a
  1414  000D76  6F7F               	movwf	(eval_poly@d+1)& (0+255),b
  1415  000D78  C0A9  F07B         	movff	sin@x2,eval_poly@x
  1416  000D7C  C0AA  F07C         	movff	sin@x2+1,eval_poly@x+1
  1417  000D80  C0AB  F07D         	movff	sin@x2+2,eval_poly@x+2
  1418  000D84  EC59  F00A         	call	_eval_poly	;wreg free
  1419  000D88  C07B  F085         	movff	?_eval_poly,___ftdiv@f1
  1420  000D8C  C07C  F086         	movff	?_eval_poly+1,___ftdiv@f1+1
  1421  000D90  C07D  F087         	movff	?_eval_poly+2,___ftdiv@f1+2
  1422  000D94  EC74  F009         	call	___ftdiv	;wreg free
  1423  000D98  C085  F0A6         	movff	?___ftdiv,_sin$1146
  1424  000D9C  C086  F0A7         	movff	?___ftdiv+1,_sin$1146+1
  1425  000DA0  C087  F0A8         	movff	?___ftdiv+2,_sin$1146+2
  1426  000DA4  C0A0  F060         	movff	sin@f,___ftmul@f1
  1427  000DA8  C0A1  F061         	movff	sin@f+1,___ftmul@f1+1
  1428  000DAC  C0A2  F062         	movff	sin@f+2,___ftmul@f1+2
  1429  000DB0  C0A6  F063         	movff	_sin$1146,___ftmul@f2
  1430  000DB4  C0A7  F064         	movff	_sin$1146+1,___ftmul@f2+1
  1431  000DB8  C0A8  F065         	movff	_sin$1146+2,___ftmul@f2+2
  1432  000DBC  ECF9  F008         	call	___ftmul	;wreg free
  1433  000DC0  C060  F0A0         	movff	?___ftmul,sin@f
  1434  000DC4  C061  F0A1         	movff	?___ftmul+1,sin@f+1
  1435  000DC8  C062  F0A2         	movff	?___ftmul+2,sin@f+2
  1436  000DCC  0100               	movlb	0	; () banked
  1437  000DCE  51AC               	movf	sin@sgn& (0+255),w,b
  1438  000DD0  B4D8               	btfsc	status,2,c
  1439  000DD2  D00F               	goto	l601
  1440                           
  1441                           ; BSR set to: 0
  1442  000DD4  C0A0  F028         	movff	sin@f,___ftneg@f1
  1443  000DD8  C0A1  F029         	movff	sin@f+1,___ftneg@f1+1
  1444  000DDC  C0A2  F02A         	movff	sin@f+2,___ftneg@f1+2
  1445  000DE0  ECDA  F00E         	call	___ftneg	;wreg free
  1446  000DE4  C028  F0A0         	movff	?___ftneg,?_sin
  1447  000DE8  C029  F0A1         	movff	?___ftneg+1,?_sin+1
  1448  000DEC  C02A  F0A2         	movff	?___ftneg+2,?_sin+2
  1449  000DF0  0012               	return	
  1450  000DF2                     l601:
  1451                           
  1452                           ; BSR set to: 0
  1453  000DF2  C0A0  F0A0         	movff	sin@f,?_sin
  1454  000DF6  C0A1  F0A1         	movff	sin@f+1,?_sin+1
  1455  000DFA  C0A2  F0A2         	movff	sin@f+2,?_sin+2
  1456  000DFE  0012               	return		;funcret
  1457  000E00                     __end_of_sin:
  1458                           	opt stack 0
  1459                           tblptru	equ	0xFF8
  1460                           tblptrh	equ	0xFF7
  1461                           tblptrl	equ	0xFF6
  1462                           tablat	equ	0xFF5
  1463                           postinc0	equ	0xFEE
  1464                           postdec1	equ	0xFE5
  1465                           fsr1h	equ	0xFE2
  1466                           fsr1l	equ	0xFE1
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _floor *****************
  1470 ;; Defined at:
  1471 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;  x               3   50[BANK0 ] unsigned char 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  i               3   53[BANK0 ] unsigned char 
  1476 ;;  expon           2   56[BANK0 ] int 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  3   50[BANK0 ] int 
  1479 ;; Registers used:
  1480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1486 ;;      Params:         0       3       0       0
  1487 ;;      Locals:         0       5       0       0
  1488 ;;      Temps:          0       0       0       0
  1489 ;;      Totals:         0       8       0       0
  1490 ;;Total ram usage:        8 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    4
  1493 ;; This function calls:
  1494 ;;		___altoft
  1495 ;;		___ftadd
  1496 ;;		___ftge
  1497 ;;		___fttol
  1498 ;;		_frexp
  1499 ;; This function is called by:
  1500 ;;		_sin
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text3
  1505  0013D0                     __ptext3:
  1506                           	opt stack 0
  1507  0013D0                     _floor:
  1508                           	opt stack 25
  1509                           
  1510                           ;incstack = 0
  1511  0013D0  C092  F028         	movff	floor@x,frexp@value
  1512  0013D4  C093  F029         	movff	floor@x+1,frexp@value+1
  1513  0013D8  C094  F02A         	movff	floor@x+2,frexp@value+2
  1514  0013DC  0E98               	movlw	low floor@expon
  1515  0013DE  6E2B               	movwf	frexp@eptr,c
  1516  0013E0  0E00               	movlw	high floor@expon
  1517  0013E2  6E2C               	movwf	frexp@eptr+1,c
  1518  0013E4  EC30  F00D         	call	_frexp	;wreg free
  1519  0013E8  0100               	movlb	0	; () banked
  1520  0013EA  AF99               	btfss	(floor@expon+1)& (0+255),7,b
  1521  0013EC  D010               	goto	l767
  1522                           
  1523                           ; BSR set to: 0
  1524  0013EE  AF94               	btfss	(floor@x+2)& (0+255),7,b
  1525  0013F0  D007               	goto	l768
  1526                           
  1527                           ; BSR set to: 0
  1528  0013F2  0E00               	movlw	0
  1529  0013F4  6F92               	movwf	?_floor& (0+255),b
  1530  0013F6  0E80               	movlw	128
  1531  0013F8  6F93               	movwf	(?_floor+1)& (0+255),b
  1532  0013FA  0EBF               	movlw	191
  1533  0013FC  6F94               	movwf	(?_floor+2)& (0+255),b
  1534                           
  1535                           ; BSR set to: 0
  1536  0013FE  0012               	return	
  1537  001400                     l768:
  1538                           
  1539                           ; BSR set to: 0
  1540                           
  1541                           ; BSR set to: 0
  1542  001400  0E00               	movlw	0
  1543  001402  6F92               	movwf	?_floor& (0+255),b
  1544  001404  0E00               	movlw	0
  1545  001406  6F93               	movwf	(?_floor+1)& (0+255),b
  1546  001408  0E00               	movlw	0
  1547  00140A  6F94               	movwf	(?_floor+2)& (0+255),b
  1548                           
  1549                           ; BSR set to: 0
  1550  00140C  0012               	return	
  1551  00140E                     l767:
  1552                           
  1553                           ; BSR set to: 0
  1554                           
  1555                           ; BSR set to: 0
  1556  00140E  5199               	movf	(floor@expon+1)& (0+255),w,b
  1557  001410  E104               	bnz	u2440
  1558  001412  0E15               	movlw	21
  1559  001414  5D98               	subwf	floor@expon& (0+255),w,b
  1560  001416  A0D8               	btfss	status,0,c
  1561  001418  D007               	goto	l770
  1562  00141A                     u2440:
  1563                           
  1564                           ; BSR set to: 0
  1565  00141A  C092  F092         	movff	floor@x,?_floor
  1566  00141E  C093  F093         	movff	floor@x+1,?_floor+1
  1567  001422  C094  F094         	movff	floor@x+2,?_floor+2
  1568  001426  0012               	return	
  1569  001428                     l770:
  1570                           
  1571                           ; BSR set to: 0
  1572                           
  1573                           ; BSR set to: 0
  1574  001428  C092  F07B         	movff	floor@x,___fttol@f1
  1575  00142C  C093  F07C         	movff	floor@x+1,___fttol@f1+1
  1576  001430  C094  F07D         	movff	floor@x+2,___fttol@f1+2
  1577  001434  EC7D  F008         	call	___fttol	;wreg free
  1578  001438  C07B  F08A         	movff	?___fttol,___altoft@c
  1579  00143C  C07C  F08B         	movff	?___fttol+1,___altoft@c+1
  1580  001440  C07D  F08C         	movff	?___fttol+2,___altoft@c+2
  1581  001444  C07E  F08D         	movff	?___fttol+3,___altoft@c+3
  1582  001448  ECF3  F00C         	call	___altoft	;wreg free
  1583  00144C  C08A  F095         	movff	?___altoft,floor@i
  1584  001450  C08B  F096         	movff	?___altoft+1,floor@i+1
  1585  001454  C08C  F097         	movff	?___altoft+2,floor@i+2
  1586  001458  C092  F028         	movff	floor@x,___ftge@ff1
  1587  00145C  C093  F029         	movff	floor@x+1,___ftge@ff1+1
  1588  001460  C094  F02A         	movff	floor@x+2,___ftge@ff1+2
  1589  001464  C095  F02B         	movff	floor@i,___ftge@ff2
  1590  001468  C096  F02C         	movff	floor@i+1,___ftge@ff2+1
  1591  00146C  C097  F02D         	movff	floor@i+2,___ftge@ff2+2
  1592  001470  EC6C  F00C         	call	___ftge	;wreg free
  1593  001474  B0D8               	btfsc	status,0,c
  1594  001476  D016               	goto	l771
  1595  001478  C095  F06F         	movff	floor@i,___ftadd@f1
  1596  00147C  C096  F070         	movff	floor@i+1,___ftadd@f1+1
  1597  001480  C097  F071         	movff	floor@i+2,___ftadd@f1+2
  1598  001484  0E00               	movlw	0
  1599  001486  0100               	movlb	0	; () banked
  1600  001488  6F72               	movwf	___ftadd@f2& (0+255),b
  1601  00148A  0E80               	movlw	128
  1602  00148C  6F73               	movwf	(___ftadd@f2+1)& (0+255),b
  1603  00148E  0EBF               	movlw	191
  1604  001490  6F74               	movwf	(___ftadd@f2+2)& (0+255),b
  1605  001492  EC00  F007         	call	___ftadd	;wreg free
  1606  001496  C06F  F092         	movff	?___ftadd,?_floor
  1607  00149A  C070  F093         	movff	?___ftadd+1,?_floor+1
  1608  00149E  C071  F094         	movff	?___ftadd+2,?_floor+2
  1609  0014A2  0012               	return	
  1610  0014A4                     l771:
  1611  0014A4  C095  F092         	movff	floor@i,?_floor
  1612  0014A8  C096  F093         	movff	floor@i+1,?_floor+1
  1613  0014AC  C097  F094         	movff	floor@i+2,?_floor+2
  1614  0014B0  0012               	return		;funcret
  1615  0014B2                     __end_of_floor:
  1616                           	opt stack 0
  1617                           tblptru	equ	0xFF8
  1618                           tblptrh	equ	0xFF7
  1619                           tblptrl	equ	0xFF6
  1620                           tablat	equ	0xFF5
  1621                           postinc0	equ	0xFEE
  1622                           postdec1	equ	0xFE5
  1623                           fsr1h	equ	0xFE2
  1624                           fsr1l	equ	0xFE1
  1625                           status	equ	0xFD8
  1626                           
  1627 ;; *************** function _frexp *****************
  1628 ;; Defined at:
  1629 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;  value           3   39[COMRAM] int 
  1632 ;;  eptr            2   42[COMRAM] PTR int 
  1633 ;;		 -> floor@expon(2), 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;		None
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  3   39[COMRAM] PTR int 
  1638 ;; Registers used:
  1639 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1645 ;;      Params:         5       0       0       0
  1646 ;;      Locals:         0       0       0       0
  1647 ;;      Temps:          2       0       0       0
  1648 ;;      Totals:         7       0       0       0
  1649 ;;Total ram usage:        7 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    2
  1652 ;; This function calls:
  1653 ;;		Nothing
  1654 ;; This function is called by:
  1655 ;;		_floor
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text4
  1660  001A60                     __ptext4:
  1661                           	opt stack 0
  1662  001A60                     _frexp:
  1663                           	opt stack 26
  1664                           
  1665                           ;incstack = 0
  1666  001A60  5028               	movf	frexp@value,w,c
  1667  001A62  1029               	iorwf	frexp@value+1,w,c
  1668  001A64  102A               	iorwf	frexp@value+2,w,c
  1669  001A66  A4D8               	btfss	status,2,c
  1670  001A68  D009               	goto	l776
  1671  001A6A  C02B  FFD9         	movff	frexp@eptr,fsr2l
  1672  001A6E  C02C  FFDA         	movff	frexp@eptr+1,fsr2h
  1673  001A72  0E00               	movlw	0
  1674  001A74  6EDE               	movwf	postinc2,c
  1675  001A76  0E00               	movlw	0
  1676  001A78  6EDD               	movwf	postdec2,c
  1677                           
  1678                           ;	Return value of _frexp is never used
  1679  001A7A  0012               	return	
  1680  001A7C                     l776:
  1681  001A7C  502A               	movf	frexp@value+2,w,c
  1682  001A7E  0B7F               	andlw	127
  1683  001A80  6E2D               	movwf	??_frexp& (0+255),c
  1684  001A82  6A2E               	clrf	(??_frexp+1)& (0+255),c
  1685  001A84  90D8               	bcf	status,0,c
  1686  001A86  362D               	rlcf	??_frexp,f,c
  1687  001A88  362E               	rlcf	??_frexp+1,f,c
  1688  001A8A  C02B  FFD9         	movff	frexp@eptr,fsr2l
  1689  001A8E  C02C  FFDA         	movff	frexp@eptr+1,fsr2h
  1690  001A92  C02D  FFDE         	movff	??_frexp,postinc2
  1691  001A96  C02E  FFDD         	movff	??_frexp+1,postdec2
  1692  001A9A  AE29               	btfss	frexp@value+1,7,c
  1693  001A9C  D003               	goto	u1490
  1694  001A9E  6A2D               	clrf	??_frexp& (0+255),c
  1695  001AA0  2A2D               	incf	??_frexp& (0+255),f,c
  1696  001AA2  D001               	goto	u1498
  1697  001AA4                     u1490:
  1698  001AA4  6A2D               	clrf	??_frexp& (0+255),c
  1699  001AA6                     u1498:
  1700  001AA6  502D               	movf	??_frexp,w,c
  1701  001AA8  C02B  FFD9         	movff	frexp@eptr,fsr2l
  1702  001AAC  C02C  FFDA         	movff	frexp@eptr+1,fsr2h
  1703  001AB0  12DE               	iorwf	postinc2,f,c
  1704  001AB2  0E00               	movlw	0
  1705  001AB4  12DD               	iorwf	postdec2,f,c
  1706  001AB6  C02B  FFD9         	movff	frexp@eptr,fsr2l
  1707  001ABA  C02C  FFDA         	movff	frexp@eptr+1,fsr2h
  1708  001ABE  0E82               	movlw	130
  1709  001AC0  26DE               	addwf	postinc2,f,c
  1710  001AC2  0EFF               	movlw	255
  1711  001AC4  22DD               	addwfc	postdec2,f,c
  1712  001AC6  802A               	bsf	frexp@value+2,0,c
  1713  001AC8  822A               	bsf	frexp@value+2,1,c
  1714  001ACA  842A               	bsf	frexp@value+2,2,c
  1715  001ACC  862A               	bsf	frexp@value+2,3,c
  1716  001ACE  882A               	bsf	frexp@value+2,4,c
  1717  001AD0  8A2A               	bsf	frexp@value+2,5,c
  1718  001AD2  9C2A               	bcf	frexp@value+2,6,c
  1719  001AD4  9E29               	bcf	frexp@value+1,7,c
  1720  001AD6  0012               	return	
  1721  001AD8                     __end_of_frexp:
  1722                           	opt stack 0
  1723                           tblptru	equ	0xFF8
  1724                           tblptrh	equ	0xFF7
  1725                           tblptrl	equ	0xFF6
  1726                           tablat	equ	0xFF5
  1727                           postinc0	equ	0xFEE
  1728                           postdec1	equ	0xFE5
  1729                           fsr1h	equ	0xFE2
  1730                           fsr1l	equ	0xFE1
  1731                           postinc2	equ	0xFDE
  1732                           postdec2	equ	0xFDD
  1733                           fsr2h	equ	0xFDA
  1734                           fsr2l	equ	0xFD9
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function ___ftge *****************
  1738 ;; Defined at:
  1739 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  ff1             3   39[COMRAM] float 
  1742 ;;  ff2             3   42[COMRAM] float 
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;		None
  1745 ;; Return value:  Size  Location     Type
  1746 ;;		None               void
  1747 ;; Registers used:
  1748 ;;		wreg, status,2, status,0
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1754 ;;      Params:         6       0       0       0
  1755 ;;      Locals:         0       0       0       0
  1756 ;;      Temps:          3       0       0       0
  1757 ;;      Totals:         9       0       0       0
  1758 ;;Total ram usage:        9 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    2
  1761 ;; This function calls:
  1762 ;;		Nothing
  1763 ;; This function is called by:
  1764 ;;		_cos
  1765 ;;		_sin
  1766 ;;		_floor
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text5
  1771  0018D8                     __ptext5:
  1772                           	opt stack 0
  1773  0018D8                     ___ftge:
  1774                           	opt stack 26
  1775                           
  1776                           ;incstack = 0
  1777  0018D8  AE2A               	btfss	___ftge@ff1+2,7,c
  1778  0018DA  D016               	goto	l443
  1779  0018DC  C028  F02E         	movff	___ftge@ff1,??___ftge
  1780  0018E0  C029  F02F         	movff	___ftge@ff1+1,??___ftge+1
  1781  0018E4  C02A  F030         	movff	___ftge@ff1+2,??___ftge+2
  1782  0018E8  1E2E               	comf	??___ftge,f,c
  1783  0018EA  1E2F               	comf	??___ftge+1,f,c
  1784  0018EC  1E30               	comf	??___ftge+2,f,c
  1785  0018EE  2A2E               	incf	??___ftge,f,c
  1786  0018F0  0E00               	movlw	0
  1787  0018F2  222F               	addwfc	??___ftge+1,f,c
  1788  0018F4  2230               	addwfc	??___ftge+2,f,c
  1789  0018F6  0E00               	movlw	0
  1790  0018F8  242E               	addwf	??___ftge,w,c
  1791  0018FA  6E28               	movwf	___ftge@ff1,c
  1792  0018FC  0E00               	movlw	0
  1793  0018FE  202F               	addwfc	??___ftge+1,w,c
  1794  001900  6E29               	movwf	___ftge@ff1+1,c
  1795  001902  0E80               	movlw	128
  1796  001904  2030               	addwfc	??___ftge+2,w,c
  1797  001906  6E2A               	movwf	___ftge@ff1+2,c
  1798  001908                     l443:
  1799  001908  AE2D               	btfss	___ftge@ff2+2,7,c
  1800  00190A  D016               	goto	l444
  1801  00190C  C02B  F02E         	movff	___ftge@ff2,??___ftge
  1802  001910  C02C  F02F         	movff	___ftge@ff2+1,??___ftge+1
  1803  001914  C02D  F030         	movff	___ftge@ff2+2,??___ftge+2
  1804  001918  1E2E               	comf	??___ftge,f,c
  1805  00191A  1E2F               	comf	??___ftge+1,f,c
  1806  00191C  1E30               	comf	??___ftge+2,f,c
  1807  00191E  2A2E               	incf	??___ftge,f,c
  1808  001920  0E00               	movlw	0
  1809  001922  222F               	addwfc	??___ftge+1,f,c
  1810  001924  2230               	addwfc	??___ftge+2,f,c
  1811  001926  0E00               	movlw	0
  1812  001928  242E               	addwf	??___ftge,w,c
  1813  00192A  6E2B               	movwf	___ftge@ff2,c
  1814  00192C  0E00               	movlw	0
  1815  00192E  202F               	addwfc	??___ftge+1,w,c
  1816  001930  6E2C               	movwf	___ftge@ff2+1,c
  1817  001932  0E80               	movlw	128
  1818  001934  2030               	addwfc	??___ftge+2,w,c
  1819  001936  6E2D               	movwf	___ftge@ff2+2,c
  1820  001938                     l444:
  1821  001938  0E00               	movlw	0
  1822  00193A  1A28               	xorwf	___ftge@ff1,f,c
  1823  00193C  0E00               	movlw	0
  1824  00193E  1A29               	xorwf	___ftge@ff1+1,f,c
  1825  001940  0E80               	movlw	128
  1826  001942  1A2A               	xorwf	___ftge@ff1+2,f,c
  1827  001944  0E00               	movlw	0
  1828  001946  1A2B               	xorwf	___ftge@ff2,f,c
  1829  001948  0E00               	movlw	0
  1830  00194A  1A2C               	xorwf	___ftge@ff2+1,f,c
  1831  00194C  0E80               	movlw	128
  1832  00194E  1A2D               	xorwf	___ftge@ff2+2,f,c
  1833  001950  502B               	movf	___ftge@ff2,w,c
  1834  001952  5C28               	subwf	___ftge@ff1,w,c
  1835  001954  502C               	movf	___ftge@ff2+1,w,c
  1836  001956  5829               	subwfb	___ftge@ff1+1,w,c
  1837  001958  502D               	movf	___ftge@ff2+2,w,c
  1838  00195A  582A               	subwfb	___ftge@ff1+2,w,c
  1839  00195C  B0D8               	btfsc	status,0,c
  1840  00195E  D002               	goto	l1591
  1841  001960  90D8               	bcf	status,0,c
  1842  001962  0012               	return	
  1843  001964                     l1591:
  1844  001964  80D8               	bsf	status,0,c
  1845  001966  0012               	return	
  1846  001968                     __end_of___ftge:
  1847                           	opt stack 0
  1848                           tblptru	equ	0xFF8
  1849                           tblptrh	equ	0xFF7
  1850                           tblptrl	equ	0xFF6
  1851                           tablat	equ	0xFF5
  1852                           postinc0	equ	0xFEE
  1853                           postdec1	equ	0xFE5
  1854                           fsr1h	equ	0xFE2
  1855                           fsr1l	equ	0xFE1
  1856                           postinc2	equ	0xFDE
  1857                           postdec2	equ	0xFDD
  1858                           fsr2h	equ	0xFDA
  1859                           fsr2l	equ	0xFD9
  1860                           status	equ	0xFD8
  1861                           
  1862 ;; *************** function ___altoft *****************
  1863 ;; Defined at:
  1864 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\altoft.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;  c               4   42[BANK0 ] long 
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;  sign            1   52[COMRAM] unsigned char 
  1869 ;;  exp             1   51[COMRAM] unsigned char 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  3   42[BANK0 ] float 
  1872 ;; Registers used:
  1873 ;;		wreg, status,2, status,0, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1879 ;;      Params:         0       4       0       0
  1880 ;;      Locals:         2       0       0       0
  1881 ;;      Temps:          0       4       0       0
  1882 ;;      Totals:         2       8       0       0
  1883 ;;Total ram usage:       10 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    3
  1886 ;; This function calls:
  1887 ;;		___ftpack
  1888 ;; This function is called by:
  1889 ;;		_floor
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text6
  1894  0019E6                     __ptext6:
  1895                           	opt stack 0
  1896  0019E6                     ___altoft:
  1897                           	opt stack 25
  1898                           
  1899                           ;incstack = 0
  1900  0019E6  0E00               	movlw	0
  1901  0019E8  6E35               	movwf	___altoft@sign,c
  1902  0019EA  0E8E               	movlw	142
  1903  0019EC  6E34               	movwf	___altoft@exp,c
  1904  0019EE  0100               	movlb	0	; () banked
  1905  0019F0  AF8D               	btfss	(___altoft@c+3)& (0+255),7,b
  1906  0019F2  D011               	goto	l235
  1907                           
  1908                           ; BSR set to: 0
  1909  0019F4  1F8D               	comf	(___altoft@c+3)& (0+255),f,b
  1910  0019F6  1F8C               	comf	(___altoft@c+2)& (0+255),f,b
  1911  0019F8  1F8B               	comf	(___altoft@c+1)& (0+255),f,b
  1912  0019FA  6D8A               	negf	___altoft@c& (0+255),b
  1913  0019FC  0E00               	movlw	0
  1914  0019FE  238B               	addwfc	(___altoft@c+1)& (0+255),f,b
  1915  001A00  238C               	addwfc	(___altoft@c+2)& (0+255),f,b
  1916  001A02  238D               	addwfc	(___altoft@c+3)& (0+255),f,b
  1917                           
  1918                           ; BSR set to: 0
  1919  001A04  0E01               	movlw	1
  1920  001A06  6E35               	movwf	___altoft@sign,c
  1921                           
  1922                           ; BSR set to: 0
  1923  001A08  D006               	goto	l235
  1924  001A0A                     
  1925                           ; BSR set to: 0
  1926                           
  1927                           ; BSR set to: 0
  1928  001A0A  90D8               	bcf	status,0,c
  1929  001A0C  338D               	rrcf	(___altoft@c+3)& (0+255),f,b
  1930  001A0E  338C               	rrcf	(___altoft@c+2)& (0+255),f,b
  1931  001A10  338B               	rrcf	(___altoft@c+1)& (0+255),f,b
  1932  001A12  338A               	rrcf	___altoft@c& (0+255),f,b
  1933  001A14  2A34               	incf	___altoft@exp,f,c
  1934  001A16                     l235:
  1935                           
  1936                           ; BSR set to: 0
  1937                           
  1938                           ; BSR set to: 0
  1939  001A16  0E00               	movlw	0
  1940  001A18  158A               	andwf	___altoft@c& (0+255),w,b
  1941  001A1A  6F8E               	movwf	??___altoft& (0+255),b
  1942  001A1C  0E00               	movlw	0
  1943  001A1E  158B               	andwf	(___altoft@c+1)& (0+255),w,b
  1944  001A20  6F8F               	movwf	(??___altoft+1)& (0+255),b
  1945  001A22  0E00               	movlw	0
  1946  001A24  158C               	andwf	(___altoft@c+2)& (0+255),w,b
  1947  001A26  6F90               	movwf	(??___altoft+2)& (0+255),b
  1948  001A28  0EFF               	movlw	255
  1949  001A2A  158D               	andwf	(___altoft@c+3)& (0+255),w,b
  1950  001A2C  6F91               	movwf	(??___altoft+3)& (0+255),b
  1951  001A2E  518E               	movf	??___altoft& (0+255),w,b
  1952  001A30  118F               	iorwf	(??___altoft+1)& (0+255),w,b
  1953  001A32  1190               	iorwf	(??___altoft+2)& (0+255),w,b
  1954  001A34  1191               	iorwf	(??___altoft+3)& (0+255),w,b
  1955  001A36  A4D8               	btfss	status,2,c
  1956  001A38  D7E8               	goto	l236
  1957                           
  1958                           ; BSR set to: 0
  1959                           
  1960                           ; BSR set to: 0
  1961  001A3A  C08A  F028         	movff	___altoft@c,___ftpack@arg
  1962  001A3E  C08B  F029         	movff	___altoft@c+1,___ftpack@arg+1
  1963  001A42  C08C  F02A         	movff	___altoft@c+2,___ftpack@arg+2
  1964  001A46  C034  F02B         	movff	___altoft@exp,___ftpack@exp
  1965  001A4A  C035  F02C         	movff	___altoft@sign,___ftpack@sign
  1966  001A4E  EC7D  F00B         	call	___ftpack	;wreg free
  1967  001A52  C028  F08A         	movff	?___ftpack,?___altoft
  1968  001A56  C029  F08B         	movff	?___ftpack+1,?___altoft+1
  1969  001A5A  C02A  F08C         	movff	?___ftpack+2,?___altoft+2
  1970  001A5E  0012               	return	
  1971  001A60                     __end_of___altoft:
  1972                           	opt stack 0
  1973                           tblptru	equ	0xFF8
  1974                           tblptrh	equ	0xFF7
  1975                           tblptrl	equ	0xFF6
  1976                           tablat	equ	0xFF5
  1977                           postinc0	equ	0xFEE
  1978                           postdec1	equ	0xFE5
  1979                           fsr1h	equ	0xFE2
  1980                           fsr1l	equ	0xFE1
  1981                           postinc2	equ	0xFDE
  1982                           postdec2	equ	0xFDD
  1983                           fsr2h	equ	0xFDA
  1984                           fsr2l	equ	0xFD9
  1985                           status	equ	0xFD8
  1986                           
  1987 ;; *************** function _eval_poly *****************
  1988 ;; Defined at:
  1989 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;  x               3   27[BANK0 ] float 
  1992 ;;  d               2   30[BANK0 ] PTR const 
  1993 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
  1994 ;;  n               2   32[BANK0 ] int 
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;  res             3   34[BANK0 ] int 
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  3   27[BANK0 ] int 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2006 ;;      Params:         0       7       0       0
  2007 ;;      Locals:         0       3       0       0
  2008 ;;      Temps:          2       0       0       0
  2009 ;;      Totals:         2      10       0       0
  2010 ;;Total ram usage:       12 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    4
  2013 ;; This function calls:
  2014 ;;		___ftadd
  2015 ;;		___ftmul
  2016 ;;		___wmul
  2017 ;; This function is called by:
  2018 ;;		_sin
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           	psect	text7
  2023  0014B2                     __ptext7:
  2024                           	opt stack 0
  2025  0014B2                     _eval_poly:
  2026                           	opt stack 25
  2027                           
  2028                           ;incstack = 0
  2029  0014B2  C080  F028         	movff	eval_poly@n,___wmul@multiplier
  2030  0014B6  C081  F029         	movff	eval_poly@n+1,___wmul@multiplier+1
  2031  0014BA  0E00               	movlw	0
  2032  0014BC  6E2B               	movwf	___wmul@multiplicand+1,c
  2033  0014BE  0E03               	movlw	3
  2034  0014C0  6E2A               	movwf	___wmul@multiplicand,c
  2035  0014C2  ECC7  F00E         	call	___wmul	;wreg free
  2036  0014C6  C07E  F034         	movff	eval_poly@d,??_eval_poly
  2037  0014CA  C07F  F035         	movff	eval_poly@d+1,??_eval_poly+1
  2038  0014CE  5028               	movf	?___wmul,w,c
  2039  0014D0  2634               	addwf	??_eval_poly,f,c
  2040  0014D2  5029               	movf	?___wmul+1,w,c
  2041  0014D4  2235               	addwfc	??_eval_poly+1,f,c
  2042  0014D6  C034  FFF6         	movff	??_eval_poly,tblptrl
  2043  0014DA  C035  FFF7         	movff	??_eval_poly+1,tblptrh
  2044  0014DE                     	if	0	;tblptru may be non-zero
  2045  0014DE                     	endif
  2046  0014DE                     	if	0	;tblptru may be non-zero
  2047  0014DE                     	endif
  2048  0014DE  0009               	tblrd		*+
  2049  0014E0  CFF5 F082          	movff	tablat,eval_poly@res
  2050  0014E4  0009               	tblrd		*+
  2051  0014E6  CFF5 F083          	movff	tablat,eval_poly@res+1
  2052  0014EA  000A               	tblrd		*-
  2053  0014EC  CFF5 F084          	movff	tablat,eval_poly@res+2
  2054  0014F0  D03F               	goto	l759
  2055  0014F2  C082  F063         	movff	eval_poly@res,___ftmul@f2
  2056  0014F6  C083  F064         	movff	eval_poly@res+1,___ftmul@f2+1
  2057  0014FA  C084  F065         	movff	eval_poly@res+2,___ftmul@f2+2
  2058  0014FE  C07B  F060         	movff	eval_poly@x,___ftmul@f1
  2059  001502  C07C  F061         	movff	eval_poly@x+1,___ftmul@f1+1
  2060  001506  C07D  F062         	movff	eval_poly@x+2,___ftmul@f1+2
  2061  00150A  ECF9  F008         	call	___ftmul	;wreg free
  2062  00150E  C060  F06F         	movff	?___ftmul,___ftadd@f1
  2063  001512  C061  F070         	movff	?___ftmul+1,___ftadd@f1+1
  2064  001516  C062  F071         	movff	?___ftmul+2,___ftadd@f1+2
  2065  00151A  0E00               	movlw	0
  2066  00151C  6E2B               	movwf	___wmul@multiplicand+1,c
  2067  00151E  0E03               	movlw	3
  2068  001520  6E2A               	movwf	___wmul@multiplicand,c
  2069  001522  0100               	movlb	0	; () banked
  2070  001524  0780               	decf	eval_poly@n& (0+255),f,b
  2071  001526  A0D8               	btfss	status,0,c
  2072  001528  0781               	decf	(eval_poly@n+1)& (0+255),f,b
  2073  00152A  C080  F028         	movff	eval_poly@n,___wmul@multiplier
  2074  00152E  C081  F029         	movff	eval_poly@n+1,___wmul@multiplier+1
  2075  001532  ECC7  F00E         	call	___wmul	;wreg free
  2076  001536  C07E  F034         	movff	eval_poly@d,??_eval_poly
  2077  00153A  C07F  F035         	movff	eval_poly@d+1,??_eval_poly+1
  2078  00153E  5028               	movf	?___wmul,w,c
  2079  001540  2634               	addwf	??_eval_poly,f,c
  2080  001542  5029               	movf	?___wmul+1,w,c
  2081  001544  2235               	addwfc	??_eval_poly+1,f,c
  2082  001546  C034  FFF6         	movff	??_eval_poly,tblptrl
  2083  00154A  C035  FFF7         	movff	??_eval_poly+1,tblptrh
  2084  00154E                     	if	0	;tblptru may be non-zero
  2085  00154E                     	endif
  2086  00154E                     	if	0	;tblptru may be non-zero
  2087  00154E                     	endif
  2088  00154E  0009               	tblrd		*+
  2089  001550  CFF5 F072          	movff	tablat,___ftadd@f2
  2090  001554  0009               	tblrd		*+
  2091  001556  CFF5 F073          	movff	tablat,___ftadd@f2+1
  2092  00155A  000A               	tblrd		*-
  2093  00155C  CFF5 F074          	movff	tablat,___ftadd@f2+2
  2094  001560  EC00  F007         	call	___ftadd	;wreg free
  2095  001564  C06F  F082         	movff	?___ftadd,eval_poly@res
  2096  001568  C070  F083         	movff	?___ftadd+1,eval_poly@res+1
  2097  00156C  C071  F084         	movff	?___ftadd+2,eval_poly@res+2
  2098  001570                     l759:
  2099  001570  0100               	movlb	0	; () banked
  2100  001572  5180               	movf	eval_poly@n& (0+255),w,b
  2101  001574  1181               	iorwf	(eval_poly@n+1)& (0+255),w,b
  2102  001576  A4D8               	btfss	status,2,c
  2103  001578  D7BC               	goto	l760
  2104                           
  2105                           ; BSR set to: 0
  2106  00157A  C082  F07B         	movff	eval_poly@res,?_eval_poly
  2107  00157E  C083  F07C         	movff	eval_poly@res+1,?_eval_poly+1
  2108  001582  C084  F07D         	movff	eval_poly@res+2,?_eval_poly+2
  2109                           
  2110                           ; BSR set to: 0
  2111  001586  0012               	return		;funcret
  2112  001588                     __end_of_eval_poly:
  2113                           	opt stack 0
  2114                           tblptru	equ	0xFF8
  2115                           tblptrh	equ	0xFF7
  2116                           tblptrl	equ	0xFF6
  2117                           tablat	equ	0xFF5
  2118                           postinc0	equ	0xFEE
  2119                           postdec1	equ	0xFE5
  2120                           fsr1h	equ	0xFE2
  2121                           fsr1l	equ	0xFE1
  2122                           postinc2	equ	0xFDE
  2123                           postdec2	equ	0xFDD
  2124                           fsr2h	equ	0xFDA
  2125                           fsr2l	equ	0xFD9
  2126                           status	equ	0xFD8
  2127                           
  2128 ;; *************** function ___ftsub *****************
  2129 ;; Defined at:
  2130 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  2131 ;; Parameters:    Size  Location     Type
  2132 ;;  f1              3   58[BANK0 ] float 
  2133 ;;  f2              3   61[BANK0 ] float 
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  3   58[BANK0 ] float 
  2138 ;; Registers used:
  2139 ;;		wreg, status,2, status,0, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2145 ;;      Params:         0       6       0       0
  2146 ;;      Locals:         0       0       0       0
  2147 ;;      Temps:          0       0       0       0
  2148 ;;      Totals:         0       6       0       0
  2149 ;;Total ram usage:        6 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    4
  2152 ;; This function calls:
  2153 ;;		___ftadd
  2154 ;; This function is called by:
  2155 ;;		_sin
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text8
  2160  001C3E                     __ptext8:
  2161                           	opt stack 0
  2162  001C3E                     ___ftsub:
  2163                           	opt stack 25
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;incstack = 0
  2167  001C3E  0100               	movlb	0	; () banked
  2168  001C40  519D               	movf	___ftsub@f2& (0+255),w,b
  2169  001C42  119E               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  2170  001C44  119F               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  2171  001C46  B4D8               	btfsc	status,2,c
  2172  001C48  D006               	goto	l467
  2173                           
  2174                           ; BSR set to: 0
  2175  001C4A  0E00               	movlw	0
  2176  001C4C  1B9D               	xorwf	___ftsub@f2& (0+255),f,b
  2177  001C4E  0E00               	movlw	0
  2178  001C50  1B9E               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  2179  001C52  0E80               	movlw	128
  2180  001C54  1B9F               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  2181  001C56                     l467:
  2182                           
  2183                           ; BSR set to: 0
  2184                           
  2185                           ; BSR set to: 0
  2186  001C56  C09A  F06F         	movff	___ftsub@f1,___ftadd@f1
  2187  001C5A  C09B  F070         	movff	___ftsub@f1+1,___ftadd@f1+1
  2188  001C5E  C09C  F071         	movff	___ftsub@f1+2,___ftadd@f1+2
  2189  001C62  C09D  F072         	movff	___ftsub@f2,___ftadd@f2
  2190  001C66  C09E  F073         	movff	___ftsub@f2+1,___ftadd@f2+1
  2191  001C6A  C09F  F074         	movff	___ftsub@f2+2,___ftadd@f2+2
  2192  001C6E  EC00  F007         	call	___ftadd	;wreg free
  2193  001C72  C06F  F09A         	movff	?___ftadd,?___ftsub
  2194  001C76  C070  F09B         	movff	?___ftadd+1,?___ftsub+1
  2195  001C7A  C071  F09C         	movff	?___ftadd+2,?___ftsub+2
  2196  001C7E  0012               	return	
  2197  001C80                     __end_of___ftsub:
  2198                           	opt stack 0
  2199                           tblptru	equ	0xFF8
  2200                           tblptrh	equ	0xFF7
  2201                           tblptrl	equ	0xFF6
  2202                           tablat	equ	0xFF5
  2203                           postinc0	equ	0xFEE
  2204                           postdec1	equ	0xFE5
  2205                           fsr1h	equ	0xFE2
  2206                           fsr1l	equ	0xFE1
  2207                           postinc2	equ	0xFDE
  2208                           postdec2	equ	0xFDD
  2209                           fsr2h	equ	0xFDA
  2210                           fsr2l	equ	0xFD9
  2211                           status	equ	0xFD8
  2212                           
  2213 ;; *************** function ___ftneg *****************
  2214 ;; Defined at:
  2215 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  f1              3   39[COMRAM] float 
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;		None
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  3   39[COMRAM] float 
  2222 ;; Registers used:
  2223 ;;		wreg, status,2, status,0
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2229 ;;      Params:         3       0       0       0
  2230 ;;      Locals:         0       0       0       0
  2231 ;;      Temps:          0       0       0       0
  2232 ;;      Totals:         3       0       0       0
  2233 ;;Total ram usage:        3 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; Hardware stack levels required when called:    2
  2236 ;; This function calls:
  2237 ;;		Nothing
  2238 ;; This function is called by:
  2239 ;;		_sin
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text9
  2244  001DB4                     __ptext9:
  2245                           	opt stack 0
  2246  001DB4                     ___ftneg:
  2247                           	opt stack 27
  2248                           
  2249                           ;incstack = 0
  2250  001DB4  5028               	movf	___ftneg@f1,w,c
  2251  001DB6  1029               	iorwf	___ftneg@f1+1,w,c
  2252  001DB8  102A               	iorwf	___ftneg@f1+2,w,c
  2253  001DBA  B4D8               	btfsc	status,2,c
  2254  001DBC  D006               	goto	l461
  2255  001DBE  0E00               	movlw	0
  2256  001DC0  1A28               	xorwf	___ftneg@f1,f,c
  2257  001DC2  0E00               	movlw	0
  2258  001DC4  1A29               	xorwf	___ftneg@f1+1,f,c
  2259  001DC6  0E80               	movlw	128
  2260  001DC8  1A2A               	xorwf	___ftneg@f1+2,f,c
  2261  001DCA                     l461:
  2262  001DCA  C028  F028         	movff	___ftneg@f1,?___ftneg
  2263  001DCE  C029  F029         	movff	___ftneg@f1+1,?___ftneg+1
  2264  001DD2  C02A  F02A         	movff	___ftneg@f1+2,?___ftneg+2
  2265  001DD6  0012               	return		;funcret
  2266  001DD8                     __end_of___ftneg:
  2267                           	opt stack 0
  2268                           tblptru	equ	0xFF8
  2269                           tblptrh	equ	0xFF7
  2270                           tblptrl	equ	0xFF6
  2271                           tablat	equ	0xFF5
  2272                           postinc0	equ	0xFEE
  2273                           postdec1	equ	0xFE5
  2274                           fsr1h	equ	0xFE2
  2275                           fsr1l	equ	0xFE1
  2276                           postinc2	equ	0xFDE
  2277                           postdec2	equ	0xFDD
  2278                           fsr2h	equ	0xFDA
  2279                           fsr2l	equ	0xFD9
  2280                           status	equ	0xFD8
  2281                           
  2282 ;; *************** function ___ftdiv *****************
  2283 ;; Defined at:
  2284 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;  f1              3   37[BANK0 ] float 
  2287 ;;  f2              3   40[BANK0 ] float 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  f3              3   47[BANK0 ] float 
  2290 ;;  sign            1   51[BANK0 ] unsigned char 
  2291 ;;  exp             1   50[BANK0 ] unsigned char 
  2292 ;;  cntr            1   46[BANK0 ] unsigned char 
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  3   37[BANK0 ] float 
  2295 ;; Registers used:
  2296 ;;		wreg, status,2, status,0, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2302 ;;      Params:         0       6       0       0
  2303 ;;      Locals:         0       6       0       0
  2304 ;;      Temps:          0       3       0       0
  2305 ;;      Totals:         0      15       0       0
  2306 ;;Total ram usage:       15 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    3
  2309 ;; This function calls:
  2310 ;;		___ftpack
  2311 ;; This function is called by:
  2312 ;;		_sin
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text10
  2317  0012E8                     __ptext10:
  2318                           	opt stack 0
  2319  0012E8                     ___ftdiv:
  2320                           	opt stack 26
  2321                           
  2322                           ;incstack = 0
  2323  0012E8  C087  F08B         	movff	___ftdiv@f1+2,??___ftdiv
  2324  0012EC  0100               	movlb	0	; () banked
  2325  0012EE  6B8C               	clrf	(??___ftdiv+1)& (0+255),b
  2326  0012F0  6B8D               	clrf	(??___ftdiv+2)& (0+255),b
  2327  0012F2  3586               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  2328  0012F4  378B               	rlcf	??___ftdiv& (0+255),f,b
  2329  0012F6  E301               	bnc	u2361
  2330  0012F8  818C               	bsf	(??___ftdiv+1)& (0+255),0,b
  2331  0012FA                     u2361:
  2332  0012FA  518B               	movf	??___ftdiv& (0+255),w,b
  2333  0012FC  6F92               	movwf	___ftdiv@exp& (0+255),b
  2334  0012FE  5192               	movf	___ftdiv@exp& (0+255),w,b
  2335  001300  A4D8               	btfss	status,2,c
  2336  001302  D007               	goto	l435
  2337                           
  2338                           ; BSR set to: 0
  2339  001304  0E00               	movlw	0
  2340  001306  6F85               	movwf	?___ftdiv& (0+255),b
  2341  001308  0E00               	movlw	0
  2342  00130A  6F86               	movwf	(?___ftdiv+1)& (0+255),b
  2343  00130C  0E00               	movlw	0
  2344  00130E  6F87               	movwf	(?___ftdiv+2)& (0+255),b
  2345                           
  2346                           ; BSR set to: 0
  2347  001310  0012               	return	
  2348  001312                     l435:
  2349                           
  2350                           ; BSR set to: 0
  2351                           
  2352                           ; BSR set to: 0
  2353  001312  C08A  F08B         	movff	___ftdiv@f2+2,??___ftdiv
  2354  001316  6B8C               	clrf	(??___ftdiv+1)& (0+255),b
  2355  001318  6B8D               	clrf	(??___ftdiv+2)& (0+255),b
  2356  00131A  3589               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  2357  00131C  378B               	rlcf	??___ftdiv& (0+255),f,b
  2358  00131E  E301               	bnc	u2381
  2359  001320  818C               	bsf	(??___ftdiv+1)& (0+255),0,b
  2360  001322                     u2381:
  2361  001322  518B               	movf	??___ftdiv& (0+255),w,b
  2362  001324  6F93               	movwf	___ftdiv@sign& (0+255),b
  2363  001326  5193               	movf	___ftdiv@sign& (0+255),w,b
  2364  001328  A4D8               	btfss	status,2,c
  2365  00132A  D007               	goto	l437
  2366                           
  2367                           ; BSR set to: 0
  2368  00132C  0E00               	movlw	0
  2369  00132E  6F85               	movwf	?___ftdiv& (0+255),b
  2370  001330  0E00               	movlw	0
  2371  001332  6F86               	movwf	(?___ftdiv+1)& (0+255),b
  2372  001334  0E00               	movlw	0
  2373  001336  6F87               	movwf	(?___ftdiv+2)& (0+255),b
  2374                           
  2375                           ; BSR set to: 0
  2376  001338  0012               	return	
  2377  00133A                     l437:
  2378                           
  2379                           ; BSR set to: 0
  2380                           
  2381                           ; BSR set to: 0
  2382  00133A  0E00               	movlw	0
  2383  00133C  6F8F               	movwf	___ftdiv@f3& (0+255),b
  2384  00133E  0E00               	movlw	0
  2385  001340  6F90               	movwf	(___ftdiv@f3+1)& (0+255),b
  2386  001342  0E00               	movlw	0
  2387  001344  6F91               	movwf	(___ftdiv@f3+2)& (0+255),b
  2388                           
  2389                           ; BSR set to: 0
  2390  001346  5193               	movf	___ftdiv@sign& (0+255),w,b
  2391  001348  0F89               	addlw	137
  2392  00134A  5F92               	subwf	___ftdiv@exp& (0+255),f,b
  2393                           
  2394                           ; BSR set to: 0
  2395  00134C  C087  F093         	movff	___ftdiv@f1+2,___ftdiv@sign
  2396                           
  2397                           ; BSR set to: 0
  2398  001350  518A               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2399  001352  1B93               	xorwf	___ftdiv@sign& (0+255),f,b
  2400                           
  2401                           ; BSR set to: 0
  2402  001354  0E80               	movlw	128
  2403  001356  1793               	andwf	___ftdiv@sign& (0+255),f,b
  2404                           
  2405                           ; BSR set to: 0
  2406  001358  8F86               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  2407                           
  2408                           ; BSR set to: 0
  2409  00135A  0EFF               	movlw	255
  2410  00135C  1785               	andwf	___ftdiv@f1& (0+255),f,b
  2411  00135E  0EFF               	movlw	255
  2412  001360  1786               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  2413  001362  0E00               	movlw	0
  2414  001364  1787               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  2415                           
  2416                           ; BSR set to: 0
  2417  001366  8F89               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  2418                           
  2419                           ; BSR set to: 0
  2420  001368  0EFF               	movlw	255
  2421  00136A  1788               	andwf	___ftdiv@f2& (0+255),f,b
  2422  00136C  0EFF               	movlw	255
  2423  00136E  1789               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  2424  001370  0E00               	movlw	0
  2425  001372  178A               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  2426                           
  2427                           ; BSR set to: 0
  2428  001374  0E18               	movlw	24
  2429  001376  6F8E               	movwf	___ftdiv@cntr& (0+255),b
  2430  001378                     
  2431                           ; BSR set to: 0
  2432                           
  2433                           ; BSR set to: 0
  2434  001378  90D8               	bcf	status,0,c
  2435  00137A  378F               	rlcf	___ftdiv@f3& (0+255),f,b
  2436  00137C  3790               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  2437  00137E  3791               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  2438                           
  2439                           ; BSR set to: 0
  2440  001380  5188               	movf	___ftdiv@f2& (0+255),w,b
  2441  001382  5D85               	subwf	___ftdiv@f1& (0+255),w,b
  2442  001384  5189               	movf	(___ftdiv@f2+1)& (0+255),w,b
  2443  001386  5986               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  2444  001388  518A               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2445  00138A  5987               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  2446  00138C  A0D8               	btfss	status,0,c
  2447  00138E  D007               	goto	l439
  2448                           
  2449                           ; BSR set to: 0
  2450  001390  5188               	movf	___ftdiv@f2& (0+255),w,b
  2451  001392  5F85               	subwf	___ftdiv@f1& (0+255),f,b
  2452  001394  5189               	movf	(___ftdiv@f2+1)& (0+255),w,b
  2453  001396  5B86               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  2454  001398  518A               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2455  00139A  5B87               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  2456                           
  2457                           ; BSR set to: 0
  2458  00139C  818F               	bsf	___ftdiv@f3& (0+255),0,b
  2459  00139E                     l439:
  2460                           
  2461                           ; BSR set to: 0
  2462  00139E  90D8               	bcf	status,0,c
  2463  0013A0  3785               	rlcf	___ftdiv@f1& (0+255),f,b
  2464  0013A2  3786               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  2465  0013A4  3787               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  2466                           
  2467                           ; BSR set to: 0
  2468  0013A6  2F8E               	decfsz	___ftdiv@cntr& (0+255),f,b
  2469  0013A8  D7E7               	goto	l438
  2470                           
  2471                           ; BSR set to: 0
  2472                           
  2473                           ; BSR set to: 0
  2474  0013AA  C08F  F028         	movff	___ftdiv@f3,___ftpack@arg
  2475  0013AE  C090  F029         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2476  0013B2  C091  F02A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2477  0013B6  C092  F02B         	movff	___ftdiv@exp,___ftpack@exp
  2478  0013BA  C093  F02C         	movff	___ftdiv@sign,___ftpack@sign
  2479  0013BE  EC7D  F00B         	call	___ftpack	;wreg free
  2480  0013C2  C028  F085         	movff	?___ftpack,?___ftdiv
  2481  0013C6  C029  F086         	movff	?___ftpack+1,?___ftdiv+1
  2482  0013CA  C02A  F087         	movff	?___ftpack+2,?___ftdiv+2
  2483  0013CE  0012               	return	
  2484  0013D0                     __end_of___ftdiv:
  2485                           	opt stack 0
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           postinc0	equ	0xFEE
  2491                           postdec1	equ	0xFE5
  2492                           fsr1h	equ	0xFE2
  2493                           fsr1l	equ	0xFE1
  2494                           postinc2	equ	0xFDE
  2495                           postdec2	equ	0xFDD
  2496                           fsr2h	equ	0xFDA
  2497                           fsr2l	equ	0xFD9
  2498                           status	equ	0xFD8
  2499                           
  2500 ;; *************** function _UART_Init *****************
  2501 ;; Defined at:
  2502 ;;		line 192 in file "main.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;		None
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;		None
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  1    wreg      unsigned char 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2516 ;;      Params:         0       0       0       0
  2517 ;;      Locals:         0       0       0       0
  2518 ;;      Temps:          2       0       0       0
  2519 ;;      Totals:         2       0       0       0
  2520 ;;Total ram usage:        2 bytes
  2521 ;; Hardware stack levels used:    1
  2522 ;; Hardware stack levels required when called:    2
  2523 ;; This function calls:
  2524 ;;		Nothing
  2525 ;; This function is called by:
  2526 ;;		_main
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text11
  2531  001D34                     __ptext11:
  2532                           	opt stack 0
  2533  001D34                     _UART_Init:
  2534                           	opt stack 28
  2535                           
  2536                           ;main.c: 193: BAUDCONbits.BRG16 = 0b1;
  2537                           
  2538                           ;incstack = 0
  2539  001D34  86B8               	bsf	4024,3,c	;volatile
  2540                           
  2541                           ;main.c: 194: TXSTAbits.BRGH = 0b1;
  2542  001D36  84AC               	bsf	4012,2,c	;volatile
  2543                           
  2544                           ;main.c: 195: SPBRG = 51;
  2545  001D38  0E33               	movlw	51
  2546  001D3A  6EAF               	movwf	4015,c	;volatile
  2547                           
  2548                           ;main.c: 196: SPBRGH = 0;
  2549  001D3C  0E00               	movlw	0
  2550  001D3E  6EB0               	movwf	4016,c	;volatile
  2551                           
  2552                           ;main.c: 197: TXSTAbits.SYNC = 0b0;
  2553  001D40  98AC               	bcf	4012,4,c	;volatile
  2554                           
  2555                           ;main.c: 198: RCSTAbits.SPEN = 0b1;
  2556  001D42  8EAB               	bsf	4011,7,c	;volatile
  2557                           
  2558                           ;main.c: 199: TXSTAbits.TXEN = 0b1;
  2559  001D44  8AAC               	bsf	4012,5,c	;volatile
  2560                           
  2561                           ;main.c: 201: TRISCbits.TRISC6 = 0b0;
  2562  001D46  9C94               	bcf	3988,6,c	;volatile
  2563                           
  2564                           ;main.c: 202: TRISCbits.TRISC7 = 0b1;
  2565  001D48  8E94               	bsf	3988,7,c	;volatile
  2566                           
  2567                           ;main.c: 204: _delay((unsigned long)((1000)*(2000000/4000.0)));
  2568  001D4A  0E03               	movlw	3
  2569  001D4C  6E29               	movwf	(??_UART_Init+1)& (0+255),c
  2570  001D4E  0E8A               	movlw	138
  2571  001D50  6E28               	movwf	??_UART_Init& (0+255),c
  2572  001D52  0E56               	movlw	86
  2573  001D54                     u2577:
  2574  001D54  2EE8               	decfsz	wreg,f,c
  2575  001D56  D7FE               	bra	u2577
  2576  001D58  2E28               	decfsz	??_UART_Init& (0+255),f,c
  2577  001D5A  D7FC               	bra	u2577
  2578  001D5C  2E29               	decfsz	(??_UART_Init+1)& (0+255),f,c
  2579  001D5E  D7FA               	bra	u2577
  2580  001D60  0012               	return	
  2581  001D62                     __end_of_UART_Init:
  2582                           	opt stack 0
  2583                           tblptru	equ	0xFF8
  2584                           tblptrh	equ	0xFF7
  2585                           tblptrl	equ	0xFF6
  2586                           tablat	equ	0xFF5
  2587                           postinc0	equ	0xFEE
  2588                           wreg	equ	0xFE8
  2589                           postdec1	equ	0xFE5
  2590                           fsr1h	equ	0xFE2
  2591                           fsr1l	equ	0xFE1
  2592                           postinc2	equ	0xFDE
  2593                           postdec2	equ	0xFDD
  2594                           fsr2h	equ	0xFDA
  2595                           fsr2l	equ	0xFD9
  2596                           status	equ	0xFD8
  2597                           
  2598 ;; *************** function _RotatePositions *****************
  2599 ;; Defined at:
  2600 ;;		line 292 in file "main.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;		None
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  i               2   47[COMRAM] unsigned int 
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2614 ;;      Params:         0       0       0       0
  2615 ;;      Locals:         2       0       0       0
  2616 ;;      Temps:          2       0       0       0
  2617 ;;      Totals:         4       0       0       0
  2618 ;;Total ram usage:        4 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; Hardware stack levels required when called:    3
  2621 ;; This function calls:
  2622 ;;		___wmul
  2623 ;; This function is called by:
  2624 ;;		_main
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text12
  2629  0017A8                     __ptext12:
  2630                           	opt stack 0
  2631  0017A8                     _RotatePositions:
  2632                           	opt stack 27
  2633                           
  2634                           ;main.c: 293: for (unsigned int i = 0; i < 6; i++) {
  2635                           
  2636                           ;incstack = 0
  2637  0017A8  0E00               	movlw	0
  2638  0017AA  6E31               	movwf	RotatePositions@i+1,c
  2639  0017AC  0E00               	movlw	0
  2640  0017AE  6E30               	movwf	RotatePositions@i,c
  2641  0017B0                     l2295:
  2642  0017B0  5031               	movf	RotatePositions@i+1,w,c
  2643  0017B2  E146               	bnz	l112
  2644  0017B4  0E06               	movlw	6
  2645  0017B6  5C30               	subwf	RotatePositions@i,w,c
  2646  0017B8  B0D8               	btfsc	status,0,c
  2647  0017BA  0012               	return	
  2648                           
  2649                           ;main.c: 294: if (servosets[i].currentServoPosition < (4 - 1)) {
  2650  0017BC  C030  F028         	movff	RotatePositions@i,___wmul@multiplier
  2651  0017C0  C031  F029         	movff	RotatePositions@i+1,___wmul@multiplier+1
  2652  0017C4  0E00               	movlw	0
  2653  0017C6  6E2B               	movwf	___wmul@multiplicand+1,c
  2654  0017C8  0E15               	movlw	21
  2655  0017CA  6E2A               	movwf	___wmul@multiplicand,c
  2656  0017CC  ECC7  F00E         	call	___wmul	;wreg free
  2657  0017D0  0E00               	movlw	low _servosets
  2658  0017D2  2428               	addwf	?___wmul,w,c
  2659  0017D4  6ED9               	movwf	fsr2l,c
  2660  0017D6  0E01               	movlw	high _servosets
  2661  0017D8  2029               	addwfc	?___wmul+1,w,c
  2662  0017DA  6EDA               	movwf	fsr2h,c
  2663  0017DC  0E01               	movlw	1
  2664  0017DE  50DB               	movf	plusw2,w,c
  2665  0017E0  E118               	bnz	l2303
  2666  0017E2  0E03               	movlw	3
  2667  0017E4  5CDE               	subwf	postinc2,w,c
  2668  0017E6  B0D8               	btfsc	status,0,c
  2669  0017E8  D014               	goto	l110
  2670                           
  2671                           ;main.c: 295: servosets[i].currentServoPosition += 1;
  2672  0017EA  C030  F028         	movff	RotatePositions@i,___wmul@multiplier
  2673  0017EE  C031  F029         	movff	RotatePositions@i+1,___wmul@multiplier+1
  2674  0017F2  0E00               	movlw	0
  2675  0017F4  6E2B               	movwf	___wmul@multiplicand+1,c
  2676  0017F6  0E15               	movlw	21
  2677  0017F8  6E2A               	movwf	___wmul@multiplicand,c
  2678  0017FA  ECC7  F00E         	call	___wmul	;wreg free
  2679  0017FE  0E00               	movlw	low _servosets
  2680  001800  2428               	addwf	?___wmul,w,c
  2681  001802  6ED9               	movwf	fsr2l,c
  2682  001804  0E01               	movlw	high _servosets
  2683  001806  2029               	addwfc	?___wmul+1,w,c
  2684  001808  6EDA               	movwf	fsr2h,c
  2685  00180A  2ADE               	incf	postinc2,f,c
  2686  00180C  0E00               	movlw	0
  2687  00180E  22DD               	addwfc	postdec2,f,c
  2688                           
  2689                           ;main.c: 296: } else {
  2690  001810  D014               	goto	l111
  2691  001812                     l110:
  2692  001812                     l2303:
  2693                           
  2694                           ;main.c: 297: servosets[i].currentServoPosition = 0;
  2695  001812  C030  F028         	movff	RotatePositions@i,___wmul@multiplier
  2696  001816  C031  F029         	movff	RotatePositions@i+1,___wmul@multiplier+1
  2697  00181A  0E00               	movlw	0
  2698  00181C  6E2B               	movwf	___wmul@multiplicand+1,c
  2699  00181E  0E15               	movlw	21
  2700  001820  6E2A               	movwf	___wmul@multiplicand,c
  2701  001822  ECC7  F00E         	call	___wmul	;wreg free
  2702  001826  0E00               	movlw	low _servosets
  2703  001828  2428               	addwf	?___wmul,w,c
  2704  00182A  6ED9               	movwf	fsr2l,c
  2705  00182C  0E01               	movlw	high _servosets
  2706  00182E  2029               	addwfc	?___wmul+1,w,c
  2707  001830  6EDA               	movwf	fsr2h,c
  2708  001832  0E00               	movlw	0
  2709  001834  6EDE               	movwf	postinc2,c
  2710  001836  0E00               	movlw	0
  2711  001838  6EDD               	movwf	postdec2,c
  2712  00183A                     l111:
  2713  00183A  4A30               	infsnz	RotatePositions@i,f,c
  2714  00183C  2A31               	incf	RotatePositions@i+1,f,c
  2715  00183E  D7B8               	goto	l2295
  2716  001840                     l112:
  2717  001840  0012               	return		;funcret
  2718  001842                     __end_of_RotatePositions:
  2719                           	opt stack 0
  2720                           tblptru	equ	0xFF8
  2721                           tblptrh	equ	0xFF7
  2722                           tblptrl	equ	0xFF6
  2723                           tablat	equ	0xFF5
  2724                           postinc0	equ	0xFEE
  2725                           wreg	equ	0xFE8
  2726                           postdec1	equ	0xFE5
  2727                           fsr1h	equ	0xFE2
  2728                           fsr1l	equ	0xFE1
  2729                           postinc2	equ	0xFDE
  2730                           postdec2	equ	0xFDD
  2731                           plusw2	equ	0xFDB
  2732                           fsr2h	equ	0xFDA
  2733                           fsr2l	equ	0xFD9
  2734                           status	equ	0xFD8
  2735                           
  2736 ;; *************** function _InitServos *****************
  2737 ;; Defined at:
  2738 ;;		line 261 in file "main.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;		None
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  tmp             5   13[BANK0 ] unsigned char [5]
  2743 ;;  i               2   18[BANK0 ] unsigned int 
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  1    wreg      void 
  2746 ;; Registers used:
  2747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2753 ;;      Params:         0       0       0       0
  2754 ;;      Locals:         0       7       0       0
  2755 ;;      Temps:          0       0       0       0
  2756 ;;      Totals:         0       7       0       0
  2757 ;;Total ram usage:        7 bytes
  2758 ;; Hardware stack levels used:    1
  2759 ;; Hardware stack levels required when called:    4
  2760 ;; This function calls:
  2761 ;;		_EmptyMovementString
  2762 ;;		_UART_Write_String
  2763 ;;		___wmul
  2764 ;;		_sprintf
  2765 ;;		_strcat
  2766 ;; This function is called by:
  2767 ;;		_main
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text13
  2772  0008DC                     __ptext13:
  2773                           	opt stack 0
  2774  0008DC                     _InitServos:
  2775                           	opt stack 26
  2776                           
  2777                           ;main.c: 262: char tmp[5];
  2778                           ;main.c: 263: unsigned int i = 0;
  2779                           
  2780                           ;incstack = 0
  2781  0008DC  0E00               	movlw	0
  2782  0008DE  0100               	movlb	0	; () banked
  2783  0008E0  6F73               	movwf	(InitServos@i+1)& (0+255),b
  2784  0008E2  0E00               	movlw	0
  2785  0008E4  6F72               	movwf	InitServos@i& (0+255),b
  2786                           
  2787                           ;main.c: 264: for(i = 0; i < 6; i++){
  2788  0008E6  0E00               	movlw	0
  2789  0008E8  6F73               	movwf	(InitServos@i+1)& (0+255),b
  2790  0008EA  0E00               	movlw	0
  2791  0008EC  6F72               	movwf	InitServos@i& (0+255),b
  2792                           
  2793                           ; BSR set to: 0
  2794  0008EE  5173               	movf	(InitServos@i+1)& (0+255),w,b
  2795  0008F0  E105               	bnz	u1920
  2796  0008F2  0E06               	movlw	6
  2797  0008F4  5D72               	subwf	InitServos@i& (0+255),w,b
  2798  0008F6  B0D8               	btfsc	status,0,c
  2799  0008F8  0012               	return	
  2800  0008FA  D001               	goto	l103
  2801  0008FC                     u1920:
  2802                           
  2803                           ; BSR set to: 0
  2804  0008FC  0012               	return	
  2805  0008FE                     l103:
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;main.c: 265: EmptyMovementString();
  2809                           
  2810                           ; BSR set to: 0
  2811  0008FE  ECEC  F00E         	call	_EmptyMovementString	;wreg free
  2812                           
  2813                           ;main.c: 266: strcat(movementString, "#");
  2814  000902  0E00               	movlw	low _movementString
  2815  000904  6E2E               	movwf	strcat@to,c
  2816  000906  0E02               	movlw	high _movementString
  2817  000908  6E2F               	movwf	strcat@to+1,c
  2818  00090A  0E63               	movlw	low STR_1
  2819  00090C  6E30               	movwf	strcat@from,c
  2820  00090E  0E03               	movlw	high STR_1
  2821  000910  6E31               	movwf	strcat@from+1,c
  2822  000912  EC9F  F00D         	call	_strcat	;wreg free
  2823                           
  2824                           ;main.c: 267: strcat(movementString, servosets[i].horizontalServo);
  2825  000916  0E00               	movlw	low _movementString
  2826  000918  6E2E               	movwf	strcat@to,c
  2827  00091A  0E02               	movlw	high _movementString
  2828  00091C  6E2F               	movwf	strcat@to+1,c
  2829  00091E  C072  F028         	movff	InitServos@i,___wmul@multiplier
  2830  000922  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  2831  000926  0E00               	movlw	0
  2832  000928  6E2B               	movwf	___wmul@multiplicand+1,c
  2833  00092A  0E15               	movlw	21
  2834  00092C  6E2A               	movwf	___wmul@multiplicand,c
  2835  00092E  ECC7  F00E         	call	___wmul	;wreg free
  2836  000932  0E02               	movlw	2
  2837  000934  2628               	addwf	?___wmul,f,c
  2838  000936  0E00               	movlw	0
  2839  000938  2229               	addwfc	?___wmul+1,f,c
  2840  00093A  0E00               	movlw	low _servosets
  2841  00093C  2428               	addwf	?___wmul,w,c
  2842  00093E  6E30               	movwf	strcat@from,c
  2843  000940  0E01               	movlw	high _servosets
  2844  000942  2029               	addwfc	?___wmul+1,w,c
  2845  000944  6E31               	movwf	strcat@from+1,c
  2846  000946  EC9F  F00D         	call	_strcat	;wreg free
  2847                           
  2848                           ;main.c: 268: strcat(movementString, "P");
  2849  00094A  0E00               	movlw	low _movementString
  2850  00094C  6E2E               	movwf	strcat@to,c
  2851  00094E  0E02               	movlw	high _movementString
  2852  000950  6E2F               	movwf	strcat@to+1,c
  2853  000952  0E65               	movlw	low STR_2
  2854  000954  6E30               	movwf	strcat@from,c
  2855  000956  0E03               	movlw	high STR_2
  2856  000958  6E31               	movwf	strcat@from+1,c
  2857  00095A  EC9F  F00D         	call	_strcat	;wreg free
  2858                           
  2859                           ;main.c: 269: sprintf(tmp, "%d", servosets[i].horizontalMediumPosition);
  2860  00095E  0E6D               	movlw	low InitServos@tmp
  2861  000960  0100               	movlb	0	; () banked
  2862  000962  6F60               	movwf	sprintf@sp& (0+255),b
  2863  000964  0E00               	movlw	high InitServos@tmp
  2864  000966  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  2865  000968  0E60               	movlw	low STR_3
  2866  00096A  6F62               	movwf	sprintf@f& (0+255),b
  2867  00096C  0E03               	movlw	high STR_3
  2868  00096E  6F63               	movwf	(sprintf@f+1)& (0+255),b
  2869  000970  C072  F028         	movff	InitServos@i,___wmul@multiplier
  2870  000974  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  2871  000978  0E00               	movlw	0
  2872  00097A  6E2B               	movwf	___wmul@multiplicand+1,c
  2873  00097C  0E15               	movlw	21
  2874  00097E  6E2A               	movwf	___wmul@multiplicand,c
  2875  000980  ECC7  F00E         	call	___wmul	;wreg free
  2876  000984  0E0B               	movlw	11
  2877  000986  2628               	addwf	?___wmul,f,c
  2878  000988  0E00               	movlw	0
  2879  00098A  2229               	addwfc	?___wmul+1,f,c
  2880  00098C  0E00               	movlw	low _servosets
  2881  00098E  2428               	addwf	?___wmul,w,c
  2882  000990  6ED9               	movwf	fsr2l,c
  2883  000992  0E01               	movlw	high _servosets
  2884  000994  2029               	addwfc	?___wmul+1,w,c
  2885  000996  6EDA               	movwf	fsr2h,c
  2886  000998  CFDE F064          	movff	postinc2,?_sprintf+4
  2887  00099C  CFDD F065          	movff	postdec2,?_sprintf+5
  2888  0009A0  ECD7  F007         	call	_sprintf	;wreg free
  2889                           
  2890                           ;main.c: 270: strcat(movementString, tmp);
  2891  0009A4  0E00               	movlw	low _movementString
  2892  0009A6  6E2E               	movwf	strcat@to,c
  2893  0009A8  0E02               	movlw	high _movementString
  2894  0009AA  6E2F               	movwf	strcat@to+1,c
  2895  0009AC  0E6D               	movlw	low InitServos@tmp
  2896  0009AE  6E30               	movwf	strcat@from,c
  2897  0009B0  0E00               	movlw	high InitServos@tmp
  2898  0009B2  6E31               	movwf	strcat@from+1,c
  2899  0009B4  EC9F  F00D         	call	_strcat	;wreg free
  2900                           
  2901                           ;main.c: 271: strcat(movementString, "\r");
  2902  0009B8  0E00               	movlw	low _movementString
  2903  0009BA  6E2E               	movwf	strcat@to,c
  2904  0009BC  0E02               	movlw	high _movementString
  2905  0009BE  6E2F               	movwf	strcat@to+1,c
  2906  0009C0  0E5E               	movlw	low (STR_10+4)
  2907  0009C2  6E30               	movwf	strcat@from,c
  2908  0009C4  0E03               	movlw	high (STR_10+4)
  2909  0009C6  6E31               	movwf	strcat@from+1,c
  2910  0009C8  EC9F  F00D         	call	_strcat	;wreg free
  2911                           
  2912                           ;main.c: 272: UART_Write_String(movementString);
  2913  0009CC  0E00               	movlw	low _movementString
  2914  0009CE  6E2E               	movwf	UART_Write_String@str,c
  2915  0009D0  0E02               	movlw	high _movementString
  2916  0009D2  6E2F               	movwf	UART_Write_String@str+1,c
  2917  0009D4  ECCB  F00D         	call	_UART_Write_String	;wreg free
  2918                           
  2919                           ;main.c: 273: EmptyMovementString();
  2920  0009D8  ECEC  F00E         	call	_EmptyMovementString	;wreg free
  2921                           
  2922                           ;main.c: 274: strcat(movementString, "#");
  2923  0009DC  0E00               	movlw	low _movementString
  2924  0009DE  6E2E               	movwf	strcat@to,c
  2925  0009E0  0E02               	movlw	high _movementString
  2926  0009E2  6E2F               	movwf	strcat@to+1,c
  2927  0009E4  0E63               	movlw	low STR_1
  2928  0009E6  6E30               	movwf	strcat@from,c
  2929  0009E8  0E03               	movlw	high STR_1
  2930  0009EA  6E31               	movwf	strcat@from+1,c
  2931  0009EC  EC9F  F00D         	call	_strcat	;wreg free
  2932                           
  2933                           ;main.c: 275: strcat(movementString, servosets[i].upperVerticalServo);
  2934  0009F0  0E00               	movlw	low _movementString
  2935  0009F2  6E2E               	movwf	strcat@to,c
  2936  0009F4  0E02               	movlw	high _movementString
  2937  0009F6  6E2F               	movwf	strcat@to+1,c
  2938  0009F8  C072  F028         	movff	InitServos@i,___wmul@multiplier
  2939  0009FC  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  2940  000A00  0E00               	movlw	0
  2941  000A02  6E2B               	movwf	___wmul@multiplicand+1,c
  2942  000A04  0E15               	movlw	21
  2943  000A06  6E2A               	movwf	___wmul@multiplicand,c
  2944  000A08  ECC7  F00E         	call	___wmul	;wreg free
  2945  000A0C  0E05               	movlw	5
  2946  000A0E  2628               	addwf	?___wmul,f,c
  2947  000A10  0E00               	movlw	0
  2948  000A12  2229               	addwfc	?___wmul+1,f,c
  2949  000A14  0E00               	movlw	low _servosets
  2950  000A16  2428               	addwf	?___wmul,w,c
  2951  000A18  6E30               	movwf	strcat@from,c
  2952  000A1A  0E01               	movlw	high _servosets
  2953  000A1C  2029               	addwfc	?___wmul+1,w,c
  2954  000A1E  6E31               	movwf	strcat@from+1,c
  2955  000A20  EC9F  F00D         	call	_strcat	;wreg free
  2956                           
  2957                           ;main.c: 276: strcat(movementString, "P");
  2958  000A24  0E00               	movlw	low _movementString
  2959  000A26  6E2E               	movwf	strcat@to,c
  2960  000A28  0E02               	movlw	high _movementString
  2961  000A2A  6E2F               	movwf	strcat@to+1,c
  2962  000A2C  0E65               	movlw	low STR_2
  2963  000A2E  6E30               	movwf	strcat@from,c
  2964  000A30  0E03               	movlw	high STR_2
  2965  000A32  6E31               	movwf	strcat@from+1,c
  2966  000A34  EC9F  F00D         	call	_strcat	;wreg free
  2967                           
  2968                           ;main.c: 277: sprintf(tmp, "%d", servosets[i].verticalUpperMediumPosition);
  2969  000A38  0E6D               	movlw	low InitServos@tmp
  2970  000A3A  0100               	movlb	0	; () banked
  2971  000A3C  6F60               	movwf	sprintf@sp& (0+255),b
  2972  000A3E  0E00               	movlw	high InitServos@tmp
  2973  000A40  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  2974  000A42  0E60               	movlw	low STR_3
  2975  000A44  6F62               	movwf	sprintf@f& (0+255),b
  2976  000A46  0E03               	movlw	high STR_3
  2977  000A48  6F63               	movwf	(sprintf@f+1)& (0+255),b
  2978  000A4A  C072  F028         	movff	InitServos@i,___wmul@multiplier
  2979  000A4E  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  2980  000A52  0E00               	movlw	0
  2981  000A54  6E2B               	movwf	___wmul@multiplicand+1,c
  2982  000A56  0E15               	movlw	21
  2983  000A58  6E2A               	movwf	___wmul@multiplicand,c
  2984  000A5A  ECC7  F00E         	call	___wmul	;wreg free
  2985  000A5E  0E0D               	movlw	13
  2986  000A60  2628               	addwf	?___wmul,f,c
  2987  000A62  0E00               	movlw	0
  2988  000A64  2229               	addwfc	?___wmul+1,f,c
  2989  000A66  0E00               	movlw	low _servosets
  2990  000A68  2428               	addwf	?___wmul,w,c
  2991  000A6A  6ED9               	movwf	fsr2l,c
  2992  000A6C  0E01               	movlw	high _servosets
  2993  000A6E  2029               	addwfc	?___wmul+1,w,c
  2994  000A70  6EDA               	movwf	fsr2h,c
  2995  000A72  CFDE F064          	movff	postinc2,?_sprintf+4
  2996  000A76  CFDD F065          	movff	postdec2,?_sprintf+5
  2997  000A7A  ECD7  F007         	call	_sprintf	;wreg free
  2998                           
  2999                           ;main.c: 278: strcat(movementString, tmp);
  3000  000A7E  0E00               	movlw	low _movementString
  3001  000A80  6E2E               	movwf	strcat@to,c
  3002  000A82  0E02               	movlw	high _movementString
  3003  000A84  6E2F               	movwf	strcat@to+1,c
  3004  000A86  0E6D               	movlw	low InitServos@tmp
  3005  000A88  6E30               	movwf	strcat@from,c
  3006  000A8A  0E00               	movlw	high InitServos@tmp
  3007  000A8C  6E31               	movwf	strcat@from+1,c
  3008  000A8E  EC9F  F00D         	call	_strcat	;wreg free
  3009                           
  3010                           ;main.c: 279: strcat(movementString, "\r");
  3011  000A92  0E00               	movlw	low _movementString
  3012  000A94  6E2E               	movwf	strcat@to,c
  3013  000A96  0E02               	movlw	high _movementString
  3014  000A98  6E2F               	movwf	strcat@to+1,c
  3015  000A9A  0E5E               	movlw	low (STR_10+4)
  3016  000A9C  6E30               	movwf	strcat@from,c
  3017  000A9E  0E03               	movlw	high (STR_10+4)
  3018  000AA0  6E31               	movwf	strcat@from+1,c
  3019  000AA2  EC9F  F00D         	call	_strcat	;wreg free
  3020                           
  3021                           ;main.c: 280: UART_Write_String(movementString);
  3022  000AA6  0E00               	movlw	low _movementString
  3023  000AA8  6E2E               	movwf	UART_Write_String@str,c
  3024  000AAA  0E02               	movlw	high _movementString
  3025  000AAC  6E2F               	movwf	UART_Write_String@str+1,c
  3026  000AAE  ECCB  F00D         	call	_UART_Write_String	;wreg free
  3027                           
  3028                           ;main.c: 281: EmptyMovementString();
  3029  000AB2  ECEC  F00E         	call	_EmptyMovementString	;wreg free
  3030                           
  3031                           ;main.c: 282: strcat(movementString, "#");
  3032  000AB6  0E00               	movlw	low _movementString
  3033  000AB8  6E2E               	movwf	strcat@to,c
  3034  000ABA  0E02               	movlw	high _movementString
  3035  000ABC  6E2F               	movwf	strcat@to+1,c
  3036  000ABE  0E63               	movlw	low STR_1
  3037  000AC0  6E30               	movwf	strcat@from,c
  3038  000AC2  0E03               	movlw	high STR_1
  3039  000AC4  6E31               	movwf	strcat@from+1,c
  3040  000AC6  EC9F  F00D         	call	_strcat	;wreg free
  3041                           
  3042                           ;main.c: 283: strcat(movementString, servosets[i].lowerVerticalServo);
  3043  000ACA  0E00               	movlw	low _movementString
  3044  000ACC  6E2E               	movwf	strcat@to,c
  3045  000ACE  0E02               	movlw	high _movementString
  3046  000AD0  6E2F               	movwf	strcat@to+1,c
  3047  000AD2  C072  F028         	movff	InitServos@i,___wmul@multiplier
  3048  000AD6  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  3049  000ADA  0E00               	movlw	0
  3050  000ADC  6E2B               	movwf	___wmul@multiplicand+1,c
  3051  000ADE  0E15               	movlw	21
  3052  000AE0  6E2A               	movwf	___wmul@multiplicand,c
  3053  000AE2  ECC7  F00E         	call	___wmul	;wreg free
  3054  000AE6  0E08               	movlw	8
  3055  000AE8  2628               	addwf	?___wmul,f,c
  3056  000AEA  0E00               	movlw	0
  3057  000AEC  2229               	addwfc	?___wmul+1,f,c
  3058  000AEE  0E00               	movlw	low _servosets
  3059  000AF0  2428               	addwf	?___wmul,w,c
  3060  000AF2  6E30               	movwf	strcat@from,c
  3061  000AF4  0E01               	movlw	high _servosets
  3062  000AF6  2029               	addwfc	?___wmul+1,w,c
  3063  000AF8  6E31               	movwf	strcat@from+1,c
  3064  000AFA  EC9F  F00D         	call	_strcat	;wreg free
  3065                           
  3066                           ;main.c: 284: strcat(movementString, "P");
  3067  000AFE  0E00               	movlw	low _movementString
  3068  000B00  6E2E               	movwf	strcat@to,c
  3069  000B02  0E02               	movlw	high _movementString
  3070  000B04  6E2F               	movwf	strcat@to+1,c
  3071  000B06  0E65               	movlw	low STR_2
  3072  000B08  6E30               	movwf	strcat@from,c
  3073  000B0A  0E03               	movlw	high STR_2
  3074  000B0C  6E31               	movwf	strcat@from+1,c
  3075  000B0E  EC9F  F00D         	call	_strcat	;wreg free
  3076                           
  3077                           ;main.c: 285: sprintf(tmp, "%d", servosets[i].verticalLowerMediumPosition);
  3078  000B12  0E6D               	movlw	low InitServos@tmp
  3079  000B14  0100               	movlb	0	; () banked
  3080  000B16  6F60               	movwf	sprintf@sp& (0+255),b
  3081  000B18  0E00               	movlw	high InitServos@tmp
  3082  000B1A  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  3083  000B1C  0E60               	movlw	low STR_3
  3084  000B1E  6F62               	movwf	sprintf@f& (0+255),b
  3085  000B20  0E03               	movlw	high STR_3
  3086  000B22  6F63               	movwf	(sprintf@f+1)& (0+255),b
  3087  000B24  C072  F028         	movff	InitServos@i,___wmul@multiplier
  3088  000B28  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  3089  000B2C  0E00               	movlw	0
  3090  000B2E  6E2B               	movwf	___wmul@multiplicand+1,c
  3091  000B30  0E15               	movlw	21
  3092  000B32  6E2A               	movwf	___wmul@multiplicand,c
  3093  000B34  ECC7  F00E         	call	___wmul	;wreg free
  3094  000B38  0E0F               	movlw	15
  3095  000B3A  2628               	addwf	?___wmul,f,c
  3096  000B3C  0E00               	movlw	0
  3097  000B3E  2229               	addwfc	?___wmul+1,f,c
  3098  000B40  0E00               	movlw	low _servosets
  3099  000B42  2428               	addwf	?___wmul,w,c
  3100  000B44  6ED9               	movwf	fsr2l,c
  3101  000B46  0E01               	movlw	high _servosets
  3102  000B48  2029               	addwfc	?___wmul+1,w,c
  3103  000B4A  6EDA               	movwf	fsr2h,c
  3104  000B4C  CFDE F064          	movff	postinc2,?_sprintf+4
  3105  000B50  CFDD F065          	movff	postdec2,?_sprintf+5
  3106  000B54  ECD7  F007         	call	_sprintf	;wreg free
  3107                           
  3108                           ;main.c: 286: strcat(movementString, tmp);
  3109  000B58  0E00               	movlw	low _movementString
  3110  000B5A  6E2E               	movwf	strcat@to,c
  3111  000B5C  0E02               	movlw	high _movementString
  3112  000B5E  6E2F               	movwf	strcat@to+1,c
  3113  000B60  0E6D               	movlw	low InitServos@tmp
  3114  000B62  6E30               	movwf	strcat@from,c
  3115  000B64  0E00               	movlw	high InitServos@tmp
  3116  000B66  6E31               	movwf	strcat@from+1,c
  3117  000B68  EC9F  F00D         	call	_strcat	;wreg free
  3118                           
  3119                           ;main.c: 287: strcat(movementString, "\r");
  3120  000B6C  0E00               	movlw	low _movementString
  3121  000B6E  6E2E               	movwf	strcat@to,c
  3122  000B70  0E02               	movlw	high _movementString
  3123  000B72  6E2F               	movwf	strcat@to+1,c
  3124  000B74  0E5E               	movlw	low (STR_10+4)
  3125  000B76  6E30               	movwf	strcat@from,c
  3126  000B78  0E03               	movlw	high (STR_10+4)
  3127  000B7A  6E31               	movwf	strcat@from+1,c
  3128  000B7C  EC9F  F00D         	call	_strcat	;wreg free
  3129                           
  3130                           ;main.c: 288: UART_Write_String(movementString);
  3131  000B80  0E00               	movlw	low _movementString
  3132  000B82  6E2E               	movwf	UART_Write_String@str,c
  3133  000B84  0E02               	movlw	high _movementString
  3134  000B86  6E2F               	movwf	UART_Write_String@str+1,c
  3135  000B88  ECCB  F00D         	call	_UART_Write_String	;wreg free
  3136  000B8C  0100               	movlb	0	; () banked
  3137  000B8E  4B72               	infsnz	InitServos@i& (0+255),f,b
  3138  000B90  2B73               	incf	(InitServos@i+1)& (0+255),f,b
  3139                           
  3140                           ; BSR set to: 0
  3141  000B92  5173               	movf	(InitServos@i+1)& (0+255),w,b
  3142  000B94  E101               	bnz	l105
  3143  000B96  D6AD               	goto	L1
  3144  000B98                     l105:
  3145                           
  3146                           ; BSR set to: 0
  3147  000B98  0012               	return		;funcret
  3148  000B9A                     __end_of_InitServos:
  3149                           	opt stack 0
  3150                           tblptru	equ	0xFF8
  3151                           tblptrh	equ	0xFF7
  3152                           tblptrl	equ	0xFF6
  3153                           tablat	equ	0xFF5
  3154                           postinc0	equ	0xFEE
  3155                           wreg	equ	0xFE8
  3156                           postdec1	equ	0xFE5
  3157                           fsr1h	equ	0xFE2
  3158                           fsr1l	equ	0xFE1
  3159                           postinc2	equ	0xFDE
  3160                           postdec2	equ	0xFDD
  3161                           plusw2	equ	0xFDB
  3162                           fsr2h	equ	0xFDA
  3163                           fsr2l	equ	0xFD9
  3164                           status	equ	0xFD8
  3165                           
  3166 ;; *************** function _UART_Write_String *****************
  3167 ;; Defined at:
  3168 ;;		line 209 in file "main.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;  str             2   45[COMRAM] PTR const unsigned char 
  3171 ;;		 -> movementString(256), 
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;  a               1   52[COMRAM] unsigned char 
  3174 ;;  i               2   50[COMRAM] int 
  3175 ;;  arrayLength     2   48[COMRAM] int 
  3176 ;; Return value:  Size  Location     Type
  3177 ;;                  1    wreg      void 
  3178 ;; Registers used:
  3179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3185 ;;      Params:         2       0       0       0
  3186 ;;      Locals:         5       0       0       0
  3187 ;;      Temps:          1       0       0       0
  3188 ;;      Totals:         8       0       0       0
  3189 ;;Total ram usage:        8 bytes
  3190 ;; Hardware stack levels used:    1
  3191 ;; Hardware stack levels required when called:    3
  3192 ;; This function calls:
  3193 ;;		_UART_Write
  3194 ;;		_strlen
  3195 ;; This function is called by:
  3196 ;;		_main
  3197 ;;		_InitServos
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           	psect	text14
  3202  001B96                     __ptext14:
  3203                           	opt stack 0
  3204  001B96                     _UART_Write_String:
  3205                           	opt stack 27
  3206                           
  3207                           ;main.c: 210: int arrayLength = strlen(str);
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;incstack = 0
  3211  001B96  C02E  F028         	movff	UART_Write_String@str,strlen@s
  3212  001B9A  C02F  F029         	movff	UART_Write_String@str+1,strlen@s+1
  3213  001B9E  EC61  F00E         	call	_strlen	;wreg free
  3214  001BA2  C028  F031         	movff	?_strlen,UART_Write_String@arrayLength
  3215  001BA6  C029  F032         	movff	?_strlen+1,UART_Write_String@arrayLength+1
  3216                           
  3217                           ;main.c: 211: for (int i = 0; i<arrayLength; i++) {
  3218  001BAA  0E00               	movlw	0
  3219  001BAC  6E34               	movwf	UART_Write_String@i+1,c
  3220  001BAE  0E00               	movlw	0
  3221  001BB0  6E33               	movwf	UART_Write_String@i,c
  3222  001BB2  D011               	goto	l82
  3223  001BB4                     
  3224                           ;main.c: 212: char a = str[i];
  3225  001BB4  5033               	movf	UART_Write_String@i,w,c
  3226  001BB6  242E               	addwf	UART_Write_String@str,w,c
  3227  001BB8  6ED9               	movwf	fsr2l,c
  3228  001BBA  5034               	movf	UART_Write_String@i+1,w,c
  3229  001BBC  202F               	addwfc	UART_Write_String@str+1,w,c
  3230  001BBE  6EDA               	movwf	fsr2h,c
  3231  001BC0  50DF               	movf	indf2,w,c
  3232  001BC2  6E35               	movwf	UART_Write_String@a,c
  3233                           
  3234                           ;main.c: 213: UART_Write(a);
  3235  001BC4  5035               	movf	UART_Write_String@a,w,c
  3236  001BC6  EC08  F00F         	call	_UART_Write
  3237                           
  3238                           ;main.c: 214: if (a == '\r') {
  3239  001BCA  0E0D               	movlw	13
  3240  001BCC  1835               	xorwf	UART_Write_String@a,w,c
  3241  001BCE  B4D8               	btfsc	status,2,c
  3242  001BD0  0012               	return	
  3243                           
  3244                           ;main.c: 215: return;
  3245  001BD2  4A33               	infsnz	UART_Write_String@i,f,c
  3246  001BD4  2A34               	incf	UART_Write_String@i+1,f,c
  3247  001BD6                     l82:
  3248  001BD6  5031               	movf	UART_Write_String@arrayLength,w,c
  3249  001BD8  5C33               	subwf	UART_Write_String@i,w,c
  3250  001BDA  5034               	movf	UART_Write_String@i+1,w,c
  3251  001BDC  0A80               	xorlw	128
  3252  001BDE  6E30               	movwf	??_UART_Write_String& (0+255),c
  3253  001BE0  5032               	movf	UART_Write_String@arrayLength+1,w,c
  3254  001BE2  0A80               	xorlw	128
  3255  001BE4  5830               	subwfb	??_UART_Write_String& (0+255),w,c
  3256  001BE6  B0D8               	btfsc	status,0,c
  3257  001BE8  0012               	return	
  3258  001BEA  D7E4               	goto	l83
  3259  001BEC                     __end_of_UART_Write_String:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           postinc0	equ	0xFEE
  3266                           wreg	equ	0xFE8
  3267                           postdec1	equ	0xFE5
  3268                           fsr1h	equ	0xFE2
  3269                           fsr1l	equ	0xFE1
  3270                           indf2	equ	0xFDF
  3271                           postinc2	equ	0xFDE
  3272                           postdec2	equ	0xFDD
  3273                           plusw2	equ	0xFDB
  3274                           fsr2h	equ	0xFDA
  3275                           fsr2l	equ	0xFD9
  3276                           status	equ	0xFD8
  3277                           
  3278 ;; *************** function _strlen *****************
  3279 ;; Defined at:
  3280 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strlen.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;  s               2   39[COMRAM] PTR const unsigned char 
  3283 ;;		 -> movementString(256), 
  3284 ;; Auto vars:     Size  Location     Type
  3285 ;;  cp              2   43[COMRAM] PTR const unsigned char 
  3286 ;;		 -> movementString(256), 
  3287 ;; Return value:  Size  Location     Type
  3288 ;;                  2   39[COMRAM] unsigned int 
  3289 ;; Registers used:
  3290 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3296 ;;      Params:         2       0       0       0
  3297 ;;      Locals:         2       0       0       0
  3298 ;;      Temps:          2       0       0       0
  3299 ;;      Totals:         6       0       0       0
  3300 ;;Total ram usage:        6 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    2
  3303 ;; This function calls:
  3304 ;;		Nothing
  3305 ;; This function is called by:
  3306 ;;		_UART_Write_String
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text15
  3311  001CC2                     __ptext15:
  3312                           	opt stack 0
  3313  001CC2                     _strlen:
  3314                           	opt stack 27
  3315                           
  3316                           ;incstack = 0
  3317  001CC2  C028  F02C         	movff	strlen@s,strlen@cp
  3318  001CC6  C029  F02D         	movff	strlen@s+1,strlen@cp+1
  3319  001CCA  D002               	goto	l734
  3320  001CCC  4A2C               	infsnz	strlen@cp,f,c
  3321  001CCE  2A2D               	incf	strlen@cp+1,f,c
  3322  001CD0                     l734:
  3323  001CD0  C02C  FFD9         	movff	strlen@cp,fsr2l
  3324  001CD4  C02D  FFDA         	movff	strlen@cp+1,fsr2h
  3325  001CD8  50DF               	movf	indf2,w,c
  3326  001CDA  A4D8               	btfss	status,2,c
  3327  001CDC  D7F7               	goto	l735
  3328  001CDE  C028  F02A         	movff	strlen@s,??_strlen
  3329  001CE2  C029  F02B         	movff	strlen@s+1,??_strlen+1
  3330  001CE6  1E2A               	comf	??_strlen,f,c
  3331  001CE8  1E2B               	comf	??_strlen+1,f,c
  3332  001CEA  4A2A               	infsnz	??_strlen,f,c
  3333  001CEC  2A2B               	incf	??_strlen+1,f,c
  3334  001CEE  502C               	movf	strlen@cp,w,c
  3335  001CF0  242A               	addwf	??_strlen,w,c
  3336  001CF2  6E28               	movwf	?_strlen,c
  3337  001CF4  502D               	movf	strlen@cp+1,w,c
  3338  001CF6  202B               	addwfc	??_strlen+1,w,c
  3339  001CF8  6E29               	movwf	?_strlen+1,c
  3340  001CFA  0012               	return	
  3341  001CFC                     __end_of_strlen:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           postinc0	equ	0xFEE
  3348                           wreg	equ	0xFE8
  3349                           postdec1	equ	0xFE5
  3350                           fsr1h	equ	0xFE2
  3351                           fsr1l	equ	0xFE1
  3352                           indf2	equ	0xFDF
  3353                           postinc2	equ	0xFDE
  3354                           postdec2	equ	0xFDD
  3355                           plusw2	equ	0xFDB
  3356                           fsr2h	equ	0xFDA
  3357                           fsr2l	equ	0xFD9
  3358                           status	equ	0xFD8
  3359                           
  3360 ;; *************** function _UART_Write *****************
  3361 ;; Defined at:
  3362 ;;		line 220 in file "main.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  data            1    wreg     unsigned char 
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;  data            1   39[COMRAM] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  1    wreg      void 
  3369 ;; Registers used:
  3370 ;;		wreg
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3376 ;;      Params:         0       0       0       0
  3377 ;;      Locals:         1       0       0       0
  3378 ;;      Temps:          0       0       0       0
  3379 ;;      Totals:         1       0       0       0
  3380 ;;Total ram usage:        1 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    2
  3383 ;; This function calls:
  3384 ;;		Nothing
  3385 ;; This function is called by:
  3386 ;;		_UART_Write_String
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text16
  3391  001E10                     __ptext16:
  3392                           	opt stack 0
  3393  001E10                     _UART_Write:
  3394                           	opt stack 27
  3395                           
  3396                           ;incstack = 0
  3397                           ;UART_Write@data stored from wreg
  3398  001E10  6E28               	movwf	UART_Write@data,c
  3399  001E12                     
  3400                           ;main.c: 221: while(!TRMT);
  3401  001E12  A2AC               	btfss	4012,1,c	;volatile
  3402  001E14  D7FE               	goto	l1861
  3403                           
  3404                           ;main.c: 222: TXREG = data;
  3405  001E16  C028  FFAD         	movff	UART_Write@data,4013	;volatile
  3406  001E1A  0012               	return		;funcret
  3407  001E1C                     __end_of_UART_Write:
  3408                           	opt stack 0
  3409                           tblptru	equ	0xFF8
  3410                           tblptrh	equ	0xFF7
  3411                           tblptrl	equ	0xFF6
  3412                           tablat	equ	0xFF5
  3413                           postinc0	equ	0xFEE
  3414                           wreg	equ	0xFE8
  3415                           postdec1	equ	0xFE5
  3416                           fsr1h	equ	0xFE2
  3417                           fsr1l	equ	0xFE1
  3418                           indf2	equ	0xFDF
  3419                           postinc2	equ	0xFDE
  3420                           postdec2	equ	0xFDD
  3421                           plusw2	equ	0xFDB
  3422                           fsr2h	equ	0xFDA
  3423                           fsr2l	equ	0xFD9
  3424                           status	equ	0xFD8
  3425                           
  3426 ;; *************** function _FillServoPositionString *****************
  3427 ;; Defined at:
  3428 ;;		line 228 in file "main.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;  forward         3   42[BANK0 ] float 
  3431 ;;  left            3   45[BANK0 ] float 
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;  newVerticalP    2   65[BANK0 ] int 
  3434 ;;  deltaVertica    2   63[BANK0 ] int 
  3435 ;;  newHorizonta    2   61[BANK0 ] int 
  3436 ;;  deltaHorizon    2   59[BANK0 ] int 
  3437 ;;  tmp             5   71[BANK0 ] unsigned char [5]
  3438 ;;  i               2   80[BANK0 ] unsigned int 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3448 ;;      Params:         0       6       0       0
  3449 ;;      Locals:         0      32       0       0
  3450 ;;      Temps:          0       2       0       0
  3451 ;;      Totals:         0      40       0       0
  3452 ;;Total ram usage:       40 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    4
  3455 ;; This function calls:
  3456 ;;		_EmptyMovementString
  3457 ;;		___awtoft
  3458 ;;		___ftadd
  3459 ;;		___ftmul
  3460 ;;		___fttol
  3461 ;;		___wmul
  3462 ;;		_sprintf
  3463 ;;		_strcat
  3464 ;; This function is called by:
  3465 ;;		_main
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text17
  3470  000368                     __ptext17:
  3471                           	opt stack 0
  3472  000368                     _FillServoPositionString:
  3473                           	opt stack 26
  3474                           
  3475                           ;main.c: 229: EmptyMovementString();
  3476                           
  3477                           ;incstack = 0
  3478  000368  ECEC  F00E         	call	_EmptyMovementString	;wreg free
  3479                           
  3480                           ;main.c: 230: char tmp[5];
  3481                           ;main.c: 231: unsigned int i = 0;
  3482  00036C  0E00               	movlw	0
  3483  00036E  0100               	movlb	0	; () banked
  3484  000370  6FB1               	movwf	(FillServoPositionString@i+1)& (0+255),b
  3485  000372  0E00               	movlw	0
  3486  000374  6FB0               	movwf	FillServoPositionString@i& (0+255),b
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;main.c: 232: for(i = 0; i < 6; i++){
  3490  000376  0E00               	movlw	0
  3491  000378  6FB1               	movwf	(FillServoPositionString@i+1)& (0+255),b
  3492  00037A  0E00               	movlw	0
  3493  00037C  6FB0               	movwf	FillServoPositionString@i& (0+255),b
  3494                           
  3495                           ; BSR set to: 0
  3496  00037E  51B1               	movf	(FillServoPositionString@i+1)& (0+255),w,b
  3497  000380  E105               	bnz	u2550
  3498  000382  0E06               	movlw	6
  3499  000384  5DB0               	subwf	FillServoPositionString@i& (0+255),w,b
  3500  000386  B0D8               	btfsc	status,0,c
  3501  000388  D29E               	goto	u2560
  3502  00038A  D001               	goto	l95
  3503  00038C                     u2550:
  3504                           
  3505                           ; BSR set to: 0
  3506  00038C  D29C               	goto	u2560
  3507  00038E                     l95:
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;main.c: 233: strcat(movementString, "#");
  3511                           
  3512                           ; BSR set to: 0
  3513  00038E  0E00               	movlw	low _movementString
  3514  000390  6E2E               	movwf	strcat@to,c
  3515  000392  0E02               	movlw	high _movementString
  3516  000394  6E2F               	movwf	strcat@to+1,c
  3517  000396  0E63               	movlw	low STR_1
  3518  000398  6E30               	movwf	strcat@from,c
  3519  00039A  0E03               	movlw	high STR_1
  3520  00039C  6E31               	movwf	strcat@from+1,c
  3521  00039E  EC9F  F00D         	call	_strcat	;wreg free
  3522                           
  3523                           ;main.c: 234: strcat(movementString, servosets[i].horizontalServo);
  3524  0003A2  0E00               	movlw	low _movementString
  3525  0003A4  6E2E               	movwf	strcat@to,c
  3526  0003A6  0E02               	movlw	high _movementString
  3527  0003A8  6E2F               	movwf	strcat@to+1,c
  3528  0003AA  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  3529  0003AE  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  3530  0003B2  0E00               	movlw	0
  3531  0003B4  6E2B               	movwf	___wmul@multiplicand+1,c
  3532  0003B6  0E15               	movlw	21
  3533  0003B8  6E2A               	movwf	___wmul@multiplicand,c
  3534  0003BA  ECC7  F00E         	call	___wmul	;wreg free
  3535  0003BE  0E02               	movlw	2
  3536  0003C0  2628               	addwf	?___wmul,f,c
  3537  0003C2  0E00               	movlw	0
  3538  0003C4  2229               	addwfc	?___wmul+1,f,c
  3539  0003C6  0E00               	movlw	low _servosets
  3540  0003C8  2428               	addwf	?___wmul,w,c
  3541  0003CA  6E30               	movwf	strcat@from,c
  3542  0003CC  0E01               	movlw	high _servosets
  3543  0003CE  2029               	addwfc	?___wmul+1,w,c
  3544  0003D0  6E31               	movwf	strcat@from+1,c
  3545  0003D2  EC9F  F00D         	call	_strcat	;wreg free
  3546                           
  3547                           ;main.c: 235: strcat(movementString, "P");
  3548  0003D6  0E00               	movlw	low _movementString
  3549  0003D8  6E2E               	movwf	strcat@to,c
  3550  0003DA  0E02               	movlw	high _movementString
  3551  0003DC  6E2F               	movwf	strcat@to+1,c
  3552  0003DE  0E65               	movlw	low STR_2
  3553  0003E0  6E30               	movwf	strcat@from,c
  3554  0003E2  0E03               	movlw	high STR_2
  3555  0003E4  6E31               	movwf	strcat@from+1,c
  3556  0003E6  EC9F  F00D         	call	_strcat	;wreg free
  3557                           
  3558                           ;main.c: 236: int deltaHorizontal = (positions.horizontalMovement[servosets[i].currentSe
      +                          rvoPosition] * servosets[i].multiplierHorizontal * forward * 0.5) + (positions.horizonta
      +                          lMovement[servosets[i].currentServoPosition] * servosets[i].multiplierHorizontal * left 
  3559  0003EA  0E00               	movlw	0
  3560  0003EC  6E2B               	movwf	___wmul@multiplicand+1,c
  3561  0003EE  0E15               	movlw	21
  3562  0003F0  6E2A               	movwf	___wmul@multiplicand,c
  3563  0003F2  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  3564  0003F6  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  3565  0003FA  ECC7  F00E         	call	___wmul	;wreg free
  3566  0003FE  0E00               	movlw	low _servosets
  3567  000400  2428               	addwf	?___wmul,w,c
  3568  000402  6ED9               	movwf	fsr2l,c
  3569  000404  0E01               	movlw	high _servosets
  3570  000406  2029               	addwfc	?___wmul+1,w,c
  3571  000408  6EDA               	movwf	fsr2h,c
  3572  00040A  CFDE F090          	movff	postinc2,??_FillServoPositionString
  3573  00040E  CFDD F091          	movff	postdec2,??_FillServoPositionString+1
  3574  000412  90D8               	bcf	status,0,c
  3575  000414  0100               	movlb	0	; () banked
  3576  000416  3790               	rlcf	??_FillServoPositionString& (0+255),f,b
  3577  000418  3791               	rlcf	(??_FillServoPositionString+1)& (0+255),f,b
  3578  00041A  0E08               	movlw	8
  3579  00041C  2790               	addwf	??_FillServoPositionString& (0+255),f,b
  3580  00041E  0E00               	movlw	0
  3581  000420  2391               	addwfc	(??_FillServoPositionString+1)& (0+255),f,b
  3582  000422  0E25               	movlw	low _positions
  3583  000424  2590               	addwf	??_FillServoPositionString& (0+255),w,b
  3584  000426  6EF6               	movwf	tblptrl,c
  3585  000428  0E03               	movlw	high _positions
  3586  00042A  2191               	addwfc	(??_FillServoPositionString+1)& (0+255),w,b
  3587  00042C  6EF7               	movwf	tblptrh,c
  3588  00042E                     	if	0	;There are less than 3 active tblptr bytes
  3589  00042E                     	endif
  3590  00042E  0009               	tblrd		*+
  3591  000430  CFF5 F0AC          	movff	tablat,_FillServoPositionString$1138
  3592  000434  000A               	tblrd		*-
  3593  000436  CFF5 F0AD          	movff	tablat,_FillServoPositionString$1138+1
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;main.c: 236: int deltaHorizontal = (positions.horizontalMovement[servosets[i].currentSe
      +                          rvoPosition] * servosets[i].multiplierHorizontal * forward * 0.5) + (positions.horizonta
      +                          lMovement[servosets[i].currentServoPosition] * servosets[i].multiplierHorizontal * left 
  3597  00043A  0E00               	movlw	0
  3598  00043C  6E2B               	movwf	___wmul@multiplicand+1,c
  3599  00043E  0E15               	movlw	21
  3600  000440  6E2A               	movwf	___wmul@multiplicand,c
  3601  000442  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  3602  000446  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  3603  00044A  ECC7  F00E         	call	___wmul	;wreg free
  3604  00044E  0E11               	movlw	17
  3605  000450  2628               	addwf	?___wmul,f,c
  3606  000452  0E00               	movlw	0
  3607  000454  2229               	addwfc	?___wmul+1,f,c
  3608  000456  0E00               	movlw	low _servosets
  3609  000458  2428               	addwf	?___wmul,w,c
  3610  00045A  6ED9               	movwf	fsr2l,c
  3611  00045C  0E01               	movlw	high _servosets
  3612  00045E  2029               	addwfc	?___wmul+1,w,c
  3613  000460  6EDA               	movwf	fsr2h,c
  3614  000462  CFDE F0AE          	movff	postinc2,_FillServoPositionString$1139
  3615  000466  CFDD F0AF          	movff	postdec2,_FillServoPositionString$1139+1
  3616                           
  3617                           ;main.c: 236: int deltaHorizontal = (positions.horizontalMovement[servosets[i].currentSe
      +                          rvoPosition] * servosets[i].multiplierHorizontal * forward * 0.5) + (positions.horizonta
      +                          lMovement[servosets[i].currentServoPosition] * servosets[i].multiplierHorizontal * left 
  3618  00046A  0E00               	movlw	0
  3619  00046C  6E2B               	movwf	___wmul@multiplicand+1,c
  3620  00046E  0E03               	movlw	3
  3621  000470  6E2A               	movwf	___wmul@multiplicand,c
  3622  000472  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  3623  000476  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  3624  00047A  ECC7  F00E         	call	___wmul	;wreg free
  3625  00047E  0E01               	movlw	low _turns
  3626  000480  2428               	addwf	?___wmul,w,c
  3627  000482  6EF6               	movwf	tblptrl,c
  3628  000484  0E03               	movlw	high _turns
  3629  000486  2029               	addwfc	?___wmul+1,w,c
  3630  000488  6EF7               	movwf	tblptrh,c
  3631  00048A                     	if	0	;There are less than 3 active tblptr bytes
  3632  00048A                     	endif
  3633  00048A  0009               	tblrd		*+
  3634  00048C  CFF5 F063          	movff	tablat,___ftmul@f2
  3635  000490  0009               	tblrd		*+
  3636  000492  CFF5 F064          	movff	tablat,___ftmul@f2+1
  3637  000496  000A               	tblrd		*-
  3638  000498  CFF5 F065          	movff	tablat,___ftmul@f2+2
  3639  00049C  C0AC  F02A         	movff	_FillServoPositionString$1138,___wmul@multiplicand
  3640  0004A0  C0AD  F02B         	movff	_FillServoPositionString$1138+1,___wmul@multiplicand+1
  3641  0004A4  C0AE  F028         	movff	_FillServoPositionString$1139,___wmul@multiplier
  3642  0004A8  C0AF  F029         	movff	_FillServoPositionString$1139+1,___wmul@multiplier+1
  3643  0004AC  ECC7  F00E         	call	___wmul	;wreg free
  3644  0004B0  C028  F030         	movff	?___wmul,___awtoft@c
  3645  0004B4  C029  F031         	movff	?___wmul+1,___awtoft@c+1
  3646  0004B8  EC7E  F00E         	call	___awtoft	;wreg free
  3647  0004BC  C030  F060         	movff	?___awtoft,___ftmul@f1
  3648  0004C0  C031  F061         	movff	?___awtoft+1,___ftmul@f1+1
  3649  0004C4  C032  F062         	movff	?___awtoft+2,___ftmul@f1+2
  3650  0004C8  ECF9  F008         	call	___ftmul	;wreg free
  3651  0004CC  C060  F092         	movff	?___ftmul,_FillServoPositionString$1140
  3652  0004D0  C061  F093         	movff	?___ftmul+1,_FillServoPositionString$1140+1
  3653  0004D4  C062  F094         	movff	?___ftmul+2,_FillServoPositionString$1140+2
  3654                           
  3655                           ;main.c: 236: int deltaHorizontal = (positions.horizontalMovement[servosets[i].currentSe
      +                          rvoPosition] * servosets[i].multiplierHorizontal * forward * 0.5) + (positions.horizonta
      +                          lMovement[servosets[i].currentServoPosition] * servosets[i].multiplierHorizontal * left 
  3656  0004D8  C08D  F063         	movff	FillServoPositionString@left,___ftmul@f2
  3657  0004DC  C08E  F064         	movff	FillServoPositionString@left+1,___ftmul@f2+1
  3658  0004E0  C08F  F065         	movff	FillServoPositionString@left+2,___ftmul@f2+2
  3659  0004E4  C092  F060         	movff	_FillServoPositionString$1140,___ftmul@f1
  3660  0004E8  C093  F061         	movff	_FillServoPositionString$1140+1,___ftmul@f1+1
  3661  0004EC  C094  F062         	movff	_FillServoPositionString$1140+2,___ftmul@f1+2
  3662  0004F0  ECF9  F008         	call	___ftmul	;wreg free
  3663  0004F4  C060  F095         	movff	?___ftmul,_FillServoPositionString$1141
  3664  0004F8  C061  F096         	movff	?___ftmul+1,_FillServoPositionString$1141+1
  3665  0004FC  C062  F097         	movff	?___ftmul+2,_FillServoPositionString$1141+2
  3666                           
  3667                           ;main.c: 236: int deltaHorizontal = (positions.horizontalMovement[servosets[i].currentSe
      +                          rvoPosition] * servosets[i].multiplierHorizontal * forward * 0.5) + (positions.horizonta
      +                          lMovement[servosets[i].currentServoPosition] * servosets[i].multiplierHorizontal * left 
  3668  000500  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  3669  000504  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  3670  000508  0E00               	movlw	0
  3671  00050A  6E2B               	movwf	___wmul@multiplicand+1,c
  3672  00050C  0E15               	movlw	21
  3673  00050E  6E2A               	movwf	___wmul@multiplicand,c
  3674  000510  ECC7  F00E         	call	___wmul	;wreg free
  3675  000514  0E11               	movlw	17
  3676  000516  2628               	addwf	?___wmul,f,c
  3677  000518  0E00               	movlw	0
  3678  00051A  2229               	addwfc	?___wmul+1,f,c
  3679  00051C  0E00               	movlw	low _servosets
  3680  00051E  2428               	addwf	?___wmul,w,c
  3681  000520  6ED9               	movwf	fsr2l,c
  3682  000522  0E01               	movlw	high _servosets
  3683  000524  2029               	addwfc	?___wmul+1,w,c
  3684  000526  6EDA               	movwf	fsr2h,c
  3685  000528  CFDE F0A3          	movff	postinc2,_FillServoPositionString$1142
  3686  00052C  CFDD F0A4          	movff	postdec2,_FillServoPositionString$1142+1
  3687                           
  3688                           ;main.c: 236: int deltaHorizontal = (positions.horizontalMovement[servosets[i].currentSe
      +                          rvoPosition] * servosets[i].multiplierHorizontal * forward * 0.5) + (positions.horizonta
      +                          lMovement[servosets[i].currentServoPosition] * servosets[i].multiplierHorizontal * left 
  3689  000530  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  3690  000534  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  3691  000538  0E00               	movlw	0
  3692  00053A  6E2B               	movwf	___wmul@multiplicand+1,c
  3693  00053C  0E15               	movlw	21
  3694  00053E  6E2A               	movwf	___wmul@multiplicand,c
  3695  000540  ECC7  F00E         	call	___wmul	;wreg free
  3696  000544  0E00               	movlw	low _servosets
  3697  000546  2428               	addwf	?___wmul,w,c
  3698  000548  6ED9               	movwf	fsr2l,c
  3699  00054A  0E01               	movlw	high _servosets
  3700  00054C  2029               	addwfc	?___wmul+1,w,c
  3701  00054E  6EDA               	movwf	fsr2h,c
  3702  000550  CFDE F090          	movff	postinc2,??_FillServoPositionString
  3703  000554  CFDD F091          	movff	postdec2,??_FillServoPositionString+1
  3704  000558  90D8               	bcf	status,0,c
  3705  00055A  0100               	movlb	0	; () banked
  3706  00055C  3790               	rlcf	??_FillServoPositionString& (0+255),f,b
  3707  00055E  3791               	rlcf	(??_FillServoPositionString+1)& (0+255),f,b
  3708  000560  0E08               	movlw	8
  3709  000562  2790               	addwf	??_FillServoPositionString& (0+255),f,b
  3710  000564  0E00               	movlw	0
  3711  000566  2391               	addwfc	(??_FillServoPositionString+1)& (0+255),f,b
  3712  000568  0E25               	movlw	low _positions
  3713  00056A  2590               	addwf	??_FillServoPositionString& (0+255),w,b
  3714  00056C  6EF6               	movwf	tblptrl,c
  3715  00056E  0E03               	movlw	high _positions
  3716  000570  2191               	addwfc	(??_FillServoPositionString+1)& (0+255),w,b
  3717  000572  6EF7               	movwf	tblptrh,c
  3718  000574                     	if	0	;There are less than 3 active tblptr bytes
  3719  000574                     	endif
  3720  000574  0009               	tblrd		*+
  3721  000576  CFF5 F0A5          	movff	tablat,_FillServoPositionString$1143
  3722  00057A  000A               	tblrd		*-
  3723  00057C  CFF5 F0A6          	movff	tablat,_FillServoPositionString$1143+1
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;main.c: 236: int deltaHorizontal = (positions.horizontalMovement[servosets[i].currentSe
      +                          rvoPosition] * servosets[i].multiplierHorizontal * forward * 0.5) + (positions.horizonta
      +                          lMovement[servosets[i].currentServoPosition] * servosets[i].multiplierHorizontal * left 
  3727  000580  C08A  F063         	movff	FillServoPositionString@forward,___ftmul@f2
  3728  000584  C08B  F064         	movff	FillServoPositionString@forward+1,___ftmul@f2+1
  3729  000588  C08C  F065         	movff	FillServoPositionString@forward+2,___ftmul@f2+2
  3730  00058C  C0A3  F028         	movff	_FillServoPositionString$1142,___wmul@multiplier
  3731  000590  C0A4  F029         	movff	_FillServoPositionString$1142+1,___wmul@multiplier+1
  3732  000594  C0A5  F02A         	movff	_FillServoPositionString$1143,___wmul@multiplicand
  3733  000598  C0A6  F02B         	movff	_FillServoPositionString$1143+1,___wmul@multiplicand+1
  3734  00059C  ECC7  F00E         	call	___wmul	;wreg free
  3735  0005A0  C028  F030         	movff	?___wmul,___awtoft@c
  3736  0005A4  C029  F031         	movff	?___wmul+1,___awtoft@c+1
  3737  0005A8  EC7E  F00E         	call	___awtoft	;wreg free
  3738  0005AC  C030  F060         	movff	?___awtoft,___ftmul@f1
  3739  0005B0  C031  F061         	movff	?___awtoft+1,___ftmul@f1+1
  3740  0005B4  C032  F062         	movff	?___awtoft+2,___ftmul@f1+2
  3741  0005B8  ECF9  F008         	call	___ftmul	;wreg free
  3742  0005BC  C060  F098         	movff	?___ftmul,_FillServoPositionString$1144
  3743  0005C0  C061  F099         	movff	?___ftmul+1,_FillServoPositionString$1144+1
  3744  0005C4  C062  F09A         	movff	?___ftmul+2,_FillServoPositionString$1144+2
  3745                           
  3746                           ;main.c: 236: int deltaHorizontal = (positions.horizontalMovement[servosets[i].currentSe
      +                          rvoPosition] * servosets[i].multiplierHorizontal * forward * 0.5) + (positions.horizonta
      +                          lMovement[servosets[i].currentServoPosition] * servosets[i].multiplierHorizontal * left 
  3747  0005C8  0E00               	movlw	0
  3748  0005CA  0100               	movlb	0	; () banked
  3749  0005CC  6F63               	movwf	___ftmul@f2& (0+255),b
  3750  0005CE  0E00               	movlw	0
  3751  0005D0  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3752  0005D2  0E3F               	movlw	63
  3753  0005D4  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3754  0005D6  C095  F060         	movff	_FillServoPositionString$1141,___ftmul@f1
  3755  0005DA  C096  F061         	movff	_FillServoPositionString$1141+1,___ftmul@f1+1
  3756  0005DE  C097  F062         	movff	_FillServoPositionString$1141+2,___ftmul@f1+2
  3757  0005E2  ECF9  F008         	call	___ftmul	;wreg free
  3758  0005E6  C060  F072         	movff	?___ftmul,___ftadd@f2
  3759  0005EA  C061  F073         	movff	?___ftmul+1,___ftadd@f2+1
  3760  0005EE  C062  F074         	movff	?___ftmul+2,___ftadd@f2+2
  3761  0005F2  0E00               	movlw	0
  3762  0005F4  0100               	movlb	0	; () banked
  3763  0005F6  6F63               	movwf	___ftmul@f2& (0+255),b
  3764  0005F8  0E00               	movlw	0
  3765  0005FA  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3766  0005FC  0E3F               	movlw	63
  3767  0005FE  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3768  000600  C098  F060         	movff	_FillServoPositionString$1144,___ftmul@f1
  3769  000604  C099  F061         	movff	_FillServoPositionString$1144+1,___ftmul@f1+1
  3770  000608  C09A  F062         	movff	_FillServoPositionString$1144+2,___ftmul@f1+2
  3771  00060C  ECF9  F008         	call	___ftmul	;wreg free
  3772  000610  C060  F06F         	movff	?___ftmul,___ftadd@f1
  3773  000614  C061  F070         	movff	?___ftmul+1,___ftadd@f1+1
  3774  000618  C062  F071         	movff	?___ftmul+2,___ftadd@f1+2
  3775  00061C  EC00  F007         	call	___ftadd	;wreg free
  3776  000620  C06F  F07B         	movff	?___ftadd,___fttol@f1
  3777  000624  C070  F07C         	movff	?___ftadd+1,___fttol@f1+1
  3778  000628  C071  F07D         	movff	?___ftadd+2,___fttol@f1+2
  3779  00062C  EC7D  F008         	call	___fttol	;wreg free
  3780  000630  C07B  F09B         	movff	?___fttol,FillServoPositionString@deltaHorizontal
  3781  000634  C07C  F09C         	movff	?___fttol+1,FillServoPositionString@deltaHorizontal+1
  3782                           
  3783                           ;main.c: 237: int newHorizontalPosition = servosets[i].horizontalMediumPosition + deltaH
      +                          orizontal;
  3784  000638  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  3785  00063C  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  3786  000640  0E00               	movlw	0
  3787  000642  6E2B               	movwf	___wmul@multiplicand+1,c
  3788  000644  0E15               	movlw	21
  3789  000646  6E2A               	movwf	___wmul@multiplicand,c
  3790  000648  ECC7  F00E         	call	___wmul	;wreg free
  3791  00064C  0E0B               	movlw	11
  3792  00064E  2628               	addwf	?___wmul,f,c
  3793  000650  0E00               	movlw	0
  3794  000652  2229               	addwfc	?___wmul+1,f,c
  3795  000654  0E00               	movlw	low _servosets
  3796  000656  2428               	addwf	?___wmul,w,c
  3797  000658  6ED9               	movwf	fsr2l,c
  3798  00065A  0E01               	movlw	high _servosets
  3799  00065C  2029               	addwfc	?___wmul+1,w,c
  3800  00065E  6EDA               	movwf	fsr2h,c
  3801  000660  CFDE F090          	movff	postinc2,??_FillServoPositionString
  3802  000664  CFDD F091          	movff	postdec2,??_FillServoPositionString+1
  3803  000668  0100               	movlb	0	; () banked
  3804  00066A  519B               	movf	FillServoPositionString@deltaHorizontal& (0+255),w,b
  3805  00066C  2590               	addwf	??_FillServoPositionString& (0+255),w,b
  3806  00066E  6F9D               	movwf	FillServoPositionString@newHorizontalPosition& (0+255),b
  3807  000670  519C               	movf	(FillServoPositionString@deltaHorizontal+1)& (0+255),w,b
  3808  000672  2191               	addwfc	(??_FillServoPositionString+1)& (0+255),w,b
  3809  000674  6F9E               	movwf	(FillServoPositionString@newHorizontalPosition+1)& (0+255),b
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;main.c: 238: sprintf(tmp, "%d", newHorizontalPosition);
  3813  000676  0EA7               	movlw	low FillServoPositionString@tmp
  3814  000678  6F60               	movwf	sprintf@sp& (0+255),b
  3815  00067A  0E00               	movlw	high FillServoPositionString@tmp
  3816  00067C  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  3817  00067E  0E60               	movlw	low STR_3
  3818  000680  6F62               	movwf	sprintf@f& (0+255),b
  3819  000682  0E03               	movlw	high STR_3
  3820  000684  6F63               	movwf	(sprintf@f+1)& (0+255),b
  3821  000686  C09D  F064         	movff	FillServoPositionString@newHorizontalPosition,?_sprintf+4
  3822  00068A  C09E  F065         	movff	FillServoPositionString@newHorizontalPosition+1,?_sprintf+5
  3823  00068E  ECD7  F007         	call	_sprintf	;wreg free
  3824                           
  3825                           ;main.c: 239: strcat(movementString, tmp);
  3826  000692  0E00               	movlw	low _movementString
  3827  000694  6E2E               	movwf	strcat@to,c
  3828  000696  0E02               	movlw	high _movementString
  3829  000698  6E2F               	movwf	strcat@to+1,c
  3830  00069A  0EA7               	movlw	low FillServoPositionString@tmp
  3831  00069C  6E30               	movwf	strcat@from,c
  3832  00069E  0E00               	movlw	high FillServoPositionString@tmp
  3833  0006A0  6E31               	movwf	strcat@from+1,c
  3834  0006A2  EC9F  F00D         	call	_strcat	;wreg free
  3835                           
  3836                           ;main.c: 240: strcat(movementString, "#");
  3837  0006A6  0E00               	movlw	low _movementString
  3838  0006A8  6E2E               	movwf	strcat@to,c
  3839  0006AA  0E02               	movlw	high _movementString
  3840  0006AC  6E2F               	movwf	strcat@to+1,c
  3841  0006AE  0E63               	movlw	low STR_1
  3842  0006B0  6E30               	movwf	strcat@from,c
  3843  0006B2  0E03               	movlw	high STR_1
  3844  0006B4  6E31               	movwf	strcat@from+1,c
  3845  0006B6  EC9F  F00D         	call	_strcat	;wreg free
  3846                           
  3847                           ;main.c: 241: strcat(movementString, servosets[i].upperVerticalServo);
  3848  0006BA  0E00               	movlw	low _movementString
  3849  0006BC  6E2E               	movwf	strcat@to,c
  3850  0006BE  0E02               	movlw	high _movementString
  3851  0006C0  6E2F               	movwf	strcat@to+1,c
  3852  0006C2  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  3853  0006C6  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  3854  0006CA  0E00               	movlw	0
  3855  0006CC  6E2B               	movwf	___wmul@multiplicand+1,c
  3856  0006CE  0E15               	movlw	21
  3857  0006D0  6E2A               	movwf	___wmul@multiplicand,c
  3858  0006D2  ECC7  F00E         	call	___wmul	;wreg free
  3859  0006D6  0E05               	movlw	5
  3860  0006D8  2628               	addwf	?___wmul,f,c
  3861  0006DA  0E00               	movlw	0
  3862  0006DC  2229               	addwfc	?___wmul+1,f,c
  3863  0006DE  0E00               	movlw	low _servosets
  3864  0006E0  2428               	addwf	?___wmul,w,c
  3865  0006E2  6E30               	movwf	strcat@from,c
  3866  0006E4  0E01               	movlw	high _servosets
  3867  0006E6  2029               	addwfc	?___wmul+1,w,c
  3868  0006E8  6E31               	movwf	strcat@from+1,c
  3869  0006EA  EC9F  F00D         	call	_strcat	;wreg free
  3870                           
  3871                           ;main.c: 242: strcat(movementString, "P");
  3872  0006EE  0E00               	movlw	low _movementString
  3873  0006F0  6E2E               	movwf	strcat@to,c
  3874  0006F2  0E02               	movlw	high _movementString
  3875  0006F4  6E2F               	movwf	strcat@to+1,c
  3876  0006F6  0E65               	movlw	low STR_2
  3877  0006F8  6E30               	movwf	strcat@from,c
  3878  0006FA  0E03               	movlw	high STR_2
  3879  0006FC  6E31               	movwf	strcat@from+1,c
  3880  0006FE  EC9F  F00D         	call	_strcat	;wreg free
  3881                           
  3882                           ;main.c: 243: int deltaVertical = positions.verticalMovement[servosets[i].currentServoPo
      +                          sition] * servosets[i].multiplierVertical;
  3883  000702  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  3884  000706  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  3885  00070A  0E00               	movlw	0
  3886  00070C  6E2B               	movwf	___wmul@multiplicand+1,c
  3887  00070E  0E15               	movlw	21
  3888  000710  6E2A               	movwf	___wmul@multiplicand,c
  3889  000712  ECC7  F00E         	call	___wmul	;wreg free
  3890  000716  0E13               	movlw	19
  3891  000718  2628               	addwf	?___wmul,f,c
  3892  00071A  0E00               	movlw	0
  3893  00071C  2229               	addwfc	?___wmul+1,f,c
  3894  00071E  0E00               	movlw	low _servosets
  3895  000720  2428               	addwf	?___wmul,w,c
  3896  000722  6ED9               	movwf	fsr2l,c
  3897  000724  0E01               	movlw	high _servosets
  3898  000726  2029               	addwfc	?___wmul+1,w,c
  3899  000728  6EDA               	movwf	fsr2h,c
  3900  00072A  CFDE F0AC          	movff	postinc2,_FillServoPositionString$1138
  3901  00072E  CFDD F0AD          	movff	postdec2,_FillServoPositionString$1138+1
  3902                           
  3903                           ;main.c: 243: int deltaVertical = positions.verticalMovement[servosets[i].currentServoPo
      +                          sition] * servosets[i].multiplierVertical;
  3904  000732  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  3905  000736  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  3906  00073A  0E00               	movlw	0
  3907  00073C  6E2B               	movwf	___wmul@multiplicand+1,c
  3908  00073E  0E15               	movlw	21
  3909  000740  6E2A               	movwf	___wmul@multiplicand,c
  3910  000742  ECC7  F00E         	call	___wmul	;wreg free
  3911  000746  0E00               	movlw	low _servosets
  3912  000748  2428               	addwf	?___wmul,w,c
  3913  00074A  6ED9               	movwf	fsr2l,c
  3914  00074C  0E01               	movlw	high _servosets
  3915  00074E  2029               	addwfc	?___wmul+1,w,c
  3916  000750  6EDA               	movwf	fsr2h,c
  3917  000752  CFDE F090          	movff	postinc2,??_FillServoPositionString
  3918  000756  CFDD F091          	movff	postdec2,??_FillServoPositionString+1
  3919  00075A  90D8               	bcf	status,0,c
  3920  00075C  0100               	movlb	0	; () banked
  3921  00075E  3790               	rlcf	??_FillServoPositionString& (0+255),f,b
  3922  000760  3791               	rlcf	(??_FillServoPositionString+1)& (0+255),f,b
  3923  000762  0E25               	movlw	low _positions
  3924  000764  2590               	addwf	??_FillServoPositionString& (0+255),w,b
  3925  000766  6EF6               	movwf	tblptrl,c
  3926  000768  0E03               	movlw	high _positions
  3927  00076A  2191               	addwfc	(??_FillServoPositionString+1)& (0+255),w,b
  3928  00076C  6EF7               	movwf	tblptrh,c
  3929  00076E                     	if	0	;There are less than 3 active tblptr bytes
  3930  00076E                     	endif
  3931  00076E  0009               	tblrd		*+
  3932  000770  CFF5 F0AE          	movff	tablat,_FillServoPositionString$1139
  3933  000774  000A               	tblrd		*-
  3934  000776  CFF5 F0AF          	movff	tablat,_FillServoPositionString$1139+1
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;main.c: 243: int deltaVertical = positions.verticalMovement[servosets[i].currentServoPo
      +                          sition] * servosets[i].multiplierVertical;
  3938  00077A  C0AC  F028         	movff	_FillServoPositionString$1138,___wmul@multiplier
  3939  00077E  C0AD  F029         	movff	_FillServoPositionString$1138+1,___wmul@multiplier+1
  3940  000782  C0AE  F02A         	movff	_FillServoPositionString$1139,___wmul@multiplicand
  3941  000786  C0AF  F02B         	movff	_FillServoPositionString$1139+1,___wmul@multiplicand+1
  3942  00078A  ECC7  F00E         	call	___wmul	;wreg free
  3943  00078E  C028  F09F         	movff	?___wmul,FillServoPositionString@deltaVertical
  3944  000792  C029  F0A0         	movff	?___wmul+1,FillServoPositionString@deltaVertical+1
  3945                           
  3946                           ;main.c: 244: int newVerticalPosition = servosets[i].verticalUpperMediumPosition + delta
      +                          Vertical;
  3947  000796  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  3948  00079A  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  3949  00079E  0E00               	movlw	0
  3950  0007A0  6E2B               	movwf	___wmul@multiplicand+1,c
  3951  0007A2  0E15               	movlw	21
  3952  0007A4  6E2A               	movwf	___wmul@multiplicand,c
  3953  0007A6  ECC7  F00E         	call	___wmul	;wreg free
  3954  0007AA  0E0D               	movlw	13
  3955  0007AC  2628               	addwf	?___wmul,f,c
  3956  0007AE  0E00               	movlw	0
  3957  0007B0  2229               	addwfc	?___wmul+1,f,c
  3958  0007B2  0E00               	movlw	low _servosets
  3959  0007B4  2428               	addwf	?___wmul,w,c
  3960  0007B6  6ED9               	movwf	fsr2l,c
  3961  0007B8  0E01               	movlw	high _servosets
  3962  0007BA  2029               	addwfc	?___wmul+1,w,c
  3963  0007BC  6EDA               	movwf	fsr2h,c
  3964  0007BE  CFDE F090          	movff	postinc2,??_FillServoPositionString
  3965  0007C2  CFDD F091          	movff	postdec2,??_FillServoPositionString+1
  3966  0007C6  0100               	movlb	0	; () banked
  3967  0007C8  519F               	movf	FillServoPositionString@deltaVertical& (0+255),w,b
  3968  0007CA  2590               	addwf	??_FillServoPositionString& (0+255),w,b
  3969  0007CC  6FA1               	movwf	FillServoPositionString@newVerticalPosition& (0+255),b
  3970  0007CE  51A0               	movf	(FillServoPositionString@deltaVertical+1)& (0+255),w,b
  3971  0007D0  2191               	addwfc	(??_FillServoPositionString+1)& (0+255),w,b
  3972  0007D2  6FA2               	movwf	(FillServoPositionString@newVerticalPosition+1)& (0+255),b
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;main.c: 245: sprintf(tmp, "%d", newVerticalPosition);
  3976  0007D4  0EA7               	movlw	low FillServoPositionString@tmp
  3977  0007D6  6F60               	movwf	sprintf@sp& (0+255),b
  3978  0007D8  0E00               	movlw	high FillServoPositionString@tmp
  3979  0007DA  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  3980  0007DC  0E60               	movlw	low STR_3
  3981  0007DE  6F62               	movwf	sprintf@f& (0+255),b
  3982  0007E0  0E03               	movlw	high STR_3
  3983  0007E2  6F63               	movwf	(sprintf@f+1)& (0+255),b
  3984  0007E4  C0A1  F064         	movff	FillServoPositionString@newVerticalPosition,?_sprintf+4
  3985  0007E8  C0A2  F065         	movff	FillServoPositionString@newVerticalPosition+1,?_sprintf+5
  3986  0007EC  ECD7  F007         	call	_sprintf	;wreg free
  3987                           
  3988                           ;main.c: 246: strcat(movementString, tmp);
  3989  0007F0  0E00               	movlw	low _movementString
  3990  0007F2  6E2E               	movwf	strcat@to,c
  3991  0007F4  0E02               	movlw	high _movementString
  3992  0007F6  6E2F               	movwf	strcat@to+1,c
  3993  0007F8  0EA7               	movlw	low FillServoPositionString@tmp
  3994  0007FA  6E30               	movwf	strcat@from,c
  3995  0007FC  0E00               	movlw	high FillServoPositionString@tmp
  3996  0007FE  6E31               	movwf	strcat@from+1,c
  3997  000800  EC9F  F00D         	call	_strcat	;wreg free
  3998                           
  3999                           ;main.c: 247: strcat(movementString, "#");
  4000  000804  0E00               	movlw	low _movementString
  4001  000806  6E2E               	movwf	strcat@to,c
  4002  000808  0E02               	movlw	high _movementString
  4003  00080A  6E2F               	movwf	strcat@to+1,c
  4004  00080C  0E63               	movlw	low STR_1
  4005  00080E  6E30               	movwf	strcat@from,c
  4006  000810  0E03               	movlw	high STR_1
  4007  000812  6E31               	movwf	strcat@from+1,c
  4008  000814  EC9F  F00D         	call	_strcat	;wreg free
  4009                           
  4010                           ;main.c: 248: strcat(movementString, servosets[i].lowerVerticalServo);
  4011  000818  0E00               	movlw	low _movementString
  4012  00081A  6E2E               	movwf	strcat@to,c
  4013  00081C  0E02               	movlw	high _movementString
  4014  00081E  6E2F               	movwf	strcat@to+1,c
  4015  000820  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  4016  000824  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  4017  000828  0E00               	movlw	0
  4018  00082A  6E2B               	movwf	___wmul@multiplicand+1,c
  4019  00082C  0E15               	movlw	21
  4020  00082E  6E2A               	movwf	___wmul@multiplicand,c
  4021  000830  ECC7  F00E         	call	___wmul	;wreg free
  4022  000834  0E08               	movlw	8
  4023  000836  2628               	addwf	?___wmul,f,c
  4024  000838  0E00               	movlw	0
  4025  00083A  2229               	addwfc	?___wmul+1,f,c
  4026  00083C  0E00               	movlw	low _servosets
  4027  00083E  2428               	addwf	?___wmul,w,c
  4028  000840  6E30               	movwf	strcat@from,c
  4029  000842  0E01               	movlw	high _servosets
  4030  000844  2029               	addwfc	?___wmul+1,w,c
  4031  000846  6E31               	movwf	strcat@from+1,c
  4032  000848  EC9F  F00D         	call	_strcat	;wreg free
  4033                           
  4034                           ;main.c: 249: strcat(movementString, "P");
  4035  00084C  0E00               	movlw	low _movementString
  4036  00084E  6E2E               	movwf	strcat@to,c
  4037  000850  0E02               	movlw	high _movementString
  4038  000852  6E2F               	movwf	strcat@to+1,c
  4039  000854  0E65               	movlw	low STR_2
  4040  000856  6E30               	movwf	strcat@from,c
  4041  000858  0E03               	movlw	high STR_2
  4042  00085A  6E31               	movwf	strcat@from+1,c
  4043  00085C  EC9F  F00D         	call	_strcat	;wreg free
  4044                           
  4045                           ;main.c: 250: sprintf(tmp, "%d", servosets[i].verticalLowerMediumPosition);
  4046  000860  0EA7               	movlw	low FillServoPositionString@tmp
  4047  000862  0100               	movlb	0	; () banked
  4048  000864  6F60               	movwf	sprintf@sp& (0+255),b
  4049  000866  0E00               	movlw	high FillServoPositionString@tmp
  4050  000868  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  4051  00086A  0E60               	movlw	low STR_3
  4052  00086C  6F62               	movwf	sprintf@f& (0+255),b
  4053  00086E  0E03               	movlw	high STR_3
  4054  000870  6F63               	movwf	(sprintf@f+1)& (0+255),b
  4055  000872  C0B0  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  4056  000876  C0B1  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  4057  00087A  0E00               	movlw	0
  4058  00087C  6E2B               	movwf	___wmul@multiplicand+1,c
  4059  00087E  0E15               	movlw	21
  4060  000880  6E2A               	movwf	___wmul@multiplicand,c
  4061  000882  ECC7  F00E         	call	___wmul	;wreg free
  4062  000886  0E0F               	movlw	15
  4063  000888  2628               	addwf	?___wmul,f,c
  4064  00088A  0E00               	movlw	0
  4065  00088C  2229               	addwfc	?___wmul+1,f,c
  4066  00088E  0E00               	movlw	low _servosets
  4067  000890  2428               	addwf	?___wmul,w,c
  4068  000892  6ED9               	movwf	fsr2l,c
  4069  000894  0E01               	movlw	high _servosets
  4070  000896  2029               	addwfc	?___wmul+1,w,c
  4071  000898  6EDA               	movwf	fsr2h,c
  4072  00089A  CFDE F064          	movff	postinc2,?_sprintf+4
  4073  00089E  CFDD F065          	movff	postdec2,?_sprintf+5
  4074  0008A2  ECD7  F007         	call	_sprintf	;wreg free
  4075                           
  4076                           ;main.c: 251: strcat(movementString, tmp);
  4077  0008A6  0E00               	movlw	low _movementString
  4078  0008A8  6E2E               	movwf	strcat@to,c
  4079  0008AA  0E02               	movlw	high _movementString
  4080  0008AC  6E2F               	movwf	strcat@to+1,c
  4081  0008AE  0EA7               	movlw	low FillServoPositionString@tmp
  4082  0008B0  6E30               	movwf	strcat@from,c
  4083  0008B2  0E00               	movlw	high FillServoPositionString@tmp
  4084  0008B4  6E31               	movwf	strcat@from+1,c
  4085  0008B6  EC9F  F00D         	call	_strcat	;wreg free
  4086  0008BA  0100               	movlb	0	; () banked
  4087  0008BC  4BB0               	infsnz	FillServoPositionString@i& (0+255),f,b
  4088  0008BE  2BB1               	incf	(FillServoPositionString@i+1)& (0+255),f,b
  4089                           
  4090                           ; BSR set to: 0
  4091  0008C0  51B1               	movf	(FillServoPositionString@i+1)& (0+255),w,b
  4092  0008C2  E101               	bnz	l2709
  4093  0008C4  D55E               	goto	L2
  4094  0008C6                     u2560:
  4095  0008C6                     l2709:
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;main.c: 252: }
  4099                           ;main.c: 253: strcat(movementString, "T400\r");
  4100  0008C6  0E00               	movlw	low _movementString
  4101  0008C8  6E2E               	movwf	strcat@to,c
  4102  0008CA  0E02               	movlw	high _movementString
  4103  0008CC  6E2F               	movwf	strcat@to+1,c
  4104  0008CE  0E5A               	movlw	low STR_10
  4105  0008D0  6E30               	movwf	strcat@from,c
  4106  0008D2  0E03               	movlw	high STR_10
  4107  0008D4  6E31               	movwf	strcat@from+1,c
  4108  0008D6  EC9F  F00D         	call	_strcat	;wreg free
  4109  0008DA  0012               	return		;funcret
  4110  0008DC                     __end_of_FillServoPositionString:
  4111                           	opt stack 0
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           postinc0	equ	0xFEE
  4117                           wreg	equ	0xFE8
  4118                           postdec1	equ	0xFE5
  4119                           fsr1h	equ	0xFE2
  4120                           fsr1l	equ	0xFE1
  4121                           indf2	equ	0xFDF
  4122                           postinc2	equ	0xFDE
  4123                           postdec2	equ	0xFDD
  4124                           plusw2	equ	0xFDB
  4125                           fsr2h	equ	0xFDA
  4126                           fsr2l	equ	0xFD9
  4127                           status	equ	0xFD8
  4128                           
  4129 ;; *************** function _strcat *****************
  4130 ;; Defined at:
  4131 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcat.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;  to              2   45[COMRAM] PTR unsigned char 
  4134 ;;		 -> movementString(256), 
  4135 ;;  from            2   47[COMRAM] PTR const unsigned char 
  4136 ;;		 -> STR_22(2), STR_20(2), STR_19(2), STR_18(2), 
  4137 ;;		 -> STR_16(2), STR_15(2), STR_14(2), InitServos@tmp(5), 
  4138 ;;		 -> STR_12(2), STR_11(2), STR_10(6), STR_8(2), 
  4139 ;;		 -> STR_7(2), STR_5(2), STR_4(2), FillServoPositionString@tmp(5), 
  4140 ;;		 -> STR_2(2), STR_1(2), servosets.lowerVerticalServo(3), servosets.upperVerticalServo(3), 
  4141 ;;		 -> servosets.horizontalServo(3), servosets(126), 
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  cp              2   49[COMRAM] PTR unsigned char 
  4144 ;;		 -> movementString(256), 
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  2   45[COMRAM] PTR unsigned char 
  4147 ;; Registers used:
  4148 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4154 ;;      Params:         4       0       0       0
  4155 ;;      Locals:         2       0       0       0
  4156 ;;      Temps:          0       0       0       0
  4157 ;;      Totals:         6       0       0       0
  4158 ;;Total ram usage:        6 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    2
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_FillServoPositionString
  4165 ;;		_InitServos
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           	psect	text18
  4170  001B3E                     __ptext18:
  4171                           	opt stack 0
  4172  001B3E                     _strcat:
  4173                           	opt stack 27
  4174                           
  4175                           ;incstack = 0
  4176  001B3E  C02E  F032         	movff	strcat@to,strcat@cp
  4177  001B42  C02F  F033         	movff	strcat@to+1,strcat@cp+1
  4178  001B46  D002               	goto	l725
  4179  001B48  4A32               	infsnz	strcat@cp,f,c
  4180  001B4A  2A33               	incf	strcat@cp+1,f,c
  4181  001B4C                     l725:
  4182  001B4C  C032  FFD9         	movff	strcat@cp,fsr2l
  4183  001B50  C033  FFDA         	movff	strcat@cp+1,fsr2h
  4184  001B54  50DF               	movf	indf2,w,c
  4185  001B56  B4D8               	btfsc	status,2,c
  4186  001B58  D005               	goto	l728
  4187  001B5A  D7F6               	goto	l726
  4188  001B5C  4A32               	infsnz	strcat@cp,f,c
  4189  001B5E  2A33               	incf	strcat@cp+1,f,c
  4190  001B60  4A30               	infsnz	strcat@from,f,c
  4191  001B62  2A31               	incf	strcat@from+1,f,c
  4192  001B64                     l728:
  4193  001B64  C030  FFF6         	movff	strcat@from,tblptrl
  4194  001B68  C031  FFF7         	movff	strcat@from+1,tblptrh
  4195  001B6C  6AF8               	clrf	tblptru,c
  4196  001B6E  C032  FFD9         	movff	strcat@cp,fsr2l
  4197  001B72  C033  FFDA         	movff	strcat@cp+1,fsr2h
  4198  001B76  0E02               	movlw	(high __ramtop+-1)
  4199  001B78  64F7               	cpfsgt	tblptrh,c
  4200  001B7A  D003               	bra	u1807
  4201  001B7C  0008               	tblrd		*
  4202  001B7E  50F5               	movf	tablat,w,c
  4203  001B80  D005               	bra	u1800
  4204  001B82                     u1807:
  4205  001B82  CFF6 FFE1          	movff	tblptrl,fsr1l
  4206  001B86  CFF7 FFE2          	movff	tblptrh,fsr1h
  4207  001B8A  50E7               	movf	indf1,w,c
  4208  001B8C                     u1800:
  4209  001B8C  6EDF               	movwf	indf2,c
  4210  001B8E  50DF               	movf	indf2,w,c
  4211  001B90  B4D8               	btfsc	status,2,c
  4212  001B92  0012               	return	
  4213  001B94  D7E3               	goto	l729
  4214  001B96                     __end_of_strcat:
  4215                           	opt stack 0
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           postinc0	equ	0xFEE
  4221                           wreg	equ	0xFE8
  4222                           indf1	equ	0xFE7
  4223                           postdec1	equ	0xFE5
  4224                           fsr1h	equ	0xFE2
  4225                           fsr1l	equ	0xFE1
  4226                           indf2	equ	0xFDF
  4227                           postinc2	equ	0xFDE
  4228                           postdec2	equ	0xFDD
  4229                           plusw2	equ	0xFDB
  4230                           fsr2h	equ	0xFDA
  4231                           fsr2l	equ	0xFD9
  4232                           status	equ	0xFD8
  4233                           
  4234 ;; *************** function _sprintf *****************
  4235 ;; Defined at:
  4236 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  4239 ;;		 -> InitServos@tmp(5), FillServoPositionString@tmp(5), 
  4240 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  4241 ;;		 -> STR_21(3), STR_17(3), STR_13(3), STR_9(3), 
  4242 ;;		 -> STR_6(3), STR_3(3), 
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;  tmpval          4    0        struct .
  4245 ;;  cp              3    0        PTR const unsigned char 
  4246 ;;  val             2   10[BANK0 ] unsigned int 
  4247 ;;  ap              2    6[BANK0 ] PTR void [1]
  4248 ;;		 -> ?_sprintf(2), 
  4249 ;;  len             2    0        unsigned int 
  4250 ;;  c               1   12[BANK0 ] char 
  4251 ;;  prec            1    9[BANK0 ] char 
  4252 ;;  flag            1    8[BANK0 ] unsigned char 
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  2    0[BANK0 ] int 
  4255 ;; Registers used:
  4256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : 0/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4262 ;;      Params:         0       6       0       0
  4263 ;;      Locals:         0       7       0       0
  4264 ;;      Temps:          1       0       0       0
  4265 ;;      Totals:         1      13       0       0
  4266 ;;Total ram usage:       14 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    3
  4269 ;; This function calls:
  4270 ;;		___lwdiv
  4271 ;;		___lwmod
  4272 ;; This function is called by:
  4273 ;;		_FillServoPositionString
  4274 ;;		_InitServos
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           	psect	text19
  4279  000FAE                     __ptext19:
  4280                           	opt stack 0
  4281  000FAE                     _sprintf:
  4282                           	opt stack 26
  4283                           
  4284                           ;doprnt.c: 494: va_list ap;
  4285                           ;doprnt.c: 499: signed char c;
  4286                           ;doprnt.c: 506: signed char prec;
  4287                           ;doprnt.c: 508: unsigned char flag;
  4288                           ;doprnt.c: 523: union {
  4289                           ;doprnt.c: 524: unsigned long vd;
  4290                           ;doprnt.c: 525: double integ;
  4291                           ;doprnt.c: 526: } tmpval;
  4292                           ;doprnt.c: 528: unsigned int val;
  4293                           ;doprnt.c: 529: unsigned len;
  4294                           ;doprnt.c: 530: const char * cp;
  4295                           ;doprnt.c: 533: *ap = __va_start();
  4296                           
  4297                           ;incstack = 0
  4298  000FAE  0E64               	movlw	low (?_sprintf+4)
  4299  000FB0  0100               	movlb	0	; () banked
  4300  000FB2  6F66               	movwf	sprintf@ap& (0+255),b
  4301  000FB4  0E00               	movlw	high (?_sprintf+4)
  4302  000FB6  6F67               	movwf	(sprintf@ap+1)& (0+255),b
  4303                           
  4304                           ;doprnt.c: 536: while(c = *f++) {
  4305  000FB8  D08D               	goto	u1880
  4306  000FBA                     
  4307                           ; BSR set to: 0
  4308                           ;doprnt.c: 538: if(c != '%')
  4309                           
  4310                           ; BSR set to: 0
  4311  000FBA  0E25               	movlw	37
  4312  000FBC  196C               	xorwf	sprintf@c& (0+255),w,b
  4313  000FBE  B4D8               	btfsc	status,2,c
  4314  000FC0  D009               	goto	l133
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;doprnt.c: 540: {
  4318                           ;doprnt.c: 541: ((*sp++ = (c)));
  4319  000FC2  C060  FFD9         	movff	sprintf@sp,fsr2l
  4320  000FC6  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4321  000FCA  C06C  FFDF         	movff	sprintf@c,indf2
  4322                           
  4323                           ; BSR set to: 0
  4324  000FCE  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4325  000FD0  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4326                           
  4327                           ;doprnt.c: 542: continue;
  4328  000FD2  D080               	goto	u1880
  4329  000FD4                     l133:
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;doprnt.c: 543: }
  4333                           ;doprnt.c: 548: flag = 0;
  4334                           
  4335                           ; BSR set to: 0
  4336  000FD4  0E00               	movlw	0
  4337  000FD6  6F68               	movwf	sprintf@flag& (0+255),b
  4338                           
  4339                           ; BSR set to: 0
  4340                           
  4341                           ; BSR set to: 0
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;doprnt.c: 822: }
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;doprnt.c: 813: continue;
  4348                           
  4349                           ;doprnt.c: 802: default:
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;doprnt.c: 698: case 'i':
  4353                           ;doprnt.c: 699: break;
  4354                           
  4355                           ; BSR set to: 0
  4356                           
  4357                           ;doprnt.c: 697: case 'd':
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;doprnt.c: 638: goto alldone;
  4361                           
  4362                           ;doprnt.c: 637: case 0:
  4363                           
  4364                           ;doprnt.c: 635: switch(c = *f++) {
  4365  000FD8  C062  FFF6         	movff	sprintf@f,tblptrl
  4366  000FDC  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4367  000FE0  4B62               	infsnz	sprintf@f& (0+255),f,b
  4368  000FE2  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4369  000FE4                     	if	0	;tblptru may be non-zero
  4370  000FE4                     	endif
  4371  000FE4                     	if	0	;tblptru may be non-zero
  4372  000FE4                     	endif
  4373  000FE4  0008               	tblrd		*
  4374  000FE6  CFF5 F06C          	movff	tablat,sprintf@c
  4375  000FEA  516C               	movf	sprintf@c& (0+255),w,b
  4376                           
  4377                           ; Switch size 1, requested type "space"
  4378                           ; Number of cases is 3, Range of values is 0 to 105
  4379                           ; switch strategies available:
  4380                           ; Name         Instructions Cycles
  4381                           ; simple_byte           10     6 (average)
  4382                           ;	Chosen strategy is simple_byte
  4383  000FEC  0A00               	xorlw	0	; case 0
  4384  000FEE  B4D8               	btfsc	status,2,c
  4385  000FF0  D07D               	goto	u1890
  4386  000FF2  0A64               	xorlw	100	; case 100
  4387  000FF4  B4D8               	btfsc	status,2,c
  4388  000FF6  D003               	goto	l139
  4389  000FF8  0A0D               	xorlw	13	; case 105
  4390  000FFA  A4D8               	btfss	status,2,c
  4391  000FFC  D06B               	goto	u1880
  4392  000FFE                     l139:
  4393                           
  4394                           ; BSR set to: 0
  4395                           ;doprnt.c: 1253: {
  4396                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4397                           
  4398                           ; BSR set to: 0
  4399  000FFE  C066  FFD9         	movff	sprintf@ap,fsr2l
  4400  001002  C067  FFDA         	movff	sprintf@ap+1,fsr2h
  4401  001006  CFDE F06A          	movff	postinc2,sprintf@val
  4402  00100A  CFDD F06B          	movff	postdec2,sprintf@val+1
  4403                           
  4404                           ; BSR set to: 0
  4405  00100E  0E02               	movlw	2
  4406  001010  2766               	addwf	sprintf@ap& (0+255),f,b
  4407  001012  0E00               	movlw	0
  4408  001014  2367               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4409                           
  4410                           ; BSR set to: 0
  4411                           ;doprnt.c: 1261: if((int)val < 0) {
  4412  001016  AF6B               	btfss	(sprintf@val+1)& (0+255),7,b
  4413  001018  D006               	goto	l141
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;doprnt.c: 1262: flag |= 0x03;
  4417  00101A  0E03               	movlw	3
  4418  00101C  1368               	iorwf	sprintf@flag& (0+255),f,b
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;doprnt.c: 1263: val = -val;
  4422  00101E  6D6A               	negf	sprintf@val& (0+255),b
  4423  001020  1F6B               	comf	(sprintf@val+1)& (0+255),f,b
  4424  001022  B0D8               	btfsc	status,0,c
  4425  001024  2B6B               	incf	(sprintf@val+1)& (0+255),f,b
  4426  001026                     l141:
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;doprnt.c: 1264: }
  4430                           ;doprnt.c: 1266: }
  4431                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4432                           
  4433                           ; BSR set to: 0
  4434  001026  0E01               	movlw	1
  4435  001028  6F6C               	movwf	sprintf@c& (0+255),b
  4436  00102A                     l2087:
  4437                           
  4438                           ; BSR set to: 0
  4439  00102A  0E05               	movlw	5
  4440  00102C  196C               	xorwf	sprintf@c& (0+255),w,b
  4441  00102E  B4D8               	btfsc	status,2,c
  4442  001030  D012               	goto	u1860
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;doprnt.c: 1306: if(val < dpowers[c])
  4446                           
  4447                           ; BSR set to: 0
  4448                           
  4449                           ; BSR set to: 0
  4450  001032  516C               	movf	sprintf@c& (0+255),w,b
  4451  001034  0D02               	mullw	2
  4452  001036  0E35               	movlw	low _dpowers
  4453  001038  24F3               	addwf	prodl,w,c
  4454  00103A  6EF6               	movwf	tblptrl,c
  4455  00103C  0E03               	movlw	high _dpowers
  4456  00103E  20F4               	addwfc	prodh,w,c
  4457  001040  6EF7               	movwf	tblptrh,c
  4458  001042                     	if	0	;There are less than 3 active tblptr bytes
  4459  001042                     	endif
  4460  001042  0009               	tblrd		*+
  4461  001044  50F5               	movf	tablat,w,c
  4462  001046  5D6A               	subwf	sprintf@val& (0+255),w,b
  4463  001048  0009               	tblrd		*+
  4464  00104A  50F5               	movf	tablat,w,c
  4465  00104C  596B               	subwfb	(sprintf@val+1)& (0+255),w,b
  4466  00104E  A0D8               	btfss	status,0,c
  4467  001050  D002               	goto	u1860
  4468                           
  4469                           ; BSR set to: 0
  4470                           
  4471                           ; BSR set to: 0
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;doprnt.c: 1307: break;
  4475  001052  2B6C               	incf	sprintf@c& (0+255),f,b
  4476  001054  D7EA               	goto	l2087
  4477  001056                     u1860:
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;doprnt.c: 1422: {
  4481                           ;doprnt.c: 1438: if(flag & 0x03)
  4482                           
  4483                           ; BSR set to: 0
  4484  001056  C068  F034         	movff	sprintf@flag,??_sprintf
  4485  00105A  0E03               	movlw	3
  4486  00105C  1634               	andwf	??_sprintf,f,c
  4487  00105E  B4D8               	btfsc	status,2,c
  4488  001060  D008               	goto	l145
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4492  001062  C060  FFD9         	movff	sprintf@sp,fsr2l
  4493  001066  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4494  00106A  0E2D               	movlw	45
  4495  00106C  6EDF               	movwf	indf2,c
  4496                           
  4497                           ; BSR set to: 0
  4498  00106E  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4499  001070  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4500  001072                     l145:
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;doprnt.c: 1469: }
  4504                           ;doprnt.c: 1472: prec = c;
  4505                           
  4506                           ; BSR set to: 0
  4507  001072  C06C  F069         	movff	sprintf@c,sprintf@prec
  4508                           
  4509                           ;doprnt.c: 1474: while(prec--) {
  4510  001076  D02A               	goto	l146
  4511  001078                     
  4512                           ; BSR set to: 0
  4513                           ;doprnt.c: 1478: {
  4514                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4515                           
  4516                           ; BSR set to: 0
  4517  001078  5169               	movf	sprintf@prec& (0+255),w,b
  4518  00107A  0D02               	mullw	2
  4519  00107C  0E35               	movlw	low _dpowers
  4520  00107E  24F3               	addwf	prodl,w,c
  4521  001080  6EF6               	movwf	tblptrl,c
  4522  001082  0E03               	movlw	high _dpowers
  4523  001084  20F4               	addwfc	prodh,w,c
  4524  001086  6EF7               	movwf	tblptrh,c
  4525  001088                     	if	0	;There are less than 3 active tblptr bytes
  4526  001088                     	endif
  4527  001088  0009               	tblrd		*+
  4528  00108A  CFF5 F02A          	movff	tablat,___lwdiv@divisor
  4529  00108E  000A               	tblrd		*-
  4530  001090  CFF5 F02B          	movff	tablat,___lwdiv@divisor+1
  4531  001094  C06A  F028         	movff	sprintf@val,___lwdiv@dividend
  4532  001098  C06B  F029         	movff	sprintf@val+1,___lwdiv@dividend+1
  4533  00109C  ECF6  F00D         	call	___lwdiv	;wreg free
  4534  0010A0  C028  F02F         	movff	?___lwdiv,___lwmod@dividend
  4535  0010A4  C029  F030         	movff	?___lwdiv+1,___lwmod@dividend+1
  4536  0010A8  0E00               	movlw	0
  4537  0010AA  6E32               	movwf	___lwmod@divisor+1,c
  4538  0010AC  0E0A               	movlw	10
  4539  0010AE  6E31               	movwf	___lwmod@divisor,c
  4540  0010B0  EC40  F00E         	call	___lwmod	;wreg free
  4541  0010B4  502F               	movf	?___lwmod,w,c
  4542  0010B6  0F30               	addlw	48
  4543  0010B8  0100               	movlb	0	; () banked
  4544  0010BA  6F6C               	movwf	sprintf@c& (0+255),b
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;doprnt.c: 1523: }
  4548                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4549  0010BC  C060  FFD9         	movff	sprintf@sp,fsr2l
  4550  0010C0  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4551  0010C4  C06C  FFDF         	movff	sprintf@c,indf2
  4552                           
  4553                           ; BSR set to: 0
  4554  0010C8  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4555  0010CA  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4556  0010CC                     l146:
  4557                           
  4558                           ; BSR set to: 0
  4559                           
  4560                           ; BSR set to: 0
  4561  0010CC  0769               	decf	sprintf@prec& (0+255),f,b
  4562  0010CE  2969               	incf	sprintf@prec& (0+255),w,b
  4563  0010D0  A4D8               	btfss	status,2,c
  4564  0010D2  D7D2               	goto	l147
  4565  0010D4                     u1880:
  4566                           
  4567                           ; BSR set to: 0
  4568                           
  4569                           ; BSR set to: 0
  4570                           
  4571                           ; BSR set to: 0
  4572  0010D4  C062  FFF6         	movff	sprintf@f,tblptrl
  4573  0010D8  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4574  0010DC  4B62               	infsnz	sprintf@f& (0+255),f,b
  4575  0010DE  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4576  0010E0                     	if	0	;tblptru may be non-zero
  4577  0010E0                     	endif
  4578  0010E0                     	if	0	;tblptru may be non-zero
  4579  0010E0                     	endif
  4580  0010E0  0008               	tblrd		*
  4581  0010E2  CFF5 F06C          	movff	tablat,sprintf@c
  4582  0010E6  516C               	movf	sprintf@c& (0+255),w,b
  4583  0010E8  A4D8               	btfss	status,2,c
  4584  0010EA  D767               	goto	l132
  4585  0010EC                     u1890:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;doprnt.c: 1538: *sp = 0;
  4589                           
  4590                           ; BSR set to: 0
  4591                           
  4592                           ;doprnt.c: 1525: }
  4593                           ;doprnt.c: 1533: }
  4594                           ;doprnt.c: 1535: alldone:
  4595                           
  4596                           ; BSR set to: 0
  4597  0010EC  C060  FFD9         	movff	sprintf@sp,fsr2l
  4598  0010F0  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4599  0010F4  0E00               	movlw	0
  4600  0010F6  6EDF               	movwf	indf2,c
  4601  0010F8  0012               	return	
  4602  0010FA                     __end_of_sprintf:
  4603                           	opt stack 0
  4604                           tblptru	equ	0xFF8
  4605                           tblptrh	equ	0xFF7
  4606                           tblptrl	equ	0xFF6
  4607                           tablat	equ	0xFF5
  4608                           prodh	equ	0xFF4
  4609                           prodl	equ	0xFF3
  4610                           postinc0	equ	0xFEE
  4611                           wreg	equ	0xFE8
  4612                           indf1	equ	0xFE7
  4613                           postdec1	equ	0xFE5
  4614                           fsr1h	equ	0xFE2
  4615                           fsr1l	equ	0xFE1
  4616                           indf2	equ	0xFDF
  4617                           postinc2	equ	0xFDE
  4618                           postdec2	equ	0xFDD
  4619                           plusw2	equ	0xFDB
  4620                           fsr2h	equ	0xFDA
  4621                           fsr2l	equ	0xFD9
  4622                           status	equ	0xFD8
  4623                           
  4624 ;; *************** function ___lwmod *****************
  4625 ;; Defined at:
  4626 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;  dividend        2   46[COMRAM] unsigned int 
  4629 ;;  divisor         2   48[COMRAM] unsigned int 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  counter         1   50[COMRAM] unsigned char 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;                  2   46[COMRAM] unsigned int 
  4634 ;; Registers used:
  4635 ;;		wreg, status,2, status,0
  4636 ;; Tracked objects:
  4637 ;;		On entry : 0/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4641 ;;      Params:         4       0       0       0
  4642 ;;      Locals:         1       0       0       0
  4643 ;;      Temps:          0       0       0       0
  4644 ;;      Totals:         5       0       0       0
  4645 ;;Total ram usage:        5 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; Hardware stack levels required when called:    2
  4648 ;; This function calls:
  4649 ;;		Nothing
  4650 ;; This function is called by:
  4651 ;;		_sprintf
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text20
  4656  001C80                     __ptext20:
  4657                           	opt stack 0
  4658  001C80                     ___lwmod:
  4659                           	opt stack 26
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;incstack = 0
  4663  001C80  5031               	movf	___lwmod@divisor,w,c
  4664  001C82  1032               	iorwf	___lwmod@divisor+1,w,c
  4665  001C84  B4D8               	btfsc	status,2,c
  4666  001C86  D018               	goto	l575
  4667  001C88  0E01               	movlw	1
  4668  001C8A  6E33               	movwf	___lwmod@counter,c
  4669  001C8C  D004               	goto	l570
  4670  001C8E  90D8               	bcf	status,0,c
  4671  001C90  3631               	rlcf	___lwmod@divisor,f,c
  4672  001C92  3632               	rlcf	___lwmod@divisor+1,f,c
  4673  001C94  2A33               	incf	___lwmod@counter,f,c
  4674  001C96                     l570:
  4675  001C96  AE32               	btfss	___lwmod@divisor+1,7,c
  4676  001C98  D7FA               	goto	l571
  4677  001C9A                     u1640:
  4678  001C9A  5031               	movf	___lwmod@divisor,w,c
  4679  001C9C  5C2F               	subwf	___lwmod@dividend,w,c
  4680  001C9E  5032               	movf	___lwmod@divisor+1,w,c
  4681  001CA0  5830               	subwfb	___lwmod@dividend+1,w,c
  4682  001CA2  A0D8               	btfss	status,0,c
  4683  001CA4  D004               	goto	l574
  4684  001CA6  5031               	movf	___lwmod@divisor,w,c
  4685  001CA8  5E2F               	subwf	___lwmod@dividend,f,c
  4686  001CAA  5032               	movf	___lwmod@divisor+1,w,c
  4687  001CAC  5A30               	subwfb	___lwmod@dividend+1,f,c
  4688  001CAE                     l574:
  4689  001CAE  90D8               	bcf	status,0,c
  4690  001CB0  3232               	rrcf	___lwmod@divisor+1,f,c
  4691  001CB2  3231               	rrcf	___lwmod@divisor,f,c
  4692  001CB4  2E33               	decfsz	___lwmod@counter,f,c
  4693  001CB6  D7F1               	goto	u1640
  4694  001CB8                     l575:
  4695  001CB8  C02F  F02F         	movff	___lwmod@dividend,?___lwmod
  4696  001CBC  C030  F030         	movff	___lwmod@dividend+1,?___lwmod+1
  4697  001CC0  0012               	return		;funcret
  4698  001CC2                     __end_of___lwmod:
  4699                           	opt stack 0
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           prodh	equ	0xFF4
  4705                           prodl	equ	0xFF3
  4706                           postinc0	equ	0xFEE
  4707                           wreg	equ	0xFE8
  4708                           indf1	equ	0xFE7
  4709                           postdec1	equ	0xFE5
  4710                           fsr1h	equ	0xFE2
  4711                           fsr1l	equ	0xFE1
  4712                           indf2	equ	0xFDF
  4713                           postinc2	equ	0xFDE
  4714                           postdec2	equ	0xFDD
  4715                           plusw2	equ	0xFDB
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function ___lwdiv *****************
  4721 ;; Defined at:
  4722 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  dividend        2   39[COMRAM] unsigned int 
  4725 ;;  divisor         2   41[COMRAM] unsigned int 
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;  quotient        2   43[COMRAM] unsigned int 
  4728 ;;  counter         1   45[COMRAM] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  2   39[COMRAM] unsigned int 
  4731 ;; Registers used:
  4732 ;;		wreg, status,2, status,0
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4738 ;;      Params:         4       0       0       0
  4739 ;;      Locals:         3       0       0       0
  4740 ;;      Temps:          0       0       0       0
  4741 ;;      Totals:         7       0       0       0
  4742 ;;Total ram usage:        7 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    2
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		_sprintf
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           	psect	text21
  4753  001BEC                     __ptext21:
  4754                           	opt stack 0
  4755  001BEC                     ___lwdiv:
  4756                           	opt stack 26
  4757                           
  4758                           ;incstack = 0
  4759  001BEC  0E00               	movlw	0
  4760  001BEE  6E2D               	movwf	___lwdiv@quotient+1,c
  4761  001BF0  0E00               	movlw	0
  4762  001BF2  6E2C               	movwf	___lwdiv@quotient,c
  4763  001BF4  502A               	movf	___lwdiv@divisor,w,c
  4764  001BF6  102B               	iorwf	___lwdiv@divisor+1,w,c
  4765  001BF8  B4D8               	btfsc	status,2,c
  4766  001BFA  D01C               	goto	l565
  4767  001BFC  0E01               	movlw	1
  4768  001BFE  6E2E               	movwf	___lwdiv@counter,c
  4769  001C00  D004               	goto	l560
  4770  001C02  90D8               	bcf	status,0,c
  4771  001C04  362A               	rlcf	___lwdiv@divisor,f,c
  4772  001C06  362B               	rlcf	___lwdiv@divisor+1,f,c
  4773  001C08  2A2E               	incf	___lwdiv@counter,f,c
  4774  001C0A                     l560:
  4775  001C0A  AE2B               	btfss	___lwdiv@divisor+1,7,c
  4776  001C0C  D7FA               	goto	l561
  4777  001C0E                     u1610:
  4778  001C0E  90D8               	bcf	status,0,c
  4779  001C10  362C               	rlcf	___lwdiv@quotient,f,c
  4780  001C12  362D               	rlcf	___lwdiv@quotient+1,f,c
  4781  001C14  502A               	movf	___lwdiv@divisor,w,c
  4782  001C16  5C28               	subwf	___lwdiv@dividend,w,c
  4783  001C18  502B               	movf	___lwdiv@divisor+1,w,c
  4784  001C1A  5829               	subwfb	___lwdiv@dividend+1,w,c
  4785  001C1C  A0D8               	btfss	status,0,c
  4786  001C1E  D005               	goto	l564
  4787  001C20  502A               	movf	___lwdiv@divisor,w,c
  4788  001C22  5E28               	subwf	___lwdiv@dividend,f,c
  4789  001C24  502B               	movf	___lwdiv@divisor+1,w,c
  4790  001C26  5A29               	subwfb	___lwdiv@dividend+1,f,c
  4791  001C28  802C               	bsf	___lwdiv@quotient,0,c
  4792  001C2A                     l564:
  4793  001C2A  90D8               	bcf	status,0,c
  4794  001C2C  322B               	rrcf	___lwdiv@divisor+1,f,c
  4795  001C2E  322A               	rrcf	___lwdiv@divisor,f,c
  4796  001C30  2E2E               	decfsz	___lwdiv@counter,f,c
  4797  001C32  D7ED               	goto	u1610
  4798  001C34                     l565:
  4799  001C34  C02C  F028         	movff	___lwdiv@quotient,?___lwdiv
  4800  001C38  C02D  F029         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4801  001C3C  0012               	return		;funcret
  4802  001C3E                     __end_of___lwdiv:
  4803                           	opt stack 0
  4804                           tblptru	equ	0xFF8
  4805                           tblptrh	equ	0xFF7
  4806                           tblptrl	equ	0xFF6
  4807                           tablat	equ	0xFF5
  4808                           prodh	equ	0xFF4
  4809                           prodl	equ	0xFF3
  4810                           postinc0	equ	0xFEE
  4811                           wreg	equ	0xFE8
  4812                           indf1	equ	0xFE7
  4813                           postdec1	equ	0xFE5
  4814                           fsr1h	equ	0xFE2
  4815                           fsr1l	equ	0xFE1
  4816                           indf2	equ	0xFDF
  4817                           postinc2	equ	0xFDE
  4818                           postdec2	equ	0xFDD
  4819                           plusw2	equ	0xFDB
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function ___wmul *****************
  4825 ;; Defined at:
  4826 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  multiplier      2   39[COMRAM] unsigned int 
  4829 ;;  multiplicand    2   41[COMRAM] unsigned int 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;  product         2   43[COMRAM] unsigned int 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  2   39[COMRAM] unsigned int 
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0, prodl, prodh
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4841 ;;      Params:         4       0       0       0
  4842 ;;      Locals:         2       0       0       0
  4843 ;;      Temps:          0       0       0       0
  4844 ;;      Totals:         6       0       0       0
  4845 ;;Total ram usage:        6 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    2
  4848 ;; This function calls:
  4849 ;;		Nothing
  4850 ;; This function is called by:
  4851 ;;		_FillServoPositionString
  4852 ;;		_InitServos
  4853 ;;		_RotatePositions
  4854 ;;		_eval_poly
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           	psect	text22
  4859  001D8E                     __ptext22:
  4860                           	opt stack 0
  4861  001D8E                     ___wmul:
  4862                           	opt stack 26
  4863                           
  4864                           ;incstack = 0
  4865  001D8E  5028               	movf	___wmul@multiplier,w,c
  4866  001D90  022A               	mulwf	___wmul@multiplicand,c
  4867  001D92  CFF3 F02C          	movff	prodl,___wmul@product
  4868  001D96  CFF4 F02D          	movff	prodh,___wmul@product+1
  4869  001D9A  5028               	movf	___wmul@multiplier,w,c
  4870  001D9C  022B               	mulwf	___wmul@multiplicand+1,c
  4871  001D9E  50F3               	movf	prodl,w,c
  4872  001DA0  262D               	addwf	___wmul@product+1,f,c
  4873  001DA2  5029               	movf	___wmul@multiplier+1,w,c
  4874  001DA4  022A               	mulwf	___wmul@multiplicand,c
  4875  001DA6  50F3               	movf	prodl,w,c
  4876  001DA8  262D               	addwf	___wmul@product+1,f,c
  4877  001DAA  C02C  F028         	movff	___wmul@product,?___wmul
  4878  001DAE  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  4879  001DB2  0012               	return	
  4880  001DB4                     __end_of___wmul:
  4881                           	opt stack 0
  4882                           tblptru	equ	0xFF8
  4883                           tblptrh	equ	0xFF7
  4884                           tblptrl	equ	0xFF6
  4885                           tablat	equ	0xFF5
  4886                           prodh	equ	0xFF4
  4887                           prodl	equ	0xFF3
  4888                           postinc0	equ	0xFEE
  4889                           wreg	equ	0xFE8
  4890                           indf1	equ	0xFE7
  4891                           postdec1	equ	0xFE5
  4892                           fsr1h	equ	0xFE2
  4893                           fsr1l	equ	0xFE1
  4894                           indf2	equ	0xFDF
  4895                           postinc2	equ	0xFDE
  4896                           postdec2	equ	0xFDD
  4897                           plusw2	equ	0xFDB
  4898                           fsr2h	equ	0xFDA
  4899                           fsr2l	equ	0xFD9
  4900                           status	equ	0xFD8
  4901                           
  4902 ;; *************** function ___fttol *****************
  4903 ;; Defined at:
  4904 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  f1              3   27[BANK0 ] float 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  lval            4   37[BANK0 ] unsigned long 
  4909 ;;  exp1            1   41[BANK0 ] unsigned char 
  4910 ;;  sign1           1   36[BANK0 ] unsigned char 
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  4   27[BANK0 ] long 
  4913 ;; Registers used:
  4914 ;;		wreg, status,2, status,0
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4920 ;;      Params:         0       4       0       0
  4921 ;;      Locals:         0       6       0       0
  4922 ;;      Temps:          0       5       0       0
  4923 ;;      Totals:         0      15       0       0
  4924 ;;Total ram usage:       15 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    2
  4927 ;; This function calls:
  4928 ;;		Nothing
  4929 ;; This function is called by:
  4930 ;;		_FillServoPositionString
  4931 ;;		_floor
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           	psect	text23
  4936  0010FA                     __ptext23:
  4937                           	opt stack 0
  4938  0010FA                     ___fttol:
  4939                           	opt stack 26
  4940                           
  4941                           ;incstack = 0
  4942  0010FA  C07D  F07F         	movff	___fttol@f1+2,??___fttol
  4943  0010FE  0100               	movlb	0	; () banked
  4944  001100  6B80               	clrf	(??___fttol+1)& (0+255),b
  4945  001102  6B81               	clrf	(??___fttol+2)& (0+255),b
  4946  001104  357C               	rlcf	(___fttol@f1+1)& (0+255),w,b
  4947  001106  377F               	rlcf	??___fttol& (0+255),f,b
  4948  001108  E301               	bnc	u1401
  4949  00110A  8180               	bsf	(??___fttol+1)& (0+255),0,b
  4950  00110C                     u1401:
  4951  00110C  517F               	movf	??___fttol& (0+255),w,b
  4952  00110E  6F89               	movwf	___fttol@exp1& (0+255),b
  4953  001110  5189               	movf	___fttol@exp1& (0+255),w,b
  4954  001112  A4D8               	btfss	status,2,c
  4955  001114  D009               	goto	l471
  4956                           
  4957                           ; BSR set to: 0
  4958  001116  0E00               	movlw	0
  4959  001118  6F7B               	movwf	?___fttol& (0+255),b
  4960  00111A  0E00               	movlw	0
  4961  00111C  6F7C               	movwf	(?___fttol+1)& (0+255),b
  4962  00111E  0E00               	movlw	0
  4963  001120  6F7D               	movwf	(?___fttol+2)& (0+255),b
  4964  001122  0E00               	movlw	0
  4965  001124  6F7E               	movwf	(?___fttol+3)& (0+255),b
  4966                           
  4967                           ; BSR set to: 0
  4968  001126  0012               	return	
  4969  001128                     l471:
  4970                           
  4971                           ; BSR set to: 0
  4972                           
  4973                           ; BSR set to: 0
  4974  001128  0E17               	movlw	23
  4975  00112A  6F7F               	movwf	??___fttol& (0+255),b
  4976  00112C  C07B  F080         	movff	___fttol@f1,??___fttol+1
  4977  001130  C07C  F081         	movff	___fttol@f1+1,??___fttol+2
  4978  001134  C07D  F082         	movff	___fttol@f1+2,??___fttol+3
  4979  001138  297F               	incf	??___fttol& (0+255),w,b
  4980  00113A  6F83               	movwf	(??___fttol+4)& (0+255),b
  4981  00113C  D004               	goto	u1420
  4982  00113E                     u1425:
  4983  00113E  90D8               	bcf	status,0,c
  4984  001140  3382               	rrcf	(??___fttol+3)& (0+255),f,b
  4985  001142  3381               	rrcf	(??___fttol+2)& (0+255),f,b
  4986  001144  3380               	rrcf	(??___fttol+1)& (0+255),f,b
  4987  001146                     u1420:
  4988  001146  2F83               	decfsz	(??___fttol+4)& (0+255),f,b
  4989  001148  D7FA               	goto	u1425
  4990  00114A  0100               	movlb	0	; () banked
  4991  00114C  5180               	movf	(??___fttol+1)& (0+255),w,b
  4992  00114E  6F84               	movwf	___fttol@sign1& (0+255),b
  4993                           
  4994                           ; BSR set to: 0
  4995  001150  8F7C               	bsf	(___fttol@f1+1)& (0+255),7,b
  4996                           
  4997                           ; BSR set to: 0
  4998  001152  0EFF               	movlw	255
  4999  001154  177B               	andwf	___fttol@f1& (0+255),f,b
  5000  001156  0EFF               	movlw	255
  5001  001158  177C               	andwf	(___fttol@f1+1)& (0+255),f,b
  5002  00115A  0E00               	movlw	0
  5003  00115C  177D               	andwf	(___fttol@f1+2)& (0+255),f,b
  5004                           
  5005                           ; BSR set to: 0
  5006  00115E  517B               	movf	___fttol@f1& (0+255),w,b
  5007  001160  6F85               	movwf	___fttol@lval& (0+255),b
  5008  001162  517C               	movf	(___fttol@f1+1)& (0+255),w,b
  5009  001164  6F86               	movwf	(___fttol@lval+1)& (0+255),b
  5010  001166  517D               	movf	(___fttol@f1+2)& (0+255),w,b
  5011  001168  6F87               	movwf	(___fttol@lval+2)& (0+255),b
  5012  00116A  6B88               	clrf	(___fttol@lval+3)& (0+255),b
  5013                           
  5014                           ; BSR set to: 0
  5015  00116C  0E8E               	movlw	142
  5016  00116E  5F89               	subwf	___fttol@exp1& (0+255),f,b
  5017                           
  5018                           ; BSR set to: 0
  5019  001170  AF89               	btfss	___fttol@exp1& (0+255),7,b
  5020  001172  D016               	goto	l473
  5021                           
  5022                           ; BSR set to: 0
  5023  001174  5189               	movf	___fttol@exp1& (0+255),w,b
  5024  001176  0A80               	xorlw	128
  5025  001178  0F8F               	addlw	143
  5026  00117A  B0D8               	btfsc	status,0,c
  5027  00117C  D009               	goto	l474
  5028                           
  5029                           ; BSR set to: 0
  5030  00117E  0E00               	movlw	0
  5031  001180  6F7B               	movwf	?___fttol& (0+255),b
  5032  001182  0E00               	movlw	0
  5033  001184  6F7C               	movwf	(?___fttol+1)& (0+255),b
  5034  001186  0E00               	movlw	0
  5035  001188  6F7D               	movwf	(?___fttol+2)& (0+255),b
  5036  00118A  0E00               	movlw	0
  5037  00118C  6F7E               	movwf	(?___fttol+3)& (0+255),b
  5038                           
  5039                           ; BSR set to: 0
  5040  00118E  0012               	return	
  5041  001190                     l474:
  5042                           
  5043                           ; BSR set to: 0
  5044                           
  5045                           ; BSR set to: 0
  5046                           
  5047                           ; BSR set to: 0
  5048  001190  90D8               	bcf	status,0,c
  5049  001192  3388               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5050  001194  3387               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5051  001196  3386               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5052  001198  3385               	rrcf	___fttol@lval& (0+255),f,b
  5053                           
  5054                           ; BSR set to: 0
  5055  00119A  3F89               	incfsz	___fttol@exp1& (0+255),f,b
  5056  00119C  D7F9               	goto	l474
  5057                           
  5058                           ; BSR set to: 0
  5059  00119E  D015               	goto	u1460
  5060  0011A0                     l473:
  5061                           
  5062                           ; BSR set to: 0
  5063                           
  5064                           ; BSR set to: 0
  5065  0011A0  0E17               	movlw	23
  5066  0011A2  6589               	cpfsgt	___fttol@exp1& (0+255),b
  5067  0011A4  D00F               	goto	l479
  5068                           
  5069                           ; BSR set to: 0
  5070  0011A6  0E00               	movlw	0
  5071  0011A8  6F7B               	movwf	?___fttol& (0+255),b
  5072  0011AA  0E00               	movlw	0
  5073  0011AC  6F7C               	movwf	(?___fttol+1)& (0+255),b
  5074  0011AE  0E00               	movlw	0
  5075  0011B0  6F7D               	movwf	(?___fttol+2)& (0+255),b
  5076  0011B2  0E00               	movlw	0
  5077  0011B4  6F7E               	movwf	(?___fttol+3)& (0+255),b
  5078                           
  5079                           ; BSR set to: 0
  5080  0011B6  0012               	return	
  5081  0011B8                     
  5082                           ; BSR set to: 0
  5083                           
  5084                           ; BSR set to: 0
  5085  0011B8  90D8               	bcf	status,0,c
  5086  0011BA  3785               	rlcf	___fttol@lval& (0+255),f,b
  5087  0011BC  3786               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5088  0011BE  3787               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5089  0011C0  3788               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5090  0011C2  0789               	decf	___fttol@exp1& (0+255),f,b
  5091  0011C4                     l479:
  5092                           
  5093                           ; BSR set to: 0
  5094                           
  5095                           ; BSR set to: 0
  5096  0011C4  5189               	movf	___fttol@exp1& (0+255),w,b
  5097  0011C6  A4D8               	btfss	status,2,c
  5098  0011C8  D7F7               	goto	l480
  5099  0011CA                     u1460:
  5100                           
  5101                           ; BSR set to: 0
  5102                           
  5103                           ; BSR set to: 0
  5104                           
  5105                           ; BSR set to: 0
  5106  0011CA  5184               	movf	___fttol@sign1& (0+255),w,b
  5107  0011CC  B4D8               	btfsc	status,2,c
  5108  0011CE  D008               	goto	l482
  5109                           
  5110                           ; BSR set to: 0
  5111  0011D0  1F88               	comf	(___fttol@lval+3)& (0+255),f,b
  5112  0011D2  1F87               	comf	(___fttol@lval+2)& (0+255),f,b
  5113  0011D4  1F86               	comf	(___fttol@lval+1)& (0+255),f,b
  5114  0011D6  6D85               	negf	___fttol@lval& (0+255),b
  5115  0011D8  0E00               	movlw	0
  5116  0011DA  2386               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5117  0011DC  2387               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5118  0011DE  2388               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5119  0011E0                     l482:
  5120                           
  5121                           ; BSR set to: 0
  5122                           
  5123                           ; BSR set to: 0
  5124  0011E0  C085  F07B         	movff	___fttol@lval,?___fttol
  5125  0011E4  C086  F07C         	movff	___fttol@lval+1,?___fttol+1
  5126  0011E8  C087  F07D         	movff	___fttol@lval+2,?___fttol+2
  5127  0011EC  C088  F07E         	movff	___fttol@lval+3,?___fttol+3
  5128  0011F0  0012               	return	
  5129  0011F2                     __end_of___fttol:
  5130                           	opt stack 0
  5131                           tblptru	equ	0xFF8
  5132                           tblptrh	equ	0xFF7
  5133                           tblptrl	equ	0xFF6
  5134                           tablat	equ	0xFF5
  5135                           prodh	equ	0xFF4
  5136                           prodl	equ	0xFF3
  5137                           postinc0	equ	0xFEE
  5138                           wreg	equ	0xFE8
  5139                           indf1	equ	0xFE7
  5140                           postdec1	equ	0xFE5
  5141                           fsr1h	equ	0xFE2
  5142                           fsr1l	equ	0xFE1
  5143                           indf2	equ	0xFDF
  5144                           postinc2	equ	0xFDE
  5145                           postdec2	equ	0xFDD
  5146                           plusw2	equ	0xFDB
  5147                           fsr2h	equ	0xFDA
  5148                           fsr2l	equ	0xFD9
  5149                           status	equ	0xFD8
  5150                           
  5151 ;; *************** function ___ftmul *****************
  5152 ;; Defined at:
  5153 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;  f1              3    0[BANK0 ] float 
  5156 ;;  f2              3    3[BANK0 ] float 
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
  5159 ;;  sign            1   14[BANK0 ] unsigned char 
  5160 ;;  cntr            1   13[BANK0 ] unsigned char 
  5161 ;;  exp             1    9[BANK0 ] unsigned char 
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  3    0[BANK0 ] float 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0, cstack
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5171 ;;      Params:         0       6       0       0
  5172 ;;      Locals:         0       6       0       0
  5173 ;;      Temps:          0       3       0       0
  5174 ;;      Totals:         0      15       0       0
  5175 ;;Total ram usage:       15 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    3
  5178 ;; This function calls:
  5179 ;;		___ftpack
  5180 ;; This function is called by:
  5181 ;;		_main
  5182 ;;		_FillServoPositionString
  5183 ;;		_sin
  5184 ;;		_eval_poly
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           	psect	text24
  5189  0011F2                     __ptext24:
  5190                           	opt stack 0
  5191  0011F2                     ___ftmul:
  5192                           	opt stack 25
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;incstack = 0
  5196  0011F2  C062  F066         	movff	___ftmul@f1+2,??___ftmul
  5197  0011F6  0100               	movlb	0	; () banked
  5198  0011F8  6B67               	clrf	(??___ftmul+1)& (0+255),b
  5199  0011FA  6B68               	clrf	(??___ftmul+2)& (0+255),b
  5200  0011FC  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  5201  0011FE  3766               	rlcf	??___ftmul& (0+255),f,b
  5202  001200  E301               	bnc	u2301
  5203  001202  8167               	bsf	(??___ftmul+1)& (0+255),0,b
  5204  001204                     u2301:
  5205  001204  5166               	movf	??___ftmul& (0+255),w,b
  5206  001206  6F69               	movwf	___ftmul@exp& (0+255),b
  5207  001208  5169               	movf	___ftmul@exp& (0+255),w,b
  5208  00120A  A4D8               	btfss	status,2,c
  5209  00120C  D007               	goto	l450
  5210                           
  5211                           ; BSR set to: 0
  5212  00120E  0E00               	movlw	0
  5213  001210  6F60               	movwf	?___ftmul& (0+255),b
  5214  001212  0E00               	movlw	0
  5215  001214  6F61               	movwf	(?___ftmul+1)& (0+255),b
  5216  001216  0E00               	movlw	0
  5217  001218  6F62               	movwf	(?___ftmul+2)& (0+255),b
  5218                           
  5219                           ; BSR set to: 0
  5220  00121A  0012               	return	
  5221  00121C                     l450:
  5222                           
  5223                           ; BSR set to: 0
  5224                           
  5225                           ; BSR set to: 0
  5226  00121C  C065  F066         	movff	___ftmul@f2+2,??___ftmul
  5227  001220  6B67               	clrf	(??___ftmul+1)& (0+255),b
  5228  001222  6B68               	clrf	(??___ftmul+2)& (0+255),b
  5229  001224  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  5230  001226  3766               	rlcf	??___ftmul& (0+255),f,b
  5231  001228  E301               	bnc	u2321
  5232  00122A  8167               	bsf	(??___ftmul+1)& (0+255),0,b
  5233  00122C                     u2321:
  5234  00122C  5166               	movf	??___ftmul& (0+255),w,b
  5235  00122E  6F6E               	movwf	___ftmul@sign& (0+255),b
  5236  001230  516E               	movf	___ftmul@sign& (0+255),w,b
  5237  001232  A4D8               	btfss	status,2,c
  5238  001234  D007               	goto	l452
  5239                           
  5240                           ; BSR set to: 0
  5241  001236  0E00               	movlw	0
  5242  001238  6F60               	movwf	?___ftmul& (0+255),b
  5243  00123A  0E00               	movlw	0
  5244  00123C  6F61               	movwf	(?___ftmul+1)& (0+255),b
  5245  00123E  0E00               	movlw	0
  5246  001240  6F62               	movwf	(?___ftmul+2)& (0+255),b
  5247                           
  5248                           ; BSR set to: 0
  5249  001242  0012               	return	
  5250  001244                     l452:
  5251                           
  5252                           ; BSR set to: 0
  5253                           
  5254                           ; BSR set to: 0
  5255  001244  516E               	movf	___ftmul@sign& (0+255),w,b
  5256  001246  0F7B               	addlw	123
  5257  001248  2769               	addwf	___ftmul@exp& (0+255),f,b
  5258                           
  5259                           ; BSR set to: 0
  5260  00124A  C062  F06E         	movff	___ftmul@f1+2,___ftmul@sign
  5261  00124E  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  5262  001250  1B6E               	xorwf	___ftmul@sign& (0+255),f,b
  5263  001252  0E80               	movlw	128
  5264  001254  176E               	andwf	___ftmul@sign& (0+255),f,b
  5265                           
  5266                           ; BSR set to: 0
  5267  001256  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  5268                           
  5269                           ; BSR set to: 0
  5270  001258  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  5271                           
  5272                           ; BSR set to: 0
  5273  00125A  0EFF               	movlw	255
  5274  00125C  1763               	andwf	___ftmul@f2& (0+255),f,b
  5275  00125E  0EFF               	movlw	255
  5276  001260  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  5277  001262  0E00               	movlw	0
  5278  001264  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  5279                           
  5280                           ; BSR set to: 0
  5281  001266  0E00               	movlw	0
  5282  001268  6F6A               	movwf	___ftmul@f3_as_product& (0+255),b
  5283  00126A  0E00               	movlw	0
  5284  00126C  6F6B               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  5285  00126E  0E00               	movlw	0
  5286  001270  6F6C               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  5287                           
  5288                           ; BSR set to: 0
  5289  001272  0E07               	movlw	7
  5290  001274  6F6D               	movwf	___ftmul@cntr& (0+255),b
  5291  001276                     
  5292                           ; BSR set to: 0
  5293                           
  5294                           ; BSR set to: 0
  5295  001276  A160               	btfss	___ftmul@f1& (0+255),0,b
  5296  001278  D006               	goto	l454
  5297                           
  5298                           ; BSR set to: 0
  5299  00127A  5163               	movf	___ftmul@f2& (0+255),w,b
  5300  00127C  276A               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5301  00127E  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  5302  001280  236B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5303  001282  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  5304  001284  236C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5305  001286                     l454:
  5306                           
  5307                           ; BSR set to: 0
  5308                           
  5309                           ; BSR set to: 0
  5310  001286  90D8               	bcf	status,0,c
  5311  001288  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5312  00128A  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5313  00128C  3360               	rrcf	___ftmul@f1& (0+255),f,b
  5314  00128E  90D8               	bcf	status,0,c
  5315  001290  3763               	rlcf	___ftmul@f2& (0+255),f,b
  5316  001292  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  5317  001294  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  5318                           
  5319                           ; BSR set to: 0
  5320  001296  2F6D               	decfsz	___ftmul@cntr& (0+255),f,b
  5321  001298  D7EE               	goto	l453
  5322                           
  5323                           ; BSR set to: 0
  5324                           
  5325                           ; BSR set to: 0
  5326  00129A  0E09               	movlw	9
  5327  00129C  6F6D               	movwf	___ftmul@cntr& (0+255),b
  5328  00129E                     
  5329                           ; BSR set to: 0
  5330                           
  5331                           ; BSR set to: 0
  5332  00129E  A160               	btfss	___ftmul@f1& (0+255),0,b
  5333  0012A0  D006               	goto	l457
  5334                           
  5335                           ; BSR set to: 0
  5336  0012A2  5163               	movf	___ftmul@f2& (0+255),w,b
  5337  0012A4  276A               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5338  0012A6  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  5339  0012A8  236B               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5340  0012AA  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  5341  0012AC  236C               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5342  0012AE                     l457:
  5343                           
  5344                           ; BSR set to: 0
  5345                           
  5346                           ; BSR set to: 0
  5347  0012AE  90D8               	bcf	status,0,c
  5348  0012B0  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5349  0012B2  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5350  0012B4  3360               	rrcf	___ftmul@f1& (0+255),f,b
  5351  0012B6  90D8               	bcf	status,0,c
  5352  0012B8  336C               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  5353  0012BA  336B               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  5354  0012BC  336A               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  5355                           
  5356                           ; BSR set to: 0
  5357  0012BE  2F6D               	decfsz	___ftmul@cntr& (0+255),f,b
  5358  0012C0  D7EE               	goto	l456
  5359                           
  5360                           ; BSR set to: 0
  5361                           
  5362                           ; BSR set to: 0
  5363  0012C2  C06A  F028         	movff	___ftmul@f3_as_product,___ftpack@arg
  5364  0012C6  C06B  F029         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5365  0012CA  C06C  F02A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5366  0012CE  C069  F02B         	movff	___ftmul@exp,___ftpack@exp
  5367  0012D2  C06E  F02C         	movff	___ftmul@sign,___ftpack@sign
  5368  0012D6  EC7D  F00B         	call	___ftpack	;wreg free
  5369  0012DA  C028  F060         	movff	?___ftpack,?___ftmul
  5370  0012DE  C029  F061         	movff	?___ftpack+1,?___ftmul+1
  5371  0012E2  C02A  F062         	movff	?___ftpack+2,?___ftmul+2
  5372  0012E6  0012               	return	
  5373  0012E8                     __end_of___ftmul:
  5374                           	opt stack 0
  5375                           tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           prodh	equ	0xFF4
  5380                           prodl	equ	0xFF3
  5381                           postinc0	equ	0xFEE
  5382                           wreg	equ	0xFE8
  5383                           indf1	equ	0xFE7
  5384                           postdec1	equ	0xFE5
  5385                           fsr1h	equ	0xFE2
  5386                           fsr1l	equ	0xFE1
  5387                           indf2	equ	0xFDF
  5388                           postinc2	equ	0xFDE
  5389                           postdec2	equ	0xFDD
  5390                           plusw2	equ	0xFDB
  5391                           fsr2h	equ	0xFDA
  5392                           fsr2l	equ	0xFD9
  5393                           status	equ	0xFD8
  5394                           
  5395 ;; *************** function ___ftadd *****************
  5396 ;; Defined at:
  5397 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;  f1              3   15[BANK0 ] float 
  5400 ;;  f2              3   18[BANK0 ] float 
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;  exp1            1   26[BANK0 ] unsigned char 
  5403 ;;  exp2            1   25[BANK0 ] unsigned char 
  5404 ;;  sign            1   24[BANK0 ] unsigned char 
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  3   15[BANK0 ] float 
  5407 ;; Registers used:
  5408 ;;		wreg, status,2, status,0, cstack
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5414 ;;      Params:         0       6       0       0
  5415 ;;      Locals:         0       3       0       0
  5416 ;;      Temps:          0       3       0       0
  5417 ;;      Totals:         0      12       0       0
  5418 ;;Total ram usage:       12 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:    3
  5421 ;; This function calls:
  5422 ;;		___ftpack
  5423 ;; This function is called by:
  5424 ;;		_FillServoPositionString
  5425 ;;		_cos
  5426 ;;		___ftsub
  5427 ;;		_sin
  5428 ;;		_eval_poly
  5429 ;;		_floor
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text25
  5434  000E00                     __ptext25:
  5435                           	opt stack 0
  5436  000E00                     ___ftadd:
  5437                           	opt stack 25
  5438                           
  5439                           ;incstack = 0
  5440  000E00  C071  F075         	movff	___ftadd@f1+2,??___ftadd
  5441  000E04  0100               	movlb	0	; () banked
  5442  000E06  6B76               	clrf	(??___ftadd+1)& (0+255),b
  5443  000E08  6B77               	clrf	(??___ftadd+2)& (0+255),b
  5444  000E0A  3570               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5445  000E0C  3775               	rlcf	??___ftadd& (0+255),f,b
  5446  000E0E  E301               	bnc	u2091
  5447  000E10  8176               	bsf	(??___ftadd+1)& (0+255),0,b
  5448  000E12                     u2091:
  5449  000E12  5175               	movf	??___ftadd& (0+255),w,b
  5450  000E14  6F7A               	movwf	___ftadd@exp1& (0+255),b
  5451  000E16  C074  F075         	movff	___ftadd@f2+2,??___ftadd
  5452  000E1A  6B76               	clrf	(??___ftadd+1)& (0+255),b
  5453  000E1C  6B77               	clrf	(??___ftadd+2)& (0+255),b
  5454  000E1E  3573               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5455  000E20  3775               	rlcf	??___ftadd& (0+255),f,b
  5456  000E22  E301               	bnc	u2101
  5457  000E24  8176               	bsf	(??___ftadd+1)& (0+255),0,b
  5458  000E26                     u2101:
  5459  000E26  5175               	movf	??___ftadd& (0+255),w,b
  5460  000E28  6F79               	movwf	___ftadd@exp2& (0+255),b
  5461                           
  5462                           ; BSR set to: 0
  5463  000E2A  517A               	movf	___ftadd@exp1& (0+255),w,b
  5464  000E2C  B4D8               	btfsc	status,2,c
  5465  000E2E  D00B               	goto	u2130
  5466                           
  5467                           ; BSR set to: 0
  5468  000E30  5179               	movf	___ftadd@exp2& (0+255),w,b
  5469  000E32  5D7A               	subwf	___ftadd@exp1& (0+255),w,b
  5470  000E34  B0D8               	btfsc	status,0,c
  5471  000E36  D00E               	goto	l402
  5472                           
  5473                           ; BSR set to: 0
  5474  000E38  517A               	movf	___ftadd@exp1& (0+255),w,b
  5475  000E3A  0800               	sublw	0
  5476  000E3C  2579               	addwf	___ftadd@exp2& (0+255),w,b
  5477  000E3E  6F75               	movwf	??___ftadd& (0+255),b
  5478  000E40  0E18               	movlw	24
  5479  000E42  6575               	cpfsgt	??___ftadd& (0+255),b
  5480  000E44  D007               	goto	l402
  5481  000E46                     u2130:
  5482                           
  5483                           ; BSR set to: 0
  5484  000E46  C072  F06F         	movff	___ftadd@f2,?___ftadd
  5485  000E4A  C073  F070         	movff	___ftadd@f2+1,?___ftadd+1
  5486  000E4E  C074  F071         	movff	___ftadd@f2+2,?___ftadd+2
  5487  000E52  0012               	return	
  5488  000E54                     l402:
  5489                           
  5490                           ; BSR set to: 0
  5491                           
  5492                           ; BSR set to: 0
  5493  000E54  5179               	movf	___ftadd@exp2& (0+255),w,b
  5494  000E56  B4D8               	btfsc	status,2,c
  5495  000E58  D00B               	goto	u2160
  5496                           
  5497                           ; BSR set to: 0
  5498  000E5A  517A               	movf	___ftadd@exp1& (0+255),w,b
  5499  000E5C  5D79               	subwf	___ftadd@exp2& (0+255),w,b
  5500  000E5E  B0D8               	btfsc	status,0,c
  5501  000E60  D00E               	goto	l406
  5502                           
  5503                           ; BSR set to: 0
  5504  000E62  5179               	movf	___ftadd@exp2& (0+255),w,b
  5505  000E64  0800               	sublw	0
  5506  000E66  257A               	addwf	___ftadd@exp1& (0+255),w,b
  5507  000E68  6F75               	movwf	??___ftadd& (0+255),b
  5508  000E6A  0E18               	movlw	24
  5509  000E6C  6575               	cpfsgt	??___ftadd& (0+255),b
  5510  000E6E  D007               	goto	l406
  5511  000E70                     u2160:
  5512                           
  5513                           ; BSR set to: 0
  5514  000E70  C06F  F06F         	movff	___ftadd@f1,?___ftadd
  5515  000E74  C070  F070         	movff	___ftadd@f1+1,?___ftadd+1
  5516  000E78  C071  F071         	movff	___ftadd@f1+2,?___ftadd+2
  5517  000E7C  0012               	return	
  5518  000E7E                     l406:
  5519                           
  5520                           ; BSR set to: 0
  5521                           
  5522                           ; BSR set to: 0
  5523  000E7E  0E06               	movlw	6
  5524  000E80  6F78               	movwf	___ftadd@sign& (0+255),b
  5525                           
  5526                           ; BSR set to: 0
  5527  000E82  BF71               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  5528                           
  5529                           ; BSR set to: 0
  5530  000E84  8F78               	bsf	___ftadd@sign& (0+255),7,b
  5531                           
  5532                           ; BSR set to: 0
  5533                           
  5534                           ; BSR set to: 0
  5535  000E86  BF74               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  5536                           
  5537                           ; BSR set to: 0
  5538  000E88  8D78               	bsf	___ftadd@sign& (0+255),6,b
  5539                           
  5540                           ; BSR set to: 0
  5541  000E8A  8F70               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5542                           
  5543                           ; BSR set to: 0
  5544  000E8C  0EFF               	movlw	255
  5545  000E8E  176F               	andwf	___ftadd@f1& (0+255),f,b
  5546  000E90  0EFF               	movlw	255
  5547  000E92  1770               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5548  000E94  0E00               	movlw	0
  5549  000E96  1771               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5550  000E98  8F73               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5551                           
  5552                           ; BSR set to: 0
  5553  000E9A  0EFF               	movlw	255
  5554  000E9C  1772               	andwf	___ftadd@f2& (0+255),f,b
  5555  000E9E  0EFF               	movlw	255
  5556  000EA0  1773               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5557  000EA2  0E00               	movlw	0
  5558  000EA4  1774               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5559                           
  5560                           ; BSR set to: 0
  5561  000EA6  5179               	movf	___ftadd@exp2& (0+255),w,b
  5562  000EA8  5D7A               	subwf	___ftadd@exp1& (0+255),w,b
  5563  000EAA  B0D8               	btfsc	status,0,c
  5564  000EAC  D01B               	goto	l411
  5565  000EAE                     u2190:
  5566                           
  5567                           ; BSR set to: 0
  5568                           
  5569                           ; BSR set to: 0
  5570  000EAE  90D8               	bcf	status,0,c
  5571  000EB0  3772               	rlcf	___ftadd@f2& (0+255),f,b
  5572  000EB2  3773               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5573  000EB4  3774               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5574  000EB6  0779               	decf	___ftadd@exp2& (0+255),f,b
  5575                           
  5576                           ; BSR set to: 0
  5577  000EB8  517A               	movf	___ftadd@exp1& (0+255),w,b
  5578  000EBA  1979               	xorwf	___ftadd@exp2& (0+255),w,b
  5579  000EBC  B4D8               	btfsc	status,2,c
  5580  000EBE  D00D               	goto	l416
  5581                           
  5582                           ; BSR set to: 0
  5583  000EC0  0778               	decf	___ftadd@sign& (0+255),f,b
  5584  000EC2  C078  F075         	movff	___ftadd@sign,??___ftadd
  5585  000EC6  0E07               	movlw	7
  5586  000EC8  1775               	andwf	??___ftadd& (0+255),f,b
  5587  000ECA  B4D8               	btfsc	status,2,c
  5588  000ECC  D006               	goto	l416
  5589  000ECE  D7EF               	goto	u2190
  5590  000ED0                     
  5591                           ; BSR set to: 0
  5592                           
  5593                           ; BSR set to: 0
  5594  000ED0  90D8               	bcf	status,0,c
  5595  000ED2  3371               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  5596  000ED4  3370               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  5597  000ED6  336F               	rrcf	___ftadd@f1& (0+255),f,b
  5598  000ED8  2B7A               	incf	___ftadd@exp1& (0+255),f,b
  5599  000EDA                     l416:
  5600                           
  5601                           ; BSR set to: 0
  5602                           
  5603                           ; BSR set to: 0
  5604  000EDA  5179               	movf	___ftadd@exp2& (0+255),w,b
  5605  000EDC  197A               	xorwf	___ftadd@exp1& (0+255),w,b
  5606  000EDE  B4D8               	btfsc	status,2,c
  5607  000EE0  D01F               	goto	u2260
  5608  000EE2  D7F6               	goto	l417
  5609  000EE4                     l411:
  5610                           
  5611                           ; BSR set to: 0
  5612                           
  5613                           ; BSR set to: 0
  5614  000EE4  517A               	movf	___ftadd@exp1& (0+255),w,b
  5615  000EE6  5D79               	subwf	___ftadd@exp2& (0+255),w,b
  5616  000EE8  B0D8               	btfsc	status,0,c
  5617  000EEA  D01A               	goto	u2260
  5618  000EEC                     u2230:
  5619                           
  5620                           ; BSR set to: 0
  5621                           
  5622                           ; BSR set to: 0
  5623  000EEC  90D8               	bcf	status,0,c
  5624  000EEE  376F               	rlcf	___ftadd@f1& (0+255),f,b
  5625  000EF0  3770               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  5626  000EF2  3771               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  5627  000EF4  077A               	decf	___ftadd@exp1& (0+255),f,b
  5628                           
  5629                           ; BSR set to: 0
  5630  000EF6  517A               	movf	___ftadd@exp1& (0+255),w,b
  5631  000EF8  1979               	xorwf	___ftadd@exp2& (0+255),w,b
  5632  000EFA  B4D8               	btfsc	status,2,c
  5633  000EFC  D00D               	goto	l425
  5634                           
  5635                           ; BSR set to: 0
  5636  000EFE  0778               	decf	___ftadd@sign& (0+255),f,b
  5637  000F00  C078  F075         	movff	___ftadd@sign,??___ftadd
  5638  000F04  0E07               	movlw	7
  5639  000F06  1775               	andwf	??___ftadd& (0+255),f,b
  5640  000F08  B4D8               	btfsc	status,2,c
  5641  000F0A  D006               	goto	l425
  5642  000F0C  D7EF               	goto	u2230
  5643  000F0E                     
  5644                           ; BSR set to: 0
  5645                           
  5646                           ; BSR set to: 0
  5647  000F0E  90D8               	bcf	status,0,c
  5648  000F10  3374               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  5649  000F12  3373               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  5650  000F14  3372               	rrcf	___ftadd@f2& (0+255),f,b
  5651  000F16  2B79               	incf	___ftadd@exp2& (0+255),f,b
  5652  000F18                     l425:
  5653                           
  5654                           ; BSR set to: 0
  5655                           
  5656                           ; BSR set to: 0
  5657  000F18  5179               	movf	___ftadd@exp2& (0+255),w,b
  5658  000F1A  197A               	xorwf	___ftadd@exp1& (0+255),w,b
  5659  000F1C  A4D8               	btfss	status,2,c
  5660  000F1E  D7F7               	goto	l426
  5661  000F20                     u2260:
  5662                           
  5663                           ; BSR set to: 0
  5664                           
  5665                           ; BSR set to: 0
  5666                           
  5667                           ; BSR set to: 0
  5668  000F20  AF78               	btfss	___ftadd@sign& (0+255),7,b
  5669  000F22  D00C               	goto	l428
  5670                           
  5671                           ; BSR set to: 0
  5672  000F24  0EFF               	movlw	255
  5673  000F26  1B6F               	xorwf	___ftadd@f1& (0+255),f,b
  5674  000F28  0EFF               	movlw	255
  5675  000F2A  1B70               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  5676  000F2C  0EFF               	movlw	255
  5677  000F2E  1B71               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  5678  000F30  0E01               	movlw	1
  5679  000F32  276F               	addwf	___ftadd@f1& (0+255),f,b
  5680  000F34  0E00               	movlw	0
  5681  000F36  2370               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  5682  000F38  0E00               	movlw	0
  5683  000F3A  2371               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  5684  000F3C                     l428:
  5685                           
  5686                           ; BSR set to: 0
  5687  000F3C  AD78               	btfss	___ftadd@sign& (0+255),6,b
  5688  000F3E  D00C               	goto	l429
  5689                           
  5690                           ; BSR set to: 0
  5691  000F40  0EFF               	movlw	255
  5692  000F42  1B72               	xorwf	___ftadd@f2& (0+255),f,b
  5693  000F44  0EFF               	movlw	255
  5694  000F46  1B73               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5695  000F48  0EFF               	movlw	255
  5696  000F4A  1B74               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5697  000F4C  0E01               	movlw	1
  5698  000F4E  2772               	addwf	___ftadd@f2& (0+255),f,b
  5699  000F50  0E00               	movlw	0
  5700  000F52  2373               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5701  000F54  0E00               	movlw	0
  5702  000F56  2374               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5703  000F58                     l429:
  5704                           
  5705                           ; BSR set to: 0
  5706                           
  5707                           ; BSR set to: 0
  5708  000F58  0E00               	movlw	0
  5709  000F5A  6F78               	movwf	___ftadd@sign& (0+255),b
  5710                           
  5711                           ; BSR set to: 0
  5712  000F5C  516F               	movf	___ftadd@f1& (0+255),w,b
  5713  000F5E  2772               	addwf	___ftadd@f2& (0+255),f,b
  5714  000F60  5170               	movf	(___ftadd@f1+1)& (0+255),w,b
  5715  000F62  2373               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5716  000F64  5171               	movf	(___ftadd@f1+2)& (0+255),w,b
  5717  000F66  2374               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5718                           
  5719                           ; BSR set to: 0
  5720  000F68  AF74               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5721  000F6A  D00E               	goto	l430
  5722                           
  5723                           ; BSR set to: 0
  5724  000F6C  0EFF               	movlw	255
  5725  000F6E  1B72               	xorwf	___ftadd@f2& (0+255),f,b
  5726  000F70  0EFF               	movlw	255
  5727  000F72  1B73               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  5728  000F74  0EFF               	movlw	255
  5729  000F76  1B74               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  5730  000F78  0E01               	movlw	1
  5731  000F7A  2772               	addwf	___ftadd@f2& (0+255),f,b
  5732  000F7C  0E00               	movlw	0
  5733  000F7E  2373               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  5734  000F80  0E00               	movlw	0
  5735  000F82  2374               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  5736                           
  5737                           ; BSR set to: 0
  5738  000F84  0E01               	movlw	1
  5739  000F86  6F78               	movwf	___ftadd@sign& (0+255),b
  5740  000F88                     l430:
  5741                           
  5742                           ; BSR set to: 0
  5743                           
  5744                           ; BSR set to: 0
  5745  000F88  C072  F028         	movff	___ftadd@f2,___ftpack@arg
  5746  000F8C  C073  F029         	movff	___ftadd@f2+1,___ftpack@arg+1
  5747  000F90  C074  F02A         	movff	___ftadd@f2+2,___ftpack@arg+2
  5748  000F94  C07A  F02B         	movff	___ftadd@exp1,___ftpack@exp
  5749  000F98  C078  F02C         	movff	___ftadd@sign,___ftpack@sign
  5750  000F9C  EC7D  F00B         	call	___ftpack	;wreg free
  5751  000FA0  C028  F06F         	movff	?___ftpack,?___ftadd
  5752  000FA4  C029  F070         	movff	?___ftpack+1,?___ftadd+1
  5753  000FA8  C02A  F071         	movff	?___ftpack+2,?___ftadd+2
  5754  000FAC  0012               	return	
  5755  000FAE                     __end_of___ftadd:
  5756                           	opt stack 0
  5757                           tblptru	equ	0xFF8
  5758                           tblptrh	equ	0xFF7
  5759                           tblptrl	equ	0xFF6
  5760                           tablat	equ	0xFF5
  5761                           prodh	equ	0xFF4
  5762                           prodl	equ	0xFF3
  5763                           postinc0	equ	0xFEE
  5764                           wreg	equ	0xFE8
  5765                           indf1	equ	0xFE7
  5766                           postdec1	equ	0xFE5
  5767                           fsr1h	equ	0xFE2
  5768                           fsr1l	equ	0xFE1
  5769                           indf2	equ	0xFDF
  5770                           postinc2	equ	0xFDE
  5771                           postdec2	equ	0xFDD
  5772                           plusw2	equ	0xFDB
  5773                           fsr2h	equ	0xFDA
  5774                           fsr2l	equ	0xFD9
  5775                           status	equ	0xFD8
  5776                           
  5777 ;; *************** function ___awtoft *****************
  5778 ;; Defined at:
  5779 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;  c               2   47[COMRAM] int 
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;  sign            1   50[COMRAM] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  3   47[COMRAM] float 
  5786 ;; Registers used:
  5787 ;;		wreg, status,2, status,0, cstack
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5793 ;;      Params:         3       0       0       0
  5794 ;;      Locals:         1       0       0       0
  5795 ;;      Temps:          0       0       0       0
  5796 ;;      Totals:         4       0       0       0
  5797 ;;Total ram usage:        4 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    3
  5800 ;; This function calls:
  5801 ;;		___ftpack
  5802 ;; This function is called by:
  5803 ;;		_FillServoPositionString
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text26
  5808  001CFC                     __ptext26:
  5809                           	opt stack 0
  5810  001CFC                     ___awtoft:
  5811                           	opt stack 26
  5812                           
  5813                           ;incstack = 0
  5814  001CFC  0E00               	movlw	0
  5815  001CFE  6E33               	movwf	___awtoft@sign,c
  5816  001D00  AE31               	btfss	___awtoft@c+1,7,c
  5817  001D02  D006               	goto	l346
  5818  001D04  6C30               	negf	___awtoft@c,c
  5819  001D06  1E31               	comf	___awtoft@c+1,f,c
  5820  001D08  B0D8               	btfsc	status,0,c
  5821  001D0A  2A31               	incf	___awtoft@c+1,f,c
  5822  001D0C  0E01               	movlw	1
  5823  001D0E  6E33               	movwf	___awtoft@sign,c
  5824  001D10                     l346:
  5825  001D10  C030  F028         	movff	___awtoft@c,___ftpack@arg
  5826  001D14  C031  F029         	movff	___awtoft@c+1,___ftpack@arg+1
  5827  001D18  6A2A               	clrf	___ftpack@arg+2,c
  5828  001D1A  0E8E               	movlw	142
  5829  001D1C  6E2B               	movwf	___ftpack@exp,c
  5830  001D1E  C033  F02C         	movff	___awtoft@sign,___ftpack@sign
  5831  001D22  EC7D  F00B         	call	___ftpack	;wreg free
  5832  001D26  C028  F030         	movff	?___ftpack,?___awtoft
  5833  001D2A  C029  F031         	movff	?___ftpack+1,?___awtoft+1
  5834  001D2E  C02A  F032         	movff	?___ftpack+2,?___awtoft+2
  5835  001D32  0012               	return	
  5836  001D34                     __end_of___awtoft:
  5837                           	opt stack 0
  5838                           tblptru	equ	0xFF8
  5839                           tblptrh	equ	0xFF7
  5840                           tblptrl	equ	0xFF6
  5841                           tablat	equ	0xFF5
  5842                           prodh	equ	0xFF4
  5843                           prodl	equ	0xFF3
  5844                           postinc0	equ	0xFEE
  5845                           wreg	equ	0xFE8
  5846                           indf1	equ	0xFE7
  5847                           postdec1	equ	0xFE5
  5848                           fsr1h	equ	0xFE2
  5849                           fsr1l	equ	0xFE1
  5850                           indf2	equ	0xFDF
  5851                           postinc2	equ	0xFDE
  5852                           postdec2	equ	0xFDD
  5853                           plusw2	equ	0xFDB
  5854                           fsr2h	equ	0xFDA
  5855                           fsr2l	equ	0xFD9
  5856                           status	equ	0xFD8
  5857                           
  5858 ;; *************** function ___ftpack *****************
  5859 ;; Defined at:
  5860 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;  arg             3   39[COMRAM] unsigned um
  5863 ;;  exp             1   42[COMRAM] unsigned char 
  5864 ;;  sign            1   43[COMRAM] unsigned char 
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;		None
  5867 ;; Return value:  Size  Location     Type
  5868 ;;                  3   39[COMRAM] float 
  5869 ;; Registers used:
  5870 ;;		wreg, status,2, status,0
  5871 ;; Tracked objects:
  5872 ;;		On entry : 0/0
  5873 ;;		On exit  : 0/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5876 ;;      Params:         5       0       0       0
  5877 ;;      Locals:         0       0       0       0
  5878 ;;      Temps:          3       0       0       0
  5879 ;;      Totals:         8       0       0       0
  5880 ;;Total ram usage:        8 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:    2
  5883 ;; This function calls:
  5884 ;;		Nothing
  5885 ;; This function is called by:
  5886 ;;		___altoft
  5887 ;;		___awtoft
  5888 ;;		___ftadd
  5889 ;;		___ftdiv
  5890 ;;		___ftmul
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text27
  5895  0016FA                     __ptext27:
  5896                           	opt stack 0
  5897  0016FA                     ___ftpack:
  5898                           	opt stack 25
  5899                           
  5900                           ;incstack = 0
  5901  0016FA  502B               	movf	___ftpack@exp,w,c
  5902  0016FC  B4D8               	btfsc	status,2,c
  5903  0016FE  D005               	goto	u2000
  5904  001700  5028               	movf	___ftpack@arg,w,c
  5905  001702  1029               	iorwf	___ftpack@arg+1,w,c
  5906  001704  102A               	iorwf	___ftpack@arg+2,w,c
  5907  001706  A4D8               	btfss	status,2,c
  5908  001708  D00C               	goto	l371
  5909  00170A                     u2000:
  5910  00170A  0E00               	movlw	0
  5911  00170C  6E28               	movwf	?___ftpack,c
  5912  00170E  0E00               	movlw	0
  5913  001710  6E29               	movwf	?___ftpack+1,c
  5914  001712  0E00               	movlw	0
  5915  001714  6E2A               	movwf	?___ftpack+2,c
  5916  001716  0012               	return	
  5917  001718  2A2B               	incf	___ftpack@exp,f,c
  5918  00171A  90D8               	bcf	status,0,c
  5919  00171C  322A               	rrcf	___ftpack@arg+2,f,c
  5920  00171E  3229               	rrcf	___ftpack@arg+1,f,c
  5921  001720  3228               	rrcf	___ftpack@arg,f,c
  5922  001722                     l371:
  5923  001722  0E00               	movlw	0
  5924  001724  1428               	andwf	___ftpack@arg,w,c
  5925  001726  6E2D               	movwf	??___ftpack& (0+255),c
  5926  001728  0E00               	movlw	0
  5927  00172A  1429               	andwf	___ftpack@arg+1,w,c
  5928  00172C  6E2E               	movwf	(??___ftpack+1)& (0+255),c
  5929  00172E  0EFE               	movlw	254
  5930  001730  142A               	andwf	___ftpack@arg+2,w,c
  5931  001732  6E2F               	movwf	(??___ftpack+2)& (0+255),c
  5932  001734  502D               	movf	??___ftpack,w,c
  5933  001736  102E               	iorwf	??___ftpack+1,w,c
  5934  001738  102F               	iorwf	??___ftpack+2,w,c
  5935  00173A  B4D8               	btfsc	status,2,c
  5936  00173C  D00C               	goto	l374
  5937  00173E  D7EC               	goto	l372
  5938  001740  2A2B               	incf	___ftpack@exp,f,c
  5939  001742  0E01               	movlw	1
  5940  001744  2628               	addwf	___ftpack@arg,f,c
  5941  001746  0E00               	movlw	0
  5942  001748  2229               	addwfc	___ftpack@arg+1,f,c
  5943  00174A  0E00               	movlw	0
  5944  00174C  222A               	addwfc	___ftpack@arg+2,f,c
  5945  00174E  90D8               	bcf	status,0,c
  5946  001750  322A               	rrcf	___ftpack@arg+2,f,c
  5947  001752  3229               	rrcf	___ftpack@arg+1,f,c
  5948  001754  3228               	rrcf	___ftpack@arg,f,c
  5949  001756                     l374:
  5950  001756  0E00               	movlw	0
  5951  001758  1428               	andwf	___ftpack@arg,w,c
  5952  00175A  6E2D               	movwf	??___ftpack& (0+255),c
  5953  00175C  0E00               	movlw	0
  5954  00175E  1429               	andwf	___ftpack@arg+1,w,c
  5955  001760  6E2E               	movwf	(??___ftpack+1)& (0+255),c
  5956  001762  0EFF               	movlw	255
  5957  001764  142A               	andwf	___ftpack@arg+2,w,c
  5958  001766  6E2F               	movwf	(??___ftpack+2)& (0+255),c
  5959  001768  502D               	movf	??___ftpack,w,c
  5960  00176A  102E               	iorwf	??___ftpack+1,w,c
  5961  00176C  102F               	iorwf	??___ftpack+2,w,c
  5962  00176E  B4D8               	btfsc	status,2,c
  5963  001770  D006               	goto	l377
  5964  001772  D7E6               	goto	l375
  5965  001774  062B               	decf	___ftpack@exp,f,c
  5966  001776  90D8               	bcf	status,0,c
  5967  001778  3628               	rlcf	___ftpack@arg,f,c
  5968  00177A  3629               	rlcf	___ftpack@arg+1,f,c
  5969  00177C  362A               	rlcf	___ftpack@arg+2,f,c
  5970  00177E                     l377:
  5971  00177E  BE29               	btfsc	___ftpack@arg+1,7,c
  5972  001780  D003               	goto	u2040
  5973  001782  0E02               	movlw	2
  5974  001784  602B               	cpfslt	___ftpack@exp,c
  5975  001786  D7F6               	goto	l378
  5976  001788                     u2040:
  5977  001788  A02B               	btfss	___ftpack@exp,0,c
  5978  00178A  9E29               	bcf	___ftpack@arg+1,7,c
  5979  00178C  90D8               	bcf	status,0,c
  5980  00178E  322B               	rrcf	___ftpack@exp,f,c
  5981  001790  502B               	movf	___ftpack@exp,w,c
  5982  001792  122A               	iorwf	___ftpack@arg+2,f,c
  5983  001794  502C               	movf	___ftpack@sign,w,c
  5984  001796  A4D8               	btfss	status,2,c
  5985  001798  8E2A               	bsf	___ftpack@arg+2,7,c
  5986  00179A  C028  F028         	movff	___ftpack@arg,?___ftpack
  5987  00179E  C029  F029         	movff	___ftpack@arg+1,?___ftpack+1
  5988  0017A2  C02A  F02A         	movff	___ftpack@arg+2,?___ftpack+2
  5989  0017A6  0012               	return	
  5990  0017A8                     __end_of___ftpack:
  5991                           	opt stack 0
  5992                           tblptru	equ	0xFF8
  5993                           tblptrh	equ	0xFF7
  5994                           tblptrl	equ	0xFF6
  5995                           tablat	equ	0xFF5
  5996                           prodh	equ	0xFF4
  5997                           prodl	equ	0xFF3
  5998                           postinc0	equ	0xFEE
  5999                           wreg	equ	0xFE8
  6000                           indf1	equ	0xFE7
  6001                           postdec1	equ	0xFE5
  6002                           fsr1h	equ	0xFE2
  6003                           fsr1l	equ	0xFE1
  6004                           indf2	equ	0xFDF
  6005                           postinc2	equ	0xFDE
  6006                           postdec2	equ	0xFDD
  6007                           plusw2	equ	0xFDB
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function _EmptyMovementString *****************
  6013 ;; Defined at:
  6014 ;;		line 257 in file "main.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      void 
  6021 ;; Registers used:
  6022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6028 ;;      Params:         0       0       0       0
  6029 ;;      Locals:         0       0       0       0
  6030 ;;      Temps:          0       0       0       0
  6031 ;;      Totals:         0       0       0       0
  6032 ;;Total ram usage:        0 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    3
  6035 ;; This function calls:
  6036 ;;		_memset
  6037 ;; This function is called by:
  6038 ;;		_FillServoPositionString
  6039 ;;		_InitServos
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           	psect	text28
  6044  001DD8                     __ptext28:
  6045                           	opt stack 0
  6046  001DD8                     _EmptyMovementString:
  6047                           	opt stack 26
  6048                           
  6049                           ;main.c: 258: memset(&movementString[0], 0, sizeof(movementString));
  6050                           
  6051                           ;incstack = 0
  6052  001DD8  0E00               	movlw	low _movementString
  6053  001DDA  6E28               	movwf	memset@p1,c
  6054  001DDC  0E02               	movlw	high _movementString
  6055  001DDE  6E29               	movwf	memset@p1+1,c
  6056  001DE0  0E00               	movlw	0
  6057  001DE2  6E2B               	movwf	memset@c+1,c
  6058  001DE4  0E00               	movlw	0
  6059  001DE6  6E2A               	movwf	memset@c,c
  6060  001DE8  0E01               	movlw	1
  6061  001DEA  6E2D               	movwf	memset@n+1,c
  6062  001DEC  0E00               	movlw	0
  6063  001DEE  6E2C               	movwf	memset@n,c
  6064  001DF0  ECB1  F00E         	call	_memset	;wreg free
  6065  001DF4  0012               	return		;funcret
  6066  001DF6                     __end_of_EmptyMovementString:
  6067                           	opt stack 0
  6068                           tblptru	equ	0xFF8
  6069                           tblptrh	equ	0xFF7
  6070                           tblptrl	equ	0xFF6
  6071                           tablat	equ	0xFF5
  6072                           prodh	equ	0xFF4
  6073                           prodl	equ	0xFF3
  6074                           postinc0	equ	0xFEE
  6075                           wreg	equ	0xFE8
  6076                           indf1	equ	0xFE7
  6077                           postdec1	equ	0xFE5
  6078                           fsr1h	equ	0xFE2
  6079                           fsr1l	equ	0xFE1
  6080                           indf2	equ	0xFDF
  6081                           postinc2	equ	0xFDE
  6082                           postdec2	equ	0xFDD
  6083                           plusw2	equ	0xFDB
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function _memset *****************
  6089 ;; Defined at:
  6090 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memset.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  p1              2   39[COMRAM] PTR void 
  6093 ;;		 -> movementString(256), 
  6094 ;;  c               2   41[COMRAM] int 
  6095 ;;  n               2   43[COMRAM] unsigned int 
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;  p               2   45[COMRAM] PTR unsigned char 
  6098 ;;		 -> movementString(256), 
  6099 ;; Return value:  Size  Location     Type
  6100 ;;                  2   39[COMRAM] PTR void 
  6101 ;; Registers used:
  6102 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6103 ;; Tracked objects:
  6104 ;;		On entry : 0/0
  6105 ;;		On exit  : 0/0
  6106 ;;		Unchanged: 0/0
  6107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6108 ;;      Params:         6       0       0       0
  6109 ;;      Locals:         2       0       0       0
  6110 ;;      Temps:          0       0       0       0
  6111 ;;      Totals:         8       0       0       0
  6112 ;;Total ram usage:        8 bytes
  6113 ;; Hardware stack levels used:    1
  6114 ;; Hardware stack levels required when called:    2
  6115 ;; This function calls:
  6116 ;;		Nothing
  6117 ;; This function is called by:
  6118 ;;		_EmptyMovementString
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text29
  6123  001D62                     __ptext29:
  6124                           	opt stack 0
  6125  001D62                     _memset:
  6126                           	opt stack 26
  6127                           
  6128                           ;incstack = 0
  6129  001D62  C028  F02E         	movff	memset@p1,memset@p
  6130  001D66  C029  F02F         	movff	memset@p1+1,memset@p+1
  6131  001D6A  D008               	goto	l584
  6132  001D6C                     l1867:
  6133  001D6C  C02E  FFD9         	movff	memset@p,fsr2l
  6134  001D70  C02F  FFDA         	movff	memset@p+1,fsr2h
  6135  001D74  C02A  FFDF         	movff	memset@c,indf2
  6136  001D78  4A2E               	infsnz	memset@p,f,c
  6137  001D7A  2A2F               	incf	memset@p+1,f,c
  6138  001D7C                     l584:
  6139  001D7C  062C               	decf	memset@n,f,c
  6140  001D7E  A0D8               	btfss	status,0,c
  6141  001D80  062D               	decf	memset@n+1,f,c
  6142  001D82  282C               	incf	memset@n,w,c
  6143  001D84  E1F3               	bnz	l1867
  6144  001D86  282D               	incf	memset@n+1,w,c
  6145  001D88  B4D8               	btfsc	status,2,c
  6146  001D8A  0012               	return	
  6147  001D8C  D7EF               	goto	l585
  6148  001D8E                     __end_of_memset:
  6149                           	opt stack 0
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           prodh	equ	0xFF4
  6155                           prodl	equ	0xFF3
  6156                           postinc0	equ	0xFEE
  6157                           wreg	equ	0xFE8
  6158                           indf1	equ	0xFE7
  6159                           postdec1	equ	0xFE5
  6160                           fsr1h	equ	0xFE2
  6161                           fsr1l	equ	0xFE1
  6162                           indf2	equ	0xFDF
  6163                           postinc2	equ	0xFDE
  6164                           postdec2	equ	0xFDD
  6165                           plusw2	equ	0xFDB
  6166                           fsr2h	equ	0xFDA
  6167                           fsr2l	equ	0xFD9
  6168                           status	equ	0xFD8
  6169                           
  6170 ;; *************** function _ConfigureOscillator *****************
  6171 ;; Defined at:
  6172 ;;		line 23 in file "system.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;		None
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;		None
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      void 
  6179 ;; Registers used:
  6180 ;;		wreg, status,2
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6186 ;;      Params:         0       0       0       0
  6187 ;;      Locals:         0       0       0       0
  6188 ;;      Temps:          0       0       0       0
  6189 ;;      Totals:         0       0       0       0
  6190 ;;Total ram usage:        0 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:    2
  6193 ;; This function calls:
  6194 ;;		Nothing
  6195 ;; This function is called by:
  6196 ;;		_main
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text30
  6201  001DF6                     __ptext30:
  6202                           	opt stack 0
  6203  001DF6                     _ConfigureOscillator:
  6204                           	opt stack 28
  6205                           
  6206                           ;system.c: 25: OSCTUNEbits.INTSRC = 0b1;
  6207                           
  6208                           ;incstack = 0
  6209  001DF6  8E9B               	bsf	3995,7,c	;volatile
  6210                           
  6211                           ;system.c: 26: OSCTUNEbits.PLLEN = 0b0;
  6212  001DF8  9C9B               	bcf	3995,6,c	;volatile
  6213                           
  6214                           ;system.c: 27: OSCTUNEbits.TUN = 0b00000;
  6215  001DFA  909B               	bcf	3995,0,c	;volatile
  6216  001DFC  929B               	bcf	3995,1,c	;volatile
  6217  001DFE  949B               	bcf	3995,2,c	;volatile
  6218  001E00  969B               	bcf	3995,3,c	;volatile
  6219  001E02  989B               	bcf	3995,4,c	;volatile
  6220                           
  6221                           ;system.c: 28: OSCCONbits.IDLEN = 0b0;
  6222  001E04  9ED3               	bcf	4051,7,c	;volatile
  6223                           
  6224                           ;system.c: 29: OSCCONbits.IRCF = 0b101;
  6225  001E06  50D3               	movf	4051,w,c	;volatile
  6226  001E08  0B8F               	andlw	-113
  6227  001E0A  0950               	iorlw	80
  6228  001E0C  6ED3               	movwf	4051,c	;volatile
  6229  001E0E  0012               	return		;funcret
  6230  001E10                     __end_of_ConfigureOscillator:
  6231                           	opt stack 0
  6232                           tblptru	equ	0xFF8
  6233                           tblptrh	equ	0xFF7
  6234                           tblptrl	equ	0xFF6
  6235                           tablat	equ	0xFF5
  6236                           prodh	equ	0xFF4
  6237                           prodl	equ	0xFF3
  6238                           postinc0	equ	0xFEE
  6239                           wreg	equ	0xFE8
  6240                           indf1	equ	0xFE7
  6241                           postdec1	equ	0xFE5
  6242                           fsr1h	equ	0xFE2
  6243                           fsr1l	equ	0xFE1
  6244                           indf2	equ	0xFDF
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           plusw2	equ	0xFDB
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8
  6251                           
  6252 ;; *************** function _low_isr *****************
  6253 ;; Defined at:
  6254 ;;		line 67 in file "interrupts.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;		None
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;		None
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  1    wreg      void 
  6261 ;; Registers used:
  6262 ;;		None
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6268 ;;      Params:         0       0       0       0
  6269 ;;      Locals:         0       0       0       0
  6270 ;;      Temps:         21       0       0       0
  6271 ;;      Totals:        21       0       0       0
  6272 ;;Total ram usage:       21 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    1
  6275 ;; This function calls:
  6276 ;;		Nothing
  6277 ;; This function is called by:
  6278 ;;		Interrupt level 1
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	intcodelo
  6283  000018                     __pintcodelo:
  6284                           	opt stack 0
  6285  000018                     _low_isr:
  6286                           	opt stack 24
  6287                           
  6288                           ;incstack = 0
  6289  000018  8038               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6290  00001A  CFD8 F013          	movff	status,??_low_isr
  6291  00001E  CFE8 F014          	movff	wreg,??_low_isr+1
  6292  000022  CFE0 F015          	movff	bsr,??_low_isr+2
  6293  000026  CFFA F016          	movff	pclath,??_low_isr+3
  6294  00002A  CFFB F017          	movff	pclatu,??_low_isr+4
  6295  00002E  CFE9 F018          	movff	fsr0l,??_low_isr+5
  6296  000032  CFEA F019          	movff	fsr0h,??_low_isr+6
  6297  000036  CFE1 F01A          	movff	fsr1l,??_low_isr+7
  6298  00003A  CFE2 F01B          	movff	fsr1h,??_low_isr+8
  6299  00003E  CFD9 F01C          	movff	fsr2l,??_low_isr+9
  6300  000042  CFDA F01D          	movff	fsr2h,??_low_isr+10
  6301  000046  CFF3 F01E          	movff	prodl,??_low_isr+11
  6302  00004A  CFF4 F01F          	movff	prodh,??_low_isr+12
  6303  00004E  CFF6 F020          	movff	tblptrl,??_low_isr+13
  6304  000052  CFF7 F021          	movff	tblptrh,??_low_isr+14
  6305  000056  CFF8 F022          	movff	tblptru,??_low_isr+15
  6306  00005A  CFF5 F023          	movff	tablat,??_low_isr+16
  6307  00005E  C038  F024         	movff	btemp,??_low_isr+17
  6308  000062  C039  F025         	movff	btemp+1,??_low_isr+18
  6309  000066  C03A  F026         	movff	btemp+2,??_low_isr+19
  6310  00006A  C03B  F027         	movff	btemp+3,??_low_isr+20
  6311  00006E  C027  F03B         	movff	??_low_isr+20,btemp+3
  6312  000072  C026  F03A         	movff	??_low_isr+19,btemp+2
  6313  000076  C025  F039         	movff	??_low_isr+18,btemp+1
  6314  00007A  C024  F038         	movff	??_low_isr+17,btemp
  6315  00007E  C023  FFF5         	movff	??_low_isr+16,tablat
  6316  000082  C022  FFF8         	movff	??_low_isr+15,tblptru
  6317  000086  C021  FFF7         	movff	??_low_isr+14,tblptrh
  6318  00008A  C020  FFF6         	movff	??_low_isr+13,tblptrl
  6319  00008E  C01F  FFF4         	movff	??_low_isr+12,prodh
  6320  000092  C01E  FFF3         	movff	??_low_isr+11,prodl
  6321  000096  C01D  FFDA         	movff	??_low_isr+10,fsr2h
  6322  00009A  C01C  FFD9         	movff	??_low_isr+9,fsr2l
  6323  00009E  C01B  FFE2         	movff	??_low_isr+8,fsr1h
  6324  0000A2  C01A  FFE1         	movff	??_low_isr+7,fsr1l
  6325  0000A6  C019  FFEA         	movff	??_low_isr+6,fsr0h
  6326  0000AA  C018  FFE9         	movff	??_low_isr+5,fsr0l
  6327  0000AE  C017  FFFB         	movff	??_low_isr+4,pclatu
  6328  0000B2  C016  FFFA         	movff	??_low_isr+3,pclath
  6329  0000B6  C015  FFE0         	movff	??_low_isr+2,bsr
  6330  0000BA  C014  FFE8         	movff	??_low_isr+1,wreg
  6331  0000BE  C013  FFD8         	movff	??_low_isr,status
  6332  0000C2  9038               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6333  0000C4  0010               	retfie	
  6334  0000C6                     __end_of_low_isr:
  6335                           	opt stack 0
  6336                           pclatu	equ	0xFFB
  6337                           pclath	equ	0xFFA
  6338                           tblptru	equ	0xFF8
  6339                           tblptrh	equ	0xFF7
  6340                           tblptrl	equ	0xFF6
  6341                           tablat	equ	0xFF5
  6342                           prodh	equ	0xFF4
  6343                           prodl	equ	0xFF3
  6344                           postinc0	equ	0xFEE
  6345                           fsr0h	equ	0xFEA
  6346                           fsr0l	equ	0xFE9
  6347                           wreg	equ	0xFE8
  6348                           indf1	equ	0xFE7
  6349                           postdec1	equ	0xFE5
  6350                           fsr1h	equ	0xFE2
  6351                           fsr1l	equ	0xFE1
  6352                           bsr	equ	0xFE0
  6353                           indf2	equ	0xFDF
  6354                           postinc2	equ	0xFDE
  6355                           postdec2	equ	0xFDD
  6356                           plusw2	equ	0xFDB
  6357                           fsr2h	equ	0xFDA
  6358                           fsr2l	equ	0xFD9
  6359                           status	equ	0xFD8
  6360                           
  6361 ;; *************** function _high_isr *****************
  6362 ;; Defined at:
  6363 ;;		line 27 in file "interrupts.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;		None
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;		None
  6368 ;; Return value:  Size  Location     Type
  6369 ;;                  1    wreg      void 
  6370 ;; Registers used:
  6371 ;;		None
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6377 ;;      Params:         0       0       0       0
  6378 ;;      Locals:         0       0       0       0
  6379 ;;      Temps:         18       0       0       0
  6380 ;;      Totals:        18       0       0       0
  6381 ;;Total ram usage:       18 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; This function calls:
  6384 ;;		Nothing
  6385 ;; This function is called by:
  6386 ;;		Interrupt level 2
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           	psect	intcode
  6391  000008                     __pintcode:
  6392                           	opt stack 0
  6393  000008                     _high_isr:
  6394                           	opt stack 24
  6395                           
  6396                           ;incstack = 0
  6397  000008  8238               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6398  00000A  ED21  F00C         	call	int_func,f	;refresh shadow registers
  6399                           pclatu	equ	0xFFB
  6400                           pclath	equ	0xFFA
  6401                           tblptru	equ	0xFF8
  6402                           tblptrh	equ	0xFF7
  6403                           tblptrl	equ	0xFF6
  6404                           tablat	equ	0xFF5
  6405                           prodh	equ	0xFF4
  6406                           prodl	equ	0xFF3
  6407                           postinc0	equ	0xFEE
  6408                           fsr0h	equ	0xFEA
  6409                           fsr0l	equ	0xFE9
  6410                           wreg	equ	0xFE8
  6411                           indf1	equ	0xFE7
  6412                           postdec1	equ	0xFE5
  6413                           fsr1h	equ	0xFE2
  6414                           fsr1l	equ	0xFE1
  6415                           bsr	equ	0xFE0
  6416                           indf2	equ	0xFDF
  6417                           postinc2	equ	0xFDE
  6418                           postdec2	equ	0xFDD
  6419                           plusw2	equ	0xFDB
  6420                           fsr2h	equ	0xFDA
  6421                           fsr2l	equ	0xFD9
  6422                           status	equ	0xFD8
  6423                           
  6424                           	psect	intcode_body
  6425  001842                     __pintcode_body:
  6426                           	opt stack 24
  6427  001842                     int_func:
  6428                           	opt stack 24
  6429  001842  0006               	pop		; remove dummy address from shadow register refresh
  6430  001844  CFFA F001          	movff	pclath,??_high_isr
  6431  001848  CFFB F002          	movff	pclatu,??_high_isr+1
  6432  00184C  CFE9 F003          	movff	fsr0l,??_high_isr+2
  6433  001850  CFEA F004          	movff	fsr0h,??_high_isr+3
  6434  001854  CFE1 F005          	movff	fsr1l,??_high_isr+4
  6435  001858  CFE2 F006          	movff	fsr1h,??_high_isr+5
  6436  00185C  CFD9 F007          	movff	fsr2l,??_high_isr+6
  6437  001860  CFDA F008          	movff	fsr2h,??_high_isr+7
  6438  001864  CFF3 F009          	movff	prodl,??_high_isr+8
  6439  001868  CFF4 F00A          	movff	prodh,??_high_isr+9
  6440  00186C  CFF6 F00B          	movff	tblptrl,??_high_isr+10
  6441  001870  CFF7 F00C          	movff	tblptrh,??_high_isr+11
  6442  001874  CFF8 F00D          	movff	tblptru,??_high_isr+12
  6443  001878  CFF5 F00E          	movff	tablat,??_high_isr+13
  6444  00187C  C038  F00F         	movff	btemp,??_high_isr+14
  6445  001880  C039  F010         	movff	btemp+1,??_high_isr+15
  6446  001884  C03A  F011         	movff	btemp+2,??_high_isr+16
  6447  001888  C03B  F012         	movff	btemp+3,??_high_isr+17
  6448  00188C  C012  F03B         	movff	??_high_isr+17,btemp+3
  6449  001890  C011  F03A         	movff	??_high_isr+16,btemp+2
  6450  001894  C010  F039         	movff	??_high_isr+15,btemp+1
  6451  001898  C00F  F038         	movff	??_high_isr+14,btemp
  6452  00189C  C00E  FFF5         	movff	??_high_isr+13,tablat
  6453  0018A0  C00D  FFF8         	movff	??_high_isr+12,tblptru
  6454  0018A4  C00C  FFF7         	movff	??_high_isr+11,tblptrh
  6455  0018A8  C00B  FFF6         	movff	??_high_isr+10,tblptrl
  6456  0018AC  C00A  FFF4         	movff	??_high_isr+9,prodh
  6457  0018B0  C009  FFF3         	movff	??_high_isr+8,prodl
  6458  0018B4  C008  FFDA         	movff	??_high_isr+7,fsr2h
  6459  0018B8  C007  FFD9         	movff	??_high_isr+6,fsr2l
  6460  0018BC  C006  FFE2         	movff	??_high_isr+5,fsr1h
  6461  0018C0  C005  FFE1         	movff	??_high_isr+4,fsr1l
  6462  0018C4  C004  FFEA         	movff	??_high_isr+3,fsr0h
  6463  0018C8  C003  FFE9         	movff	??_high_isr+2,fsr0l
  6464  0018CC  C002  FFFB         	movff	??_high_isr+1,pclatu
  6465  0018D0  C001  FFFA         	movff	??_high_isr,pclath
  6466  0018D4  9238               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6467  0018D6  0011               	retfie		f
  6468  0018D8                     __end_of_high_isr:
  6469                           	opt stack 0
  6470                           pclatu	equ	0xFFB
  6471                           pclath	equ	0xFFA
  6472                           tblptru	equ	0xFF8
  6473                           tblptrh	equ	0xFF7
  6474                           tblptrl	equ	0xFF6
  6475                           tablat	equ	0xFF5
  6476                           prodh	equ	0xFF4
  6477                           prodl	equ	0xFF3
  6478                           postinc0	equ	0xFEE
  6479                           fsr0h	equ	0xFEA
  6480                           fsr0l	equ	0xFE9
  6481                           wreg	equ	0xFE8
  6482                           indf1	equ	0xFE7
  6483                           postdec1	equ	0xFE5
  6484                           fsr1h	equ	0xFE2
  6485                           fsr1l	equ	0xFE1
  6486                           bsr	equ	0xFE0
  6487                           indf2	equ	0xFDF
  6488                           postinc2	equ	0xFDE
  6489                           postdec2	equ	0xFDD
  6490                           plusw2	equ	0xFDB
  6491                           fsr2h	equ	0xFDA
  6492                           fsr2l	equ	0xFD9
  6493                           status	equ	0xFD8
  6494                           pclatu	equ	0xFFB
  6495                           pclath	equ	0xFFA
  6496                           tblptru	equ	0xFF8
  6497                           tblptrh	equ	0xFF7
  6498                           tblptrl	equ	0xFF6
  6499                           tablat	equ	0xFF5
  6500                           prodh	equ	0xFF4
  6501                           prodl	equ	0xFF3
  6502                           postinc0	equ	0xFEE
  6503                           fsr0h	equ	0xFEA
  6504                           fsr0l	equ	0xFE9
  6505                           wreg	equ	0xFE8
  6506                           indf1	equ	0xFE7
  6507                           postdec1	equ	0xFE5
  6508                           fsr1h	equ	0xFE2
  6509                           fsr1l	equ	0xFE1
  6510                           bsr	equ	0xFE0
  6511                           indf2	equ	0xFDF
  6512                           postinc2	equ	0xFDE
  6513                           postdec2	equ	0xFDD
  6514                           plusw2	equ	0xFDB
  6515                           fsr2h	equ	0xFDA
  6516                           fsr2l	equ	0xFD9
  6517                           status	equ	0xFD8
  6518                           
  6519                           	psect	rparam
  6520  0000                     pclatu	equ	0xFFB
  6521                           pclath	equ	0xFFA
  6522                           tblptru	equ	0xFF8
  6523                           tblptrh	equ	0xFF7
  6524                           tblptrl	equ	0xFF6
  6525                           tablat	equ	0xFF5
  6526                           prodh	equ	0xFF4
  6527                           prodl	equ	0xFF3
  6528                           postinc0	equ	0xFEE
  6529                           fsr0h	equ	0xFEA
  6530                           fsr0l	equ	0xFE9
  6531                           wreg	equ	0xFE8
  6532                           indf1	equ	0xFE7
  6533                           postdec1	equ	0xFE5
  6534                           fsr1h	equ	0xFE2
  6535                           fsr1l	equ	0xFE1
  6536                           bsr	equ	0xFE0
  6537                           indf2	equ	0xFDF
  6538                           postinc2	equ	0xFDE
  6539                           postdec2	equ	0xFDD
  6540                           plusw2	equ	0xFDB
  6541                           fsr2h	equ	0xFDA
  6542                           fsr2l	equ	0xFD9
  6543                           status	equ	0xFD8
  6544                           
  6545                           	psect	temp
  6546  000038                     btemp:
  6547                           	opt stack 0
  6548  000038                     	ds	1
  6549  0000                     int$flags	set	btemp
  6550  0000                     wtemp6	set	btemp+1
  6551                           pclatu	equ	0xFFB
  6552                           pclath	equ	0xFFA
  6553                           tblptru	equ	0xFF8
  6554                           tblptrh	equ	0xFF7
  6555                           tblptrl	equ	0xFF6
  6556                           tablat	equ	0xFF5
  6557                           prodh	equ	0xFF4
  6558                           prodl	equ	0xFF3
  6559                           postinc0	equ	0xFEE
  6560                           fsr0h	equ	0xFEA
  6561                           fsr0l	equ	0xFE9
  6562                           wreg	equ	0xFE8
  6563                           indf1	equ	0xFE7
  6564                           postdec1	equ	0xFE5
  6565                           fsr1h	equ	0xFE2
  6566                           fsr1l	equ	0xFE1
  6567                           bsr	equ	0xFE0
  6568                           indf2	equ	0xFDF
  6569                           postinc2	equ	0xFDE
  6570                           postdec2	equ	0xFDD
  6571                           plusw2	equ	0xFDB
  6572                           fsr2h	equ	0xFDA
  6573                           fsr2l	equ	0xFD9
  6574                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    89
    Data        132
    BSS         258
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      55
    BANK0           160     95     101
    BANK1           256      0     126
    BANK2           256      0     256

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 126
		 -> STR_22(CODE[2]), STR_20(CODE[2]), STR_19(CODE[2]), STR_18(CODE[2]), 
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), InitServos@tmp(BANK0[5]), 
		 -> STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[6]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), FillServoPositionString@tmp(BANK0[5]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), servosets.lowerVerticalServo(BANK1[3]), servosets.upperVerticalServo(BANK1[3]), 
		 -> servosets.horizontalServo(BANK1[3]), servosets(BANK1[126]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    memset@p1	PTR void  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    memset@p	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_21(CODE[3]), STR_17(CODE[3]), STR_13(CODE[3]), STR_9(CODE[3]), 
		 -> STR_6(CODE[3]), STR_3(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 5
		 -> InitServos@tmp(BANK0[5]), FillServoPositionString@tmp(BANK0[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    UART_Write_String@str	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 


Critical Paths under _main in COMRAM

    _main->_UART_Write_String
    _sin->_eval_poly
    _floor->___altoft
    ___ftdiv->_eval_poly
    _RotatePositions->___wmul
    _InitServos->_UART_Write_String
    _UART_Write_String->_strlen
    _FillServoPositionString->_sprintf
    _strcat->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _EmptyMovementString->_memset

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_cos
    _cos->_sin
    _sin->___ftsub
    _floor->___altoft
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->_floor
    ___ftdiv->_eval_poly
    _InitServos->_sprintf
    _FillServoPositionString->___fttol
    ___fttol->___ftadd
    ___ftadd->___ftmul

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0  157375
                                             83 BANK0     12    12      0
                _ConfigureOscillator
            _FillServoPositionString
                         _InitServos
                    _RotatePositions
                          _UART_Init
                  _UART_Write_String
                            ___ftmul
                                _cos
                                _sin
 ---------------------------------------------------------------------------------
 (1) _cos                                                  6     3      3   56903
                                             77 BANK0      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (1) _sin                                                 13    10      3   50330
                                             64 BANK0     13    10      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (2) _floor                                                8     5      3   10791
                                             50 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     360
                                             39 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     744
                                             39 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___altoft                                            10     6      4    3247
                                             51 COMRAM     2     2      0
                                             42 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) _eval_poly                                           12     5      7   16376
                                             51 COMRAM     2     2      0
                                             27 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6174
                                             58 BANK0      6     0      6
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     273
                                             39 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3693
                                             37 BANK0     15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            2     2      0       0
                                             39 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RotatePositions                                      4     4      0    4375
                                             45 COMRAM     4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _InitServos                                           7     7      0   11925
                                             13 BANK0      7     7      0
                _EmptyMovementString
                  _UART_Write_String
                             ___wmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (1) _UART_Write_String                                    8     6      2     650
                                             45 COMRAM     8     6      2
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     166
                                             39 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _FillServoPositionString                             40    34      6   27315
                                             42 BANK0     40    34      6
                _EmptyMovementString
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                             ___wmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4    4354
                                             45 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    2014
                                             51 COMRAM     1     1      0
                                              0 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                             46 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             39 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    4263
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     404
                                             27 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5741
                                              0 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5578
                                             15 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3266
                                             47 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2953
                                             39 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _EmptyMovementString                                  0     0      0     324
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     324
                                             39 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _low_isr                                             21    21      0       0
                                             18 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _FillServoPositionString
     _EmptyMovementString
       _memset
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     ___wmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
     _strcat
       ___wmul (ARG)
   _InitServos
     _EmptyMovementString
       _memset
     _UART_Write_String
       _UART_Write
       _strlen
     ___wmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
     _strcat
       ___wmul (ARG)
   _RotatePositions
     ___wmul
   _UART_Init
   _UART_Write_String
     _UART_Write
     _strlen
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
   _cos
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftge
     _sin
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp
   _sin
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge
         ___fttol
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp
     _eval_poly
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___wmul
     _floor
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftge
       ___fttol
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0     100       8      100.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      7E       6       49.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     5F      65       4       63.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      37       1       58.5%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     21A       9        0.0%
DATA                 0      0     21A      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Oct 07 20:44:31 2017

                                ___altoft@exp 0034                                 ___altoft@sign 0035  
                                          l73 161C                                            l82 1BD6  
                                          l83 1BB4                                            l95 038E  
                                          bsr 000FE0                           ___wmul@multiplicand 002A  
                                 __CFG_BORV$3 000000                    __size_of_UART_Write_String 0056  
                                __CFG_CP0$OFF 000000                                  __CFG_CP1$OFF 000000  
                                ___ftadd@exp1 007A                                  ___ftadd@exp2 0079  
                                ___ftadd@sign 0078                                           l110 1812  
                                         l103 08FE                                           l111 183A  
                                         l112 1840                                           l105 0B98  
                                         l132 0FBA                                           l141 1026  
                                         l133 0FD4                                           l145 1072  
                                         l402 0E54                                           l146 10CC  
                                         l411 0EE4                                           l147 1078  
                                         l139 0FFE                                           l235 1A16  
                                         l236 1A0A                                           l430 0F88  
                                         l406 0E7E                                           l416 0EDA  
                                         l600 0D04                                           l352 16B2  
                                         l425 0F18                                           l417 0ED0  
                                         l601 0DF2                                           l346 1D10  
                                         l426 0F0E                                           l450 121C  
                                         l371 1722                                           l435 1312  
                                         l443 1908                                           l372 1718  
                                         l428 0F3C                                           l452 1244  
                                         l444 1938                                           l429 0F58  
                                         l453 1276                                           l437 133A  
                                         l461 1DCA                                           l374 1756  
                                         l454 1286                                           l438 1378  
                                         l375 1740                                           l471 1128  
                                         l439 139E                                           l456 129E  
                                         l480 11B8                                           l560 1C0A  
                                         l377 177E                                           l457 12AE  
                                         l473 11A0                                           l561 1C02  
                                         l378 1774                                           l482 11E0  
                                         l474 1190                                           l570 1C96  
                                         l571 1C8E                                           l467 1C56  
                                         l564 1C2A                                           l565 1C34  
                                         l725 1B4C                                           l574 1CAE  
                                         l726 1B48                                           l734 1CD0  
                                         l479 11C4                                           l575 1CB8  
                                         l735 1CCC                                           l584 1D7C  
                                         l728 1B64                                           l760 14F2  
                                         l585 1D6C                                           l729 1B5C  
                                         l770 1428                                           l771 14A4  
                                         l598 0BC6                                           l759 1570  
                                         l767 140E                                           l599 0CAA  
                                         l776 1A7C                                           l768 1400  
                                __CFG_CPB$OFF 000000                                  __CFG_CPD$OFF 000000  
                                         _cos 164A                                           _sin 0B9A  
                            RotatePositions@i 0030                                           wreg 000FE8  
                                __CFG_IESO$ON 000000                         ??_EmptyMovementString 0030  
                                __CFG_LVP$OFF 000000                                  ___ftdiv@cntr 008E  
                                ___ftdiv@sign 0093                                  __CFG_WDT$OFF 000000  
                                        l2303 1812                                          l2087 102A  
                                        l2295 17B0                                          l1591 1964  
                                        l2709 08C6                                          l1861 1E12  
                                        ?_cos 00AD                                          l1867 1D6C  
                                        ?_sin 00A0                                          STR_1 0363  
                                        STR_2 0365                                          STR_3 0360  
                                        STR_4 0363                                          STR_5 0365  
                                        STR_6 0360                                          STR_7 0363  
                                        STR_8 0365                                          STR_9 0360  
                                        u2000 170A                                          u2101 0E26  
                                        u2040 1788                                          u1401 110C  
                                        u2130 0E46                                          u1420 1146  
                                        u2301 1204                                          u2230 0EEC  
                                        u2160 0E70                                          u2321 122C  
                                        u1425 113E                                          u1610 1C0E  
                                        u2091 0E12                                          u2260 0F20  
                                        u1460 11CA                                          u2500 0CA8  
                                        u2190 0EAE                                          u1640 1C9A  
                                        u1800 1B8C                                          u2440 141A  
                                        u2361 12FA                                          u1490 1AA4  
                                        u2381 1322                                          u2550 038C  
                                        u1807 1B82                                          u2560 08C6  
                                        u1920 08FC                                          u1498 1AA6  
                                        u2490 0CA6                                          u1860 1056  
                                        u1880 10D4                                          u2577 1D54  
                                        u1890 10EC                                          _TRMT 007D61  
                                 main@forward 00B3                                          _main 1588  
                                ___ftpack@arg 0028                                          cos@f 00AD  
                                ___ftpack@exp 002B                                          fsr0h 000FEA  
                                        fsr1h 000FE2                                          fsr2h 000FDA  
                                        fsr0l 000FE9                                          indf1 000FE7  
                                        indf2 000FDF                                          fsr1l 000FE1  
                                        fsr2l 000FD9                                          btemp 0038  
                                        sin@f 00A0                                          sin@y 00A3  
                                        prodh 000FF4                                          prodl 000FF3  
                                        start 00C6  FillServoPositionString@newHorizontalPosition 009D  
                               __CFG_MCLRE$ON 000000                                  ___ftmul@cntr 006D  
                                ___param_bank 000000                                  ___ftmul@sign 006E  
                    __size_of_RotatePositions 009A                                  ___fttol@exp1 0089  
                                       ??_cos 0036                                  ___fttol@lval 0085  
                                       ??_sin 0036                                         ?_main 0001  
                             __end_of___ftadd 0FAE                                         STR_10 035A  
                                       STR_11 0363                                         STR_20 0365  
                                       STR_12 0365                                         STR_21 0360  
                                       STR_13 0360                                         STR_22 035E  
                                       STR_14 035E                                         STR_15 0363  
                                       STR_16 0365                                         STR_17 0360  
                                       STR_18 035E                                         STR_19 0363  
                             __end_of___ftdiv 13D0                               __end_of___ftneg 1DD8  
                             __end_of___ftmul 12E8                               __end_of___ftsub 1C80  
                             __end_of___fttol 11F2                               __end_of___lwdiv 1C3E  
                             __end_of___lwmod 1CC2              __size_of_FillServoPositionString 0574  
                                       _SPBRG 000FAF                            __end_ofsin@coeff_a 034E  
                          __end_ofsin@coeff_b 035A                                         _TXREG 000FAD  
                         _ConfigureOscillator 1DF6                                 __CFG_PWRT$OFF 000000  
                               __CFG_WRT0$OFF 000000                                 __CFG_WRT1$OFF 000000  
                              __CFG_EBTR0$OFF 000000                                __CFG_FCMEN$OFF 000000  
                              __CFG_EBTR1$OFF 000000                                   ?_UART_Write 0001  
                          __size_of_UART_Init 002E                                 __CFG_WRTB$OFF 000000  
                               __CFG_WRTC$OFF 000000                                 __CFG_WRTD$OFF 000000  
                              __CFG_EBTRB$OFF 000000                                 ___awtoft@sign 0033  
                 FillServoPositionString@left 008D                               __end_of_dpowers 033F  
                                       _floor 13D0                                         _frexp 1A60  
                                       _errno 0036                                 ___ftpack@sign 002C  
                                       _turns 0301                               __end_of_low_isr 00C6  
                                       pclath 000FFA                                         sin@x2 00A9  
                                       tablat 000FF5                                   InitServos@i 0072  
                                       plusw2 000FDB                                         status 000FD8  
                                       wtemp6 0039                               __end_of_sprintf 10FA  
                              __CFG_PBADEN$ON 000000                          ?_ConfigureOscillator 0001  
                             __initialization 1AD8                                    _InitServos 08DC  
                                __end_of_main 164A        FillServoPositionString@deltaHorizontal 009B  
                                      ??_main 0036                                 ___fttol@sign1 0084  
                               __activetblptr 000002                                        ?_floor 0092  
                                      ?_frexp 0028                              __end_of___altoft 1A60  
                             __CFG_BBSIZ$1024 000000                              __end_of___awtoft 1D34  
                            __end_of___ftpack 17A8                                        _SPBRGH 000FB0  
                       ??_ConfigureOscillator 0028                                __CFG_XINST$OFF 000000  
                           __end_of_UART_Init 1D62                              __end_of_high_isr 18D8  
                                      ___ftge 18D8                           __size_of_UART_Write 000C  
                                      ___wmul 1D8E                                     ??___ftadd 0075  
                              __CFG_STVREN$ON 000000                                     ??___ftdiv 008B  
                                   ??___ftneg 002B                                     ??___ftmul 0066  
                                   ??___ftsub 0036                                     ??___fttol 007F  
                                   ??___lwdiv 002C                                     ??___lwmod 0033  
                                      _memset 1D62                                        clear_0 1B20  
                                      _strcat 1B3E                                        _strlen 1CC2  
                                      floor@i 0095                                        floor@x 0092  
                       ___ftmul@f3_as_product 006A                             ??_RotatePositions 002E  
                             __CFG_BOREN$BOHW 000000                                        sin@sgn 00AC  
                                __mediumconst 0000                                     ??_low_isr 0013  
                                      tblptrh 000FF7                                        tblptrl 000FF6  
                                      tblptru 000FF8                                     ??_sprintf 0034  
                                  __accesstop 0060                       __end_of__initialization 1B30  
                                  ___altoft@c 008A                                    ___ftadd@f1 006F  
                                  ___ftadd@f2 0072                                    ___ftge@ff1 0028  
                                  ___ftge@ff2 002B                    FillServoPositionString@tmp 00A7  
                                eval_poly@res 0082                                 ___rparam_used 000001  
                                  ___ftdiv@f1 0085                                    ___ftdiv@f2 0088  
                                  ___ftdiv@f3 008F                                    ___ftneg@f1 0028  
                                  ___awtoft@c 0030                                    ___ftmul@f1 0060  
                                  ___ftmul@f2 0063                                    ___ftsub@f1 009A  
                                  ___ftsub@f2 009D                                    ___fttol@f1 007B  
                              __pcstackCOMRAM 0001                      FillServoPositionString@i 00B0  
                                 ?_InitServos 0001                                  __pidataBANK0 1E1C  
                                __pidataBANK1 1968                                 __end_of_floor 14B2  
                               __end_of_frexp 1AD8                                 __end_of_turns 0325  
                     _FillServoPositionString 0368                               __CFG_OSC$IRCIO7 000000  
                                     ??_floor 0036                                       ??_frexp 002D  
                                  __pbssBANK2 0200                            __size_of_eval_poly 00D6  
                UART_Write_String@arrayLength 0031                                       ?___ftge 0028  
                                     ?___wmul 0028                                     ?___altoft 008A  
                                     ?_memset 0028                                     ?___awtoft 0030  
                                   ?___ftpack 0028                                       ?_strcat 002E  
                                     ?_strlen 0028                   __end_of_EmptyMovementString 1DF6  
                                ??_UART_Write 0028                           __size_of_InitServos 02BE  
                                   ?_high_isr 0001                                       __Hparam 0000  
                                     __Lparam 0000                               __size_of___ftge 0090  
                                     ___ftadd 0E00                                       ___ftdiv 12E8  
                                     ___ftneg 1DB4                               __size_of___wmul 0026  
                          __end_of_UART_Write 1E1C                                       ___ftmul 11F2  
                                     ___ftsub 1C3E                                       ___fttol 10FA  
                   ??_FillServoPositionString 0090                                       ___lwdiv 1BEC  
                                     ___lwmod 1C80                                  __psmallconst 0300  
                                  ??___altoft 008E                                       __pcinit 1AD8  
                                  ??___awtoft 0033                                    ??___ftpack 002D  
                           __end_of_eval_poly 1588                               __size_of_memset 002C  
                                     __ramtop 0300                                       __ptext0 1588  
                                     __ptext1 164A                                       __ptext2 0B9A  
                                     __ptext3 13D0                                       __ptext4 1A60  
                                     __ptext5 18D8                                       __ptext6 19E6  
                                     __ptext7 14B2                                       __ptext8 1C3E  
                                     __ptext9 1DB4                               __size_of_strcat 0058  
                             __size_of_strlen 003A                                       _dpowers 0335  
                                __size_of_cos 00B0                                  __size_of_sin 0266  
                                     _low_isr 0018                                       _sprintf 0FAE  
                                  ??_high_isr 0001                                __pintcode_body 1842  
                        end_of_initialization 1B30                                       memset@c 002A  
                                     memset@n 002C                                       memset@p 002E  
                               __Lmediumconst 0000                                       int_func 1842  
                               InitServos@tmp 006D                               _RotatePositions 17A8  
                                   _RCSTAbits 000FAB                             __end_of_positions 0335  
                                     postdec1 000FE5                                       postdec2 000FDD  
                                     postinc0 000FEE                                       postinc2 000FDE  
                                     strlen@s 0028                                     _UART_Init 1D34  
                              UART_Write@data 0028                                     _TRISCbits 000F94  
                 __end_of_ConfigureOscillator 1E10                                _movementString 0200  
                                 ___ftdiv@exp 0092                                     _TXSTAbits 000FAC  
                                 ___ftmul@exp 0069                                  ??_InitServos 0036  
                              __end_of___ftge 1968                                __end_of___wmul 1DB4  
                                 _BAUDCONbits 000FB8                                    ?_UART_Init 0001  
                              __end_of_memset 1D8E                                    floor@expon 0098  
                              __end_of_strcat 1B96                                __end_of_strlen 1CFC  
                         start_initialization 1AD8                                    eval_poly@d 007E  
                                  eval_poly@n 0080                                    eval_poly@x 007B  
                                 __end_of_cos 16FA                                   __end_of_sin 0E00  
                          __end_of_InitServos 0B9A                                    frexp@value 0028  
                     __end_of_RotatePositions 1842                                      ??___ftge 002E  
                                    ??___wmul 002C                FillServoPositionString@forward 008A  
                                 __pdataBANK0 00BF                                   __pdataBANK1 0100  
                            __CFG_LPT1OSC$OFF 000000                                      ??_memset 002E  
                _FillServoPositionString$1140 0092                  _FillServoPositionString$1141 0095  
                _FillServoPositionString$1142 00A3                  _FillServoPositionString$1143 00A5  
                _FillServoPositionString$1144 0098                  _FillServoPositionString$1138 00AC  
                _FillServoPositionString$1139 00AE                                      ??_strcat 0032  
                                    ??_strlen 002A                             __size_of___altoft 007A  
                           __size_of___awtoft 0038                             __size_of___ftpack 00AE  
                                 __pbssCOMRAM 0036                                 __pcstackBANK0 0060  
                           __size_of_high_isr 18D0                                   sprintf@flag 0068  
  FillServoPositionString@newVerticalPosition 00A1                                    sin@coeff_a 033F  
                                  sin@coeff_b 034E                                   sprintf@prec 0069  
                                _forwardSpeed 00C2                                     _main$1136 00B9  
                                   _main$1137 00BC                              ___lwdiv@dividend 0028  
                                   __pintcode 0008                                      ?___ftadd 006F  
                                    ?___ftdiv 0085                                      ?___ftneg 0028  
                                    ?___ftmul 0060                                      ?___ftsub 009A  
                                    ?___fttol 007B                                      ?___lwdiv 0028  
                                    ?___lwmod 002F                                   __pintcodelo 0018  
                                 ??_UART_Init 0028                                   __smallconst 0300  
                                   _eval_poly 14B2                                      ?_low_isr 0001  
                            ___lwdiv@quotient 002C                  __size_of_EmptyMovementString 001E  
                                    ?_sprintf 0060                                __size_of_floor 00E2  
                              __size_of_frexp 0078                              ?_RotatePositions 0001  
                              ___wmul@product 002C                              __CFG_WDTPS$32768 000000  
                                   _servosets 0100                                     _positions 0325  
                        UART_Write_String@str 002E                             ___wmul@multiplier 0028  
        FillServoPositionString@deltaVertical 009F                                    ?_eval_poly 007B  
                                   copy_data0 1AEC                                     copy_data1 1B0C  
                                   frexp@eptr 002B                                      __Hrparam 0000  
                    ?_FillServoPositionString 008A                                      __Lrparam 0000  
                            __size_of___ftadd 01AE                              __size_of___ftdiv 00E8  
                            __size_of___ftneg 0024                                      ___altoft 19E6  
                                    _cos$1145 00B0                              __size_of___ftmul 00F6  
                            __size_of___ftsub 0042                              __size_of___fttol 00F8  
                            __size_of___lwdiv 0052                              __size_of___lwmod 0042  
                                    ___awtoft 1CFC                                      ___ftpack 16FA  
                           _UART_Write_String 1B96                                    sprintf@val 006A  
                                  strcat@from 0030                            ?_UART_Write_String 002E  
                             ___lwdiv@divisor 002A                               ___lwdiv@counter 002E  
                            __size_of_low_isr 00AE                                      __ptext10 12E8  
                                    __ptext11 1D34                                      __ptext20 1C80  
                                    __ptext12 17A8                                      __ptext21 1BEC  
                                    __ptext13 08DC                                      __ptext30 1DF6  
                                    __ptext22 1D8E                                      __ptext14 1B96  
                                    __ptext23 10FA                                      __ptext15 1CC2  
                                    __ptext24 11F2                                      __ptext16 1E10  
                                    __ptext25 0E00                                      __ptext17 0368  
                                    __ptext26 1CFC                                      __ptext18 1B3E  
                                    __ptext27 16FA                                      __ptext19 0FAE  
                                    __ptext28 1DD8                                      __ptext29 1D62  
                                    _sin$1146 00A6                                      _high_isr 0008  
                            __size_of_sprintf 014C                           ??_UART_Write_String 0030  
                               __size_of_main 00C2                  __size_of_ConfigureOscillator 001A  
                                    int$flags 0038                                      _rotation 00BF  
                                    main@left 00B6                     __end_of_UART_Write_String 1BEC  
                                 _OSCTUNEbits 000F9B                                   ??_eval_poly 0034  
                                    memset@p1 0028                                      intlevel1 0000  
                                    intlevel2 0000                                     sprintf@ap 0066  
                                   sprintf@sp 0060               __end_of_FillServoPositionString 08DC  
                            ___lwmod@dividend 002F                                    _OSCCONbits 000FD3  
                          UART_Write_String@a 0035                            UART_Write_String@i 0033  
                         _EmptyMovementString 1DD8                                      sprintf@c 006C  
                                    sprintf@f 0062                                      strcat@cp 0032  
                                    strcat@to 002E                               ___lwmod@divisor 0031  
                                    strlen@cp 002C                               ___lwmod@counter 0033  
                                  _UART_Write 1E10                          ?_EmptyMovementString 0001  
