

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed Oct 04 02:32:16 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           ; Version 1.44
    34                           ; Generated 14/09/2017 GMT
    35                           ; 
    36                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F2480 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	smallconst
    69  000300                     __psmallconst:
    70                           	opt stack 0
    71  000300  00                 	db	0
    72  000301                     _positions:
    73                           	opt stack 0
    74  000301  0000               	dw	0
    75  000303  0000               	dw	0
    76  000305  00C8               	dw	200
    77  000307  0000               	dw	0
    78  000309  0000               	dw	0
    79  00030B  00C8               	dw	200
    80  00030D  0000               	dw	0
    81  00030F  FF38               	dw	65336
    82  000311                     __end_of_positions:
    83                           	opt stack 0
    84  000311                     _dpowers:
    85                           	opt stack 0
    86  000311  0001               	dw	1
    87  000313  000A               	dw	10
    88  000315  0064               	dw	100
    89  000317  03E8               	dw	1000
    90  000319  2710               	dw	10000
    91  00031B                     __end_of_dpowers:
    92                           	opt stack 0
    93  00031B                     _SERVOSETS:
    94                           	opt stack 0
    95  00031B  0006               	dw	6
    96  00031D                     __end_of_SERVOSETS:
    97                           	opt stack 0
    98  00031D                     _servosets:
    99                           	opt stack 0
   100  00031D  0001               	dw	1
   101  00031F  31                 	db	49
   102  000320  32                 	db	50
   103  000321  00                 	db	0
   104  000322  31                 	db	49
   105  000323  00                 	db	0
   106  000324  00                 	db	0
   107  000325  32                 	db	50
   108  000326  00                 	db	0
   109  000327  00                 	db	0
   110  000328  0708               	dw	1800
   111  00032A  0898               	dw	2200
   112  00032C  0708               	dw	1800
   113  00032E  0000               	dw	0
   114  000330  0000               	dw	0
   115  000332  0000               	dw	0
   116  000334  00                 	db	0
   117  000335  00                 	db	0
   118  000336  00                 	db	0
   119  000337  00                 	db	0
   120  000338  0001               	dw	1
   121  00033A  34                 	db	52
   122  00033B  00                 	db	0
   123  00033C  00                 	db	0
   124  00033D  35                 	db	53
   125  00033E  00                 	db	0
   126  00033F  00                 	db	0
   127  000340  36                 	db	54
   128  000341  00                 	db	0
   129  000342  00                 	db	0
   130  000343  0578               	dw	1400
   131  000345  0640               	dw	1600
   132  000347  06A4               	dw	1700
   133  000349  0000               	dw	0
   134  00034B  0000               	dw	0
   135  00034D  0000               	dw	0
   136  00034F  00                 	db	0
   137  000350  00                 	db	0
   138  000351  00                 	db	0
   139  000352  00                 	db	0
   140  000353  0001               	dw	1
   141  000355  38                 	db	56
   142  000356  00                 	db	0
   143  000357  00                 	db	0
   144  000358  39                 	db	57
   145  000359  00                 	db	0
   146  00035A  00                 	db	0
   147  00035B  31                 	db	49
   148  00035C  30                 	db	48
   149  00035D  00                 	db	0
   150  00035E  03E8               	dw	1000
   151  000360  0640               	dw	1600
   152  000362  0708               	dw	1800
   153  000364  0000               	dw	0
   154  000366  0000               	dw	0
   155  000368  0000               	dw	0
   156  00036A  00                 	db	0
   157  00036B  00                 	db	0
   158  00036C  00                 	db	0
   159  00036D  00                 	db	0
   160  00036E  0001               	dw	1
   161  000370  31                 	db	49
   162  000371  36                 	db	54
   163  000372  00                 	db	0
   164  000373  31                 	db	49
   165  000374  37                 	db	55
   166  000375  00                 	db	0
   167  000376  31                 	db	49
   168  000377  38                 	db	56
   169  000378  00                 	db	0
   170  000379  0578               	dw	1400
   171  00037B  04B0               	dw	1200
   172  00037D  05DC               	dw	1500
   173  00037F  0000               	dw	0
   174  000381  0000               	dw	0
   175  000383  0000               	dw	0
   176  000385  00                 	db	0
   177  000386  00                 	db	0
   178  000387  00                 	db	0
   179  000388  00                 	db	0
   180  000389  0001               	dw	1
   181  00038B  32                 	db	50
   182  00038C  30                 	db	48
   183  00038D  00                 	db	0
   184  00038E  32                 	db	50
   185  00038F  31                 	db	49
   186  000390  00                 	db	0
   187  000391  32                 	db	50
   188  000392  32                 	db	50
   189  000393  00                 	db	0
   190  000394  07D0               	dw	2000
   191  000396  0514               	dw	1300
   192  000398  03E8               	dw	1000
   193  00039A  0000               	dw	0
   194  00039C  0000               	dw	0
   195  00039E  0000               	dw	0
   196  0003A0  00                 	db	0
   197  0003A1  00                 	db	0
   198  0003A2  00                 	db	0
   199  0003A3  00                 	db	0
   200  0003A4  0001               	dw	1
   201  0003A6  32                 	db	50
   202  0003A7  34                 	db	52
   203  0003A8  00                 	db	0
   204  0003A9  32                 	db	50
   205  0003AA  35                 	db	53
   206  0003AB  00                 	db	0
   207  0003AC  32                 	db	50
   208  0003AD  36                 	db	54
   209  0003AE  00                 	db	0
   210  0003AF  076C               	dw	1900
   211  0003B1  0578               	dw	1400
   212  0003B3  03E8               	dw	1000
   213  0003B5  0000               	dw	0
   214  0003B7  0000               	dw	0
   215  0003B9  0000               	dw	0
   216  0003BB  00                 	db	0
   217  0003BC  00                 	db	0
   218  0003BD  00                 	db	0
   219  0003BE  00                 	db	0
   220  0003BF                     __end_of_servosets:
   221                           	opt stack 0
   222  0000                     _OSCCONbits	set	4051
   223  0000                     _OSCTUNEbits	set	3995
   224  0000                     _TXREG	set	4013
   225  0000                     _TRISCbits	set	3988
   226  0000                     _RCSTAbits	set	4011
   227  0000                     _SPBRGH	set	4016
   228  0000                     _SPBRG	set	4015
   229  0000                     _TXSTAbits	set	4012
   230  0000                     _BAUDCONbits	set	4024
   231  0000                     _TRMT	set	32097
   232  0003BF                     STR_10:
   233  0003BF  54                 	db	84	;'T'
   234  0003C0  32                 	db	50	;'2'
   235  0003C1  30                 	db	48	;'0'
   236  0003C2  30                 	db	48	;'0'
   237  0003C3  30                 	db	48	;'0'
   238  0003C4  0D                 	db	13
   239  0003C5  00                 	db	0
   240  0003C6                     STR_3:
   241  0003C6  25                 	db	37
   242  0003C7  64                 	db	100	;'d'
   243  0003C8  00                 	db	0
   244  0003C9                     STR_1:
   245  0003C9  23                 	db	35
   246  0003CA  00                 	db	0
   247  0003CB                     STR_2:
   248  0003CB  50                 	db	80	;'P'
   249  0003CC  00                 	db	0
   250  0000                     
   251                           ; #config settings
   252  0003CD  00                 	db	0	; dummy byte at the end
   253  0000                     
   254                           	psect	cinit
   255  000D2A                     __pcinit:
   256                           	opt stack 0
   257  000D2A                     start_initialization:
   258                           	opt stack 0
   259  000D2A                     __initialization:
   260                           	opt stack 0
   261                           
   262                           ; Clear objects allocated to BANK1 (256 bytes)
   263  000D2A  EE01  F000         	lfsr	0,__pbssBANK1
   264  000D2E  EE11 F000          	lfsr	1,256
   265  000D32                     clear_0:
   266  000D32  6AEE               	clrf	postinc0,c
   267  000D34  50E5               	movf	postdec1,w,c
   268  000D36  50E1               	movf	fsr1l,w,c
   269  000D38  E1FC               	bnz	clear_0
   270  000D3A  50E2               	movf	fsr1h,w,c
   271  000D3C  E1FA               	bnz	clear_0
   272  000D3E                     end_of_initialization:
   273                           	opt stack 0
   274  000D3E                     __end_of__initialization:
   275                           	opt stack 0
   276  000D3E  9038               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   277  000D40  9238               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   278  000D42  0E00               	movlw	low (__Lmediumconst shr (0+16))
   279  000D44  6EF8               	movwf	tblptru,c
   280  000D46  0100               	movlb	0
   281  000D48  EF39  F006         	goto	_main	;jump to C main() function
   282                           tblptru	equ	0xFF8
   283                           postinc0	equ	0xFEE
   284                           postdec1	equ	0xFE5
   285                           fsr1h	equ	0xFE2
   286                           fsr1l	equ	0xFE1
   287                           
   288                           	psect	bssBANK1
   289  000100                     __pbssBANK1:
   290                           	opt stack 0
   291  000100                     _movementString:
   292                           	opt stack 0
   293  000100                     	ds	256
   294                           tblptru	equ	0xFF8
   295                           postinc0	equ	0xFEE
   296                           postdec1	equ	0xFE5
   297                           fsr1h	equ	0xFE2
   298                           fsr1l	equ	0xFE1
   299                           
   300                           	psect	cstackBANK0
   301  000060                     __pcstackBANK0:
   302                           	opt stack 0
   303  000060                     ?_sprintf:
   304                           	opt stack 0
   305  000060                     sprintf@sp:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x0
   309  000060                     	ds	2
   310  000062                     sprintf@f:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x2
   314  000062                     	ds	4
   315  000066                     sprintf@ap:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x6
   319  000066                     	ds	2
   320  000068                     sprintf@flag:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0x8
   324  000068                     	ds	1
   325  000069                     sprintf@prec:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0x9
   329  000069                     	ds	1
   330  00006A                     sprintf@val:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0xA
   334  00006A                     	ds	2
   335  00006C                     sprintf@c:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0xC
   339  00006C                     	ds	1
   340  00006D                     FillServoPositionString@tmp:
   341                           	opt stack 0
   342  00006D                     InitServos@tmp:
   343                           	opt stack 0
   344                           
   345                           ; 5 bytes @ 0xD
   346  00006D                     	ds	5
   347  000072                     FillServoPositionString@i:
   348                           	opt stack 0
   349  000072                     InitServos@i:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x12
   353  000072                     	ds	2
   354                           tblptru	equ	0xFF8
   355                           postinc0	equ	0xFEE
   356                           postdec1	equ	0xFE5
   357                           fsr1h	equ	0xFE2
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	cstackCOMRAM
   361  000001                     __pcstackCOMRAM:
   362                           	opt stack 0
   363  000001                     ??_high_isr:
   364  000001                     
   365                           ; 1 bytes @ 0x0
   366  000001                     	ds	18
   367  000013                     ??_low_isr:
   368                           
   369                           ; 1 bytes @ 0x12
   370  000013                     	ds	21
   371  000028                     ??_UART_Init:
   372  000028                     ?_strlen:
   373                           	opt stack 0
   374  000028                     ?___wmul:
   375                           	opt stack 0
   376  000028                     ?___lwdiv:
   377                           	opt stack 0
   378  000028                     UART_Write@data:
   379                           	opt stack 0
   380  000028                     ___wmul@multiplier:
   381                           	opt stack 0
   382  000028                     ___lwdiv@dividend:
   383                           	opt stack 0
   384  000028                     memset@p1:
   385                           	opt stack 0
   386  000028                     strlen@s:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x27
   390  000028                     	ds	2
   391  00002A                     ??_strlen:
   392  00002A                     ___wmul@multiplicand:
   393                           	opt stack 0
   394  00002A                     ___lwdiv@divisor:
   395                           	opt stack 0
   396  00002A                     memset@c:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x29
   400  00002A                     	ds	2
   401  00002C                     ___wmul@product:
   402                           	opt stack 0
   403  00002C                     ___lwdiv@quotient:
   404                           	opt stack 0
   405  00002C                     memset@n:
   406                           	opt stack 0
   407  00002C                     strlen@cp:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x2B
   411  00002C                     	ds	2
   412  00002E                     ___lwdiv@counter:
   413                           	opt stack 0
   414  00002E                     UART_Write_String@str:
   415                           	opt stack 0
   416  00002E                     memset@p:
   417                           	opt stack 0
   418  00002E                     strcat@to:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x2D
   422  00002E                     	ds	1
   423  00002F                     ?___lwmod:
   424                           	opt stack 0
   425  00002F                     ___lwmod@dividend:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x2E
   429  00002F                     	ds	1
   430  000030                     ??_UART_Write_String:
   431  000030                     strcat@from:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x2F
   435  000030                     	ds	1
   436  000031                     UART_Write_String@arrayLength:
   437                           	opt stack 0
   438  000031                     ___lwmod@divisor:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x30
   442  000031                     	ds	1
   443  000032                     strcat@cp:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x31
   447  000032                     	ds	1
   448  000033                     ___lwmod@counter:
   449                           	opt stack 0
   450  000033                     UART_Write_String@i:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x32
   454  000033                     	ds	1
   455  000034                     ??_sprintf:
   456                           
   457                           ; 1 bytes @ 0x33
   458  000034                     	ds	1
   459  000035                     UART_Write_String@a:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x34
   463  000035                     	ds	1
   464  000036                     ??_main:
   465                           
   466                           ; 1 bytes @ 0x35
   467  000036                     	ds	2
   468                           tblptru	equ	0xFF8
   469                           postinc0	equ	0xFEE
   470                           postdec1	equ	0xFE5
   471                           fsr1h	equ	0xFE2
   472                           fsr1l	equ	0xFE1
   473                           
   474 ;;
   475 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   476 ;;
   477 ;; *************** function _main *****************
   478 ;; Defined at:
   479 ;;		line 147 in file "main.c"
   480 ;; Parameters:    Size  Location     Type
   481 ;;		None
   482 ;; Auto vars:     Size  Location     Type
   483 ;;		None
   484 ;; Return value:  Size  Location     Type
   485 ;;                  1    wreg      void 
   486 ;; Registers used:
   487 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   488 ;; Tracked objects:
   489 ;;		On entry : 0/0
   490 ;;		On exit  : 0/0
   491 ;;		Unchanged: 0/0
   492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   493 ;;      Params:         0       0       0       0
   494 ;;      Locals:         0       0       0       0
   495 ;;      Temps:          2       0       0       0
   496 ;;      Totals:         2       0       0       0
   497 ;;Total ram usage:        2 bytes
   498 ;; Hardware stack levels required when called:    5
   499 ;; This function calls:
   500 ;;		_ConfigureOscillator
   501 ;;		_FillServoPositionString
   502 ;;		_InitApp
   503 ;;		_InitServos
   504 ;;		_UART_Init
   505 ;;		_UART_Write_String
   506 ;; This function is called by:
   507 ;;		Startup code after reset
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           	psect	text0
   512  000C72                     __ptext0:
   513                           	opt stack 0
   514  000C72                     _main:
   515                           	opt stack 26
   516                           
   517                           ;main.c: 152: ConfigureOscillator();
   518                           
   519                           ;incstack = 0
   520  000C72  ECB5  F006         	call	_ConfigureOscillator	;wreg free
   521                           
   522                           ;main.c: 157: InitApp();
   523  000C76  ECC8  F006         	call	_InitApp	;wreg free
   524                           
   525                           ;main.c: 161: UART_Init();
   526  000C7A  EC55  F006         	call	_UART_Init	;wreg free
   527                           
   528                           ;main.c: 165: InitServos();
   529  000C7E  ECE7  F001         	call	_InitServos	;wreg free
   530                           
   531                           ;main.c: 169: FillServoPositionString();
   532  000C82  EC4D  F003         	call	_FillServoPositionString	;wreg free
   533                           
   534                           ;main.c: 173: UART_Write_String(movementString);
   535  000C86  0E00               	movlw	low _movementString
   536  000C88  6E2E               	movwf	UART_Write_String@str,c
   537  000C8A  0E01               	movlw	high _movementString
   538  000C8C  6E2F               	movwf	UART_Write_String@str+1,c
   539  000C8E  ECA7  F005         	call	_UART_Write_String	;wreg free
   540  000C92                     
   541                           ;main.c: 181: _delay((unsigned long)((1000)*(2000000/4000.0)));
   542  000C92  0E03               	movlw	3
   543  000C94  6E37               	movwf	(??_main+1)& (0+255),c
   544  000C96  0E8A               	movlw	138
   545  000C98  6E36               	movwf	??_main& (0+255),c
   546  000C9A  0E56               	movlw	86
   547  000C9C                     u537:
   548  000C9C  2EE8               	decfsz	wreg,f,c
   549  000C9E  D7FE               	bra	u537
   550  000CA0  2E36               	decfsz	??_main& (0+255),f,c
   551  000CA2  D7FC               	bra	u537
   552  000CA4  2E37               	decfsz	(??_main+1)& (0+255),f,c
   553  000CA6  D7FA               	bra	u537
   554  000CA8  D7F4               	goto	l65
   555  000CAA                     __end_of_main:
   556                           	opt stack 0
   557                           tblptru	equ	0xFF8
   558                           postinc0	equ	0xFEE
   559                           wreg	equ	0xFE8
   560                           postdec1	equ	0xFE5
   561                           fsr1h	equ	0xFE2
   562                           fsr1l	equ	0xFE1
   563                           
   564 ;; *************** function _UART_Init *****************
   565 ;; Defined at:
   566 ;;		line 186 in file "main.c"
   567 ;; Parameters:    Size  Location     Type
   568 ;;		None
   569 ;; Auto vars:     Size  Location     Type
   570 ;;		None
   571 ;; Return value:  Size  Location     Type
   572 ;;                  1    wreg      unsigned char 
   573 ;; Registers used:
   574 ;;		wreg, status,2
   575 ;; Tracked objects:
   576 ;;		On entry : 0/0
   577 ;;		On exit  : 0/0
   578 ;;		Unchanged: 0/0
   579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   580 ;;      Params:         0       0       0       0
   581 ;;      Locals:         0       0       0       0
   582 ;;      Temps:          2       0       0       0
   583 ;;      Totals:         2       0       0       0
   584 ;;Total ram usage:        2 bytes
   585 ;; Hardware stack levels used:    1
   586 ;; Hardware stack levels required when called:    2
   587 ;; This function calls:
   588 ;;		Nothing
   589 ;; This function is called by:
   590 ;;		_main
   591 ;; This function uses a non-reentrant model
   592 ;;
   593                           
   594                           	psect	text1
   595  000CAA                     __ptext1:
   596                           	opt stack 0
   597  000CAA                     _UART_Init:
   598                           	opt stack 28
   599                           
   600                           ;main.c: 187: BAUDCONbits.BRG16 = 0b1;
   601                           
   602                           ;incstack = 0
   603  000CAA  86B8               	bsf	4024,3,c	;volatile
   604                           
   605                           ;main.c: 188: TXSTAbits.BRGH = 0b1;
   606  000CAC  84AC               	bsf	4012,2,c	;volatile
   607                           
   608                           ;main.c: 189: SPBRG = 51;
   609  000CAE  0E33               	movlw	51
   610  000CB0  6EAF               	movwf	4015,c	;volatile
   611                           
   612                           ;main.c: 190: SPBRGH = 0;
   613  000CB2  0E00               	movlw	0
   614  000CB4  6EB0               	movwf	4016,c	;volatile
   615                           
   616                           ;main.c: 191: TXSTAbits.SYNC = 0b0;
   617  000CB6  98AC               	bcf	4012,4,c	;volatile
   618                           
   619                           ;main.c: 192: RCSTAbits.SPEN = 0b1;
   620  000CB8  8EAB               	bsf	4011,7,c	;volatile
   621                           
   622                           ;main.c: 193: TXSTAbits.TXEN = 0b1;
   623  000CBA  8AAC               	bsf	4012,5,c	;volatile
   624                           
   625                           ;main.c: 195: TRISCbits.TRISC6 = 0b0;
   626  000CBC  9C94               	bcf	3988,6,c	;volatile
   627                           
   628                           ;main.c: 196: TRISCbits.TRISC7 = 0b1;
   629  000CBE  8E94               	bsf	3988,7,c	;volatile
   630                           
   631                           ;main.c: 198: _delay((unsigned long)((1000)*(2000000/4000.0)));
   632  000CC0  0E03               	movlw	3
   633  000CC2  6E29               	movwf	(??_UART_Init+1)& (0+255),c
   634  000CC4  0E8A               	movlw	138
   635  000CC6  6E28               	movwf	??_UART_Init& (0+255),c
   636  000CC8  0E56               	movlw	86
   637  000CCA                     u547:
   638  000CCA  2EE8               	decfsz	wreg,f,c
   639  000CCC  D7FE               	bra	u547
   640  000CCE  2E28               	decfsz	??_UART_Init& (0+255),f,c
   641  000CD0  D7FC               	bra	u547
   642  000CD2  2E29               	decfsz	(??_UART_Init+1)& (0+255),f,c
   643  000CD4  D7FA               	bra	u547
   644  000CD6  0012               	return	
   645  000CD8                     __end_of_UART_Init:
   646                           	opt stack 0
   647                           tblptru	equ	0xFF8
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1h	equ	0xFE2
   652                           fsr1l	equ	0xFE1
   653                           
   654 ;; *************** function _InitServos *****************
   655 ;; Defined at:
   656 ;;		line 251 in file "main.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;		None
   659 ;; Auto vars:     Size  Location     Type
   660 ;;  tmp             5   13[BANK0 ] unsigned char [5]
   661 ;;  i               2   18[BANK0 ] unsigned int 
   662 ;; Return value:  Size  Location     Type
   663 ;;                  1    wreg      void 
   664 ;; Registers used:
   665 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 0/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   671 ;;      Params:         0       0       0       0
   672 ;;      Locals:         0       7       0       0
   673 ;;      Temps:          0       0       0       0
   674 ;;      Totals:         0       7       0       0
   675 ;;Total ram usage:        7 bytes
   676 ;; Hardware stack levels used:    1
   677 ;; Hardware stack levels required when called:    4
   678 ;; This function calls:
   679 ;;		_EmptyMovementString
   680 ;;		_UART_Write_String
   681 ;;		___wmul
   682 ;;		_sprintf
   683 ;;		_strcat
   684 ;; This function is called by:
   685 ;;		_main
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           	psect	text2
   690  0003CE                     __ptext2:
   691                           	opt stack 0
   692  0003CE                     _InitServos:
   693                           	opt stack 26
   694                           
   695                           ;main.c: 252: char tmp[5];
   696                           ;main.c: 253: unsigned int i = 0;
   697                           
   698                           ;incstack = 0
   699  0003CE  0E00               	movlw	0
   700  0003D0  0100               	movlb	0	; () banked
   701  0003D2  6F73               	movwf	(InitServos@i+1)& (0+255),b
   702  0003D4  0E00               	movlw	0
   703  0003D6  6F72               	movwf	InitServos@i& (0+255),b
   704                           
   705                           ;main.c: 254: for(i = 0; i < SERVOSETS; i++){
   706  0003D8  0E00               	movlw	0
   707  0003DA  6F73               	movwf	(InitServos@i+1)& (0+255),b
   708  0003DC  0E00               	movlw	0
   709  0003DE  6F72               	movwf	InitServos@i& (0+255),b
   710  0003E0                     l1220:
   711                           
   712                           ; BSR set to: 0
   713  0003E0  0E1B               	movlw	low _SERVOSETS
   714  0003E2  6EF6               	movwf	tblptrl,c
   715  0003E4                     	if	1	;There is more than 1 active tblptr byte
   716  0003E4  0E03               	movlw	high _SERVOSETS
   717  0003E6  6EF7               	movwf	tblptrh,c
   718  0003E8                     	endif
   719  0003E8                     	if	0	;There are less than 3 active tblptr bytes
   720  0003E8                     	endif
   721  0003E8  0009               	tblrd		*+
   722  0003EA  50F5               	movf	tablat,w,c
   723  0003EC  5D72               	subwf	InitServos@i& (0+255),w,b
   724  0003EE  0009               	tblrd		*+
   725  0003F0  50F5               	movf	tablat,w,c
   726  0003F2  5973               	subwfb	(InitServos@i+1)& (0+255),w,b
   727  0003F4  B0D8               	btfsc	status,0,c
   728  0003F6  0012               	return	
   729                           
   730                           ; BSR set to: 0
   731                           ;main.c: 255: EmptyMovementString();
   732                           
   733                           ; BSR set to: 0
   734                           
   735                           ; BSR set to: 0
   736  0003F8  ECA6  F006         	call	_EmptyMovementString	;wreg free
   737                           
   738                           ;main.c: 256: strcat(movementString, "#");
   739  0003FC  0E00               	movlw	low _movementString
   740  0003FE  6E2E               	movwf	strcat@to,c
   741  000400  0E01               	movlw	high _movementString
   742  000402  6E2F               	movwf	strcat@to+1,c
   743  000404  0EC9               	movlw	low STR_1
   744  000406  6E30               	movwf	strcat@from,c
   745  000408  0E03               	movlw	high STR_1
   746  00040A  6E31               	movwf	strcat@from+1,c
   747  00040C  EC7B  F005         	call	_strcat	;wreg free
   748                           
   749                           ;main.c: 257: strcat(movementString, servosets[i].horizontalServo);
   750  000410  0E00               	movlw	low _movementString
   751  000412  6E2E               	movwf	strcat@to,c
   752  000414  0E01               	movlw	high _movementString
   753  000416  6E2F               	movwf	strcat@to+1,c
   754  000418  C072  F028         	movff	InitServos@i,___wmul@multiplier
   755  00041C  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
   756  000420  0E00               	movlw	0
   757  000422  6E2B               	movwf	___wmul@multiplicand+1,c
   758  000424  0E1B               	movlw	27
   759  000426  6E2A               	movwf	___wmul@multiplicand,c
   760  000428  EC82  F006         	call	___wmul	;wreg free
   761  00042C  0E02               	movlw	2
   762  00042E  2628               	addwf	?___wmul,f,c
   763  000430  0E00               	movlw	0
   764  000432  2229               	addwfc	?___wmul+1,f,c
   765  000434  0E1D               	movlw	low _servosets
   766  000436  2428               	addwf	?___wmul,w,c
   767  000438  6E30               	movwf	strcat@from,c
   768  00043A  0E03               	movlw	high _servosets
   769  00043C  2029               	addwfc	?___wmul+1,w,c
   770  00043E  6E31               	movwf	strcat@from+1,c
   771  000440  EC7B  F005         	call	_strcat	;wreg free
   772                           
   773                           ;main.c: 258: strcat(movementString, "P");
   774  000444  0E00               	movlw	low _movementString
   775  000446  6E2E               	movwf	strcat@to,c
   776  000448  0E01               	movlw	high _movementString
   777  00044A  6E2F               	movwf	strcat@to+1,c
   778  00044C  0ECB               	movlw	low STR_2
   779  00044E  6E30               	movwf	strcat@from,c
   780  000450  0E03               	movlw	high STR_2
   781  000452  6E31               	movwf	strcat@from+1,c
   782  000454  EC7B  F005         	call	_strcat	;wreg free
   783                           
   784                           ;main.c: 259: sprintf(tmp, "%d", servosets[i].horizontalMediumPosition);
   785  000458  0E6D               	movlw	low InitServos@tmp
   786  00045A  0100               	movlb	0	; () banked
   787  00045C  6F60               	movwf	sprintf@sp& (0+255),b
   788  00045E  0E00               	movlw	high InitServos@tmp
   789  000460  6F61               	movwf	(sprintf@sp+1)& (0+255),b
   790  000462  0EC6               	movlw	low STR_3
   791  000464  6F62               	movwf	sprintf@f& (0+255),b
   792  000466  0E03               	movlw	high STR_3
   793  000468  6F63               	movwf	(sprintf@f+1)& (0+255),b
   794  00046A  C072  F028         	movff	InitServos@i,___wmul@multiplier
   795  00046E  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
   796  000472  0E00               	movlw	0
   797  000474  6E2B               	movwf	___wmul@multiplicand+1,c
   798  000476  0E1B               	movlw	27
   799  000478  6E2A               	movwf	___wmul@multiplicand,c
   800  00047A  EC82  F006         	call	___wmul	;wreg free
   801  00047E  0E0B               	movlw	11
   802  000480  2628               	addwf	?___wmul,f,c
   803  000482  0E00               	movlw	0
   804  000484  2229               	addwfc	?___wmul+1,f,c
   805  000486  0E1D               	movlw	low _servosets
   806  000488  2428               	addwf	?___wmul,w,c
   807  00048A  6EF6               	movwf	tblptrl,c
   808  00048C  0E03               	movlw	high _servosets
   809  00048E  2029               	addwfc	?___wmul+1,w,c
   810  000490  6EF7               	movwf	tblptrh,c
   811  000492                     	if	0	;There are less than 3 active tblptr bytes
   812  000492                     	endif
   813  000492  0009               	tblrd		*+
   814  000494  CFF5 F064          	movff	tablat,?_sprintf+4
   815  000498  000A               	tblrd		*-
   816  00049A  CFF5 F065          	movff	tablat,?_sprintf+5
   817  00049E  EC8A  F004         	call	_sprintf	;wreg free
   818                           
   819                           ;main.c: 260: strcat(movementString, tmp);
   820  0004A2  0E00               	movlw	low _movementString
   821  0004A4  6E2E               	movwf	strcat@to,c
   822  0004A6  0E01               	movlw	high _movementString
   823  0004A8  6E2F               	movwf	strcat@to+1,c
   824  0004AA  0E6D               	movlw	low InitServos@tmp
   825  0004AC  6E30               	movwf	strcat@from,c
   826  0004AE  0E00               	movlw	high InitServos@tmp
   827  0004B0  6E31               	movwf	strcat@from+1,c
   828  0004B2  EC7B  F005         	call	_strcat	;wreg free
   829                           
   830                           ;main.c: 261: strcat(movementString, "\r");
   831  0004B6  0E00               	movlw	low _movementString
   832  0004B8  6E2E               	movwf	strcat@to,c
   833  0004BA  0E01               	movlw	high _movementString
   834  0004BC  6E2F               	movwf	strcat@to+1,c
   835  0004BE  0EC4               	movlw	low (STR_10+5)
   836  0004C0  6E30               	movwf	strcat@from,c
   837  0004C2  0E03               	movlw	high (STR_10+5)
   838  0004C4  6E31               	movwf	strcat@from+1,c
   839  0004C6  EC7B  F005         	call	_strcat	;wreg free
   840                           
   841                           ;main.c: 262: UART_Write_String(movementString);
   842  0004CA  0E00               	movlw	low _movementString
   843  0004CC  6E2E               	movwf	UART_Write_String@str,c
   844  0004CE  0E01               	movlw	high _movementString
   845  0004D0  6E2F               	movwf	UART_Write_String@str+1,c
   846  0004D2  ECA7  F005         	call	_UART_Write_String	;wreg free
   847                           
   848                           ;main.c: 263: EmptyMovementString();
   849  0004D6  ECA6  F006         	call	_EmptyMovementString	;wreg free
   850                           
   851                           ;main.c: 264: strcat(movementString, "#");
   852  0004DA  0E00               	movlw	low _movementString
   853  0004DC  6E2E               	movwf	strcat@to,c
   854  0004DE  0E01               	movlw	high _movementString
   855  0004E0  6E2F               	movwf	strcat@to+1,c
   856  0004E2  0EC9               	movlw	low STR_1
   857  0004E4  6E30               	movwf	strcat@from,c
   858  0004E6  0E03               	movlw	high STR_1
   859  0004E8  6E31               	movwf	strcat@from+1,c
   860  0004EA  EC7B  F005         	call	_strcat	;wreg free
   861                           
   862                           ;main.c: 265: strcat(movementString, servosets[i].upperVerticalServo);
   863  0004EE  0E00               	movlw	low _movementString
   864  0004F0  6E2E               	movwf	strcat@to,c
   865  0004F2  0E01               	movlw	high _movementString
   866  0004F4  6E2F               	movwf	strcat@to+1,c
   867  0004F6  C072  F028         	movff	InitServos@i,___wmul@multiplier
   868  0004FA  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
   869  0004FE  0E00               	movlw	0
   870  000500  6E2B               	movwf	___wmul@multiplicand+1,c
   871  000502  0E1B               	movlw	27
   872  000504  6E2A               	movwf	___wmul@multiplicand,c
   873  000506  EC82  F006         	call	___wmul	;wreg free
   874  00050A  0E05               	movlw	5
   875  00050C  2628               	addwf	?___wmul,f,c
   876  00050E  0E00               	movlw	0
   877  000510  2229               	addwfc	?___wmul+1,f,c
   878  000512  0E1D               	movlw	low _servosets
   879  000514  2428               	addwf	?___wmul,w,c
   880  000516  6E30               	movwf	strcat@from,c
   881  000518  0E03               	movlw	high _servosets
   882  00051A  2029               	addwfc	?___wmul+1,w,c
   883  00051C  6E31               	movwf	strcat@from+1,c
   884  00051E  EC7B  F005         	call	_strcat	;wreg free
   885                           
   886                           ;main.c: 266: strcat(movementString, "P");
   887  000522  0E00               	movlw	low _movementString
   888  000524  6E2E               	movwf	strcat@to,c
   889  000526  0E01               	movlw	high _movementString
   890  000528  6E2F               	movwf	strcat@to+1,c
   891  00052A  0ECB               	movlw	low STR_2
   892  00052C  6E30               	movwf	strcat@from,c
   893  00052E  0E03               	movlw	high STR_2
   894  000530  6E31               	movwf	strcat@from+1,c
   895  000532  EC7B  F005         	call	_strcat	;wreg free
   896                           
   897                           ;main.c: 267: sprintf(tmp, "%d", servosets[i].verticalUpperMediumPosition);
   898  000536  0E6D               	movlw	low InitServos@tmp
   899  000538  0100               	movlb	0	; () banked
   900  00053A  6F60               	movwf	sprintf@sp& (0+255),b
   901  00053C  0E00               	movlw	high InitServos@tmp
   902  00053E  6F61               	movwf	(sprintf@sp+1)& (0+255),b
   903  000540  0EC6               	movlw	low STR_3
   904  000542  6F62               	movwf	sprintf@f& (0+255),b
   905  000544  0E03               	movlw	high STR_3
   906  000546  6F63               	movwf	(sprintf@f+1)& (0+255),b
   907  000548  C072  F028         	movff	InitServos@i,___wmul@multiplier
   908  00054C  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
   909  000550  0E00               	movlw	0
   910  000552  6E2B               	movwf	___wmul@multiplicand+1,c
   911  000554  0E1B               	movlw	27
   912  000556  6E2A               	movwf	___wmul@multiplicand,c
   913  000558  EC82  F006         	call	___wmul	;wreg free
   914  00055C  0E0D               	movlw	13
   915  00055E  2628               	addwf	?___wmul,f,c
   916  000560  0E00               	movlw	0
   917  000562  2229               	addwfc	?___wmul+1,f,c
   918  000564  0E1D               	movlw	low _servosets
   919  000566  2428               	addwf	?___wmul,w,c
   920  000568  6EF6               	movwf	tblptrl,c
   921  00056A  0E03               	movlw	high _servosets
   922  00056C  2029               	addwfc	?___wmul+1,w,c
   923  00056E  6EF7               	movwf	tblptrh,c
   924  000570                     	if	0	;There are less than 3 active tblptr bytes
   925  000570                     	endif
   926  000570  0009               	tblrd		*+
   927  000572  CFF5 F064          	movff	tablat,?_sprintf+4
   928  000576  000A               	tblrd		*-
   929  000578  CFF5 F065          	movff	tablat,?_sprintf+5
   930  00057C  EC8A  F004         	call	_sprintf	;wreg free
   931                           
   932                           ;main.c: 268: strcat(movementString, tmp);
   933  000580  0E00               	movlw	low _movementString
   934  000582  6E2E               	movwf	strcat@to,c
   935  000584  0E01               	movlw	high _movementString
   936  000586  6E2F               	movwf	strcat@to+1,c
   937  000588  0E6D               	movlw	low InitServos@tmp
   938  00058A  6E30               	movwf	strcat@from,c
   939  00058C  0E00               	movlw	high InitServos@tmp
   940  00058E  6E31               	movwf	strcat@from+1,c
   941  000590  EC7B  F005         	call	_strcat	;wreg free
   942                           
   943                           ;main.c: 269: strcat(movementString, "\r");
   944  000594  0E00               	movlw	low _movementString
   945  000596  6E2E               	movwf	strcat@to,c
   946  000598  0E01               	movlw	high _movementString
   947  00059A  6E2F               	movwf	strcat@to+1,c
   948  00059C  0EC4               	movlw	low (STR_10+5)
   949  00059E  6E30               	movwf	strcat@from,c
   950  0005A0  0E03               	movlw	high (STR_10+5)
   951  0005A2  6E31               	movwf	strcat@from+1,c
   952  0005A4  EC7B  F005         	call	_strcat	;wreg free
   953                           
   954                           ;main.c: 270: UART_Write_String(movementString);
   955  0005A8  0E00               	movlw	low _movementString
   956  0005AA  6E2E               	movwf	UART_Write_String@str,c
   957  0005AC  0E01               	movlw	high _movementString
   958  0005AE  6E2F               	movwf	UART_Write_String@str+1,c
   959  0005B0  ECA7  F005         	call	_UART_Write_String	;wreg free
   960                           
   961                           ;main.c: 271: EmptyMovementString();
   962  0005B4  ECA6  F006         	call	_EmptyMovementString	;wreg free
   963                           
   964                           ;main.c: 272: strcat(movementString, "#");
   965  0005B8  0E00               	movlw	low _movementString
   966  0005BA  6E2E               	movwf	strcat@to,c
   967  0005BC  0E01               	movlw	high _movementString
   968  0005BE  6E2F               	movwf	strcat@to+1,c
   969  0005C0  0EC9               	movlw	low STR_1
   970  0005C2  6E30               	movwf	strcat@from,c
   971  0005C4  0E03               	movlw	high STR_1
   972  0005C6  6E31               	movwf	strcat@from+1,c
   973  0005C8  EC7B  F005         	call	_strcat	;wreg free
   974                           
   975                           ;main.c: 273: strcat(movementString, servosets[i].lowerVerticalServo);
   976  0005CC  0E00               	movlw	low _movementString
   977  0005CE  6E2E               	movwf	strcat@to,c
   978  0005D0  0E01               	movlw	high _movementString
   979  0005D2  6E2F               	movwf	strcat@to+1,c
   980  0005D4  C072  F028         	movff	InitServos@i,___wmul@multiplier
   981  0005D8  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
   982  0005DC  0E00               	movlw	0
   983  0005DE  6E2B               	movwf	___wmul@multiplicand+1,c
   984  0005E0  0E1B               	movlw	27
   985  0005E2  6E2A               	movwf	___wmul@multiplicand,c
   986  0005E4  EC82  F006         	call	___wmul	;wreg free
   987  0005E8  0E08               	movlw	8
   988  0005EA  2628               	addwf	?___wmul,f,c
   989  0005EC  0E00               	movlw	0
   990  0005EE  2229               	addwfc	?___wmul+1,f,c
   991  0005F0  0E1D               	movlw	low _servosets
   992  0005F2  2428               	addwf	?___wmul,w,c
   993  0005F4  6E30               	movwf	strcat@from,c
   994  0005F6  0E03               	movlw	high _servosets
   995  0005F8  2029               	addwfc	?___wmul+1,w,c
   996  0005FA  6E31               	movwf	strcat@from+1,c
   997  0005FC  EC7B  F005         	call	_strcat	;wreg free
   998                           
   999                           ;main.c: 274: strcat(movementString, "P");
  1000  000600  0E00               	movlw	low _movementString
  1001  000602  6E2E               	movwf	strcat@to,c
  1002  000604  0E01               	movlw	high _movementString
  1003  000606  6E2F               	movwf	strcat@to+1,c
  1004  000608  0ECB               	movlw	low STR_2
  1005  00060A  6E30               	movwf	strcat@from,c
  1006  00060C  0E03               	movlw	high STR_2
  1007  00060E  6E31               	movwf	strcat@from+1,c
  1008  000610  EC7B  F005         	call	_strcat	;wreg free
  1009                           
  1010                           ;main.c: 275: sprintf(tmp, "%d", servosets[i].verticalLowerMediumPosition);
  1011  000614  0E6D               	movlw	low InitServos@tmp
  1012  000616  0100               	movlb	0	; () banked
  1013  000618  6F60               	movwf	sprintf@sp& (0+255),b
  1014  00061A  0E00               	movlw	high InitServos@tmp
  1015  00061C  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1016  00061E  0EC6               	movlw	low STR_3
  1017  000620  6F62               	movwf	sprintf@f& (0+255),b
  1018  000622  0E03               	movlw	high STR_3
  1019  000624  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1020  000626  C072  F028         	movff	InitServos@i,___wmul@multiplier
  1021  00062A  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  1022  00062E  0E00               	movlw	0
  1023  000630  6E2B               	movwf	___wmul@multiplicand+1,c
  1024  000632  0E1B               	movlw	27
  1025  000634  6E2A               	movwf	___wmul@multiplicand,c
  1026  000636  EC82  F006         	call	___wmul	;wreg free
  1027  00063A  0E0F               	movlw	15
  1028  00063C  2628               	addwf	?___wmul,f,c
  1029  00063E  0E00               	movlw	0
  1030  000640  2229               	addwfc	?___wmul+1,f,c
  1031  000642  0E1D               	movlw	low _servosets
  1032  000644  2428               	addwf	?___wmul,w,c
  1033  000646  6EF6               	movwf	tblptrl,c
  1034  000648  0E03               	movlw	high _servosets
  1035  00064A  2029               	addwfc	?___wmul+1,w,c
  1036  00064C  6EF7               	movwf	tblptrh,c
  1037  00064E                     	if	0	;There are less than 3 active tblptr bytes
  1038  00064E                     	endif
  1039  00064E  0009               	tblrd		*+
  1040  000650  CFF5 F064          	movff	tablat,?_sprintf+4
  1041  000654  000A               	tblrd		*-
  1042  000656  CFF5 F065          	movff	tablat,?_sprintf+5
  1043  00065A  EC8A  F004         	call	_sprintf	;wreg free
  1044                           
  1045                           ;main.c: 276: strcat(movementString, tmp);
  1046  00065E  0E00               	movlw	low _movementString
  1047  000660  6E2E               	movwf	strcat@to,c
  1048  000662  0E01               	movlw	high _movementString
  1049  000664  6E2F               	movwf	strcat@to+1,c
  1050  000666  0E6D               	movlw	low InitServos@tmp
  1051  000668  6E30               	movwf	strcat@from,c
  1052  00066A  0E00               	movlw	high InitServos@tmp
  1053  00066C  6E31               	movwf	strcat@from+1,c
  1054  00066E  EC7B  F005         	call	_strcat	;wreg free
  1055                           
  1056                           ;main.c: 277: strcat(movementString, "\r");
  1057  000672  0E00               	movlw	low _movementString
  1058  000674  6E2E               	movwf	strcat@to,c
  1059  000676  0E01               	movlw	high _movementString
  1060  000678  6E2F               	movwf	strcat@to+1,c
  1061  00067A  0EC4               	movlw	low (STR_10+5)
  1062  00067C  6E30               	movwf	strcat@from,c
  1063  00067E  0E03               	movlw	high (STR_10+5)
  1064  000680  6E31               	movwf	strcat@from+1,c
  1065  000682  EC7B  F005         	call	_strcat	;wreg free
  1066                           
  1067                           ;main.c: 278: UART_Write_String(movementString);
  1068  000686  0E00               	movlw	low _movementString
  1069  000688  6E2E               	movwf	UART_Write_String@str,c
  1070  00068A  0E01               	movlw	high _movementString
  1071  00068C  6E2F               	movwf	UART_Write_String@str+1,c
  1072  00068E  ECA7  F005         	call	_UART_Write_String	;wreg free
  1073  000692  0100               	movlb	0	; () banked
  1074  000694  4B72               	infsnz	InitServos@i& (0+255),f,b
  1075  000696  2B73               	incf	(InitServos@i+1)& (0+255),f,b
  1076  000698  D6A3               	goto	l1220
  1077  00069A                     __end_of_InitServos:
  1078                           	opt stack 0
  1079                           tblptru	equ	0xFF8
  1080                           tblptrh	equ	0xFF7
  1081                           tblptrl	equ	0xFF6
  1082                           tablat	equ	0xFF5
  1083                           postinc0	equ	0xFEE
  1084                           wreg	equ	0xFE8
  1085                           postdec1	equ	0xFE5
  1086                           fsr1h	equ	0xFE2
  1087                           fsr1l	equ	0xFE1
  1088                           status	equ	0xFD8
  1089                           
  1090 ;; *************** function _UART_Write_String *****************
  1091 ;; Defined at:
  1092 ;;		line 203 in file "main.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;  str             2   45[COMRAM] PTR const unsigned char 
  1095 ;;		 -> movementString(256), 
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;  a               1   52[COMRAM] unsigned char 
  1098 ;;  i               2   50[COMRAM] int 
  1099 ;;  arrayLength     2   48[COMRAM] int 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      void 
  1102 ;; Registers used:
  1103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1109 ;;      Params:         2       0       0       0
  1110 ;;      Locals:         5       0       0       0
  1111 ;;      Temps:          1       0       0       0
  1112 ;;      Totals:         8       0       0       0
  1113 ;;Total ram usage:        8 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; Hardware stack levels required when called:    3
  1116 ;; This function calls:
  1117 ;;		_UART_Write
  1118 ;;		_strlen
  1119 ;; This function is called by:
  1120 ;;		_main
  1121 ;;		_InitServos
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           	psect	text3
  1126  000B4E                     __ptext3:
  1127                           	opt stack 0
  1128  000B4E                     _UART_Write_String:
  1129                           	opt stack 27
  1130                           
  1131                           ;main.c: 204: int arrayLength = strlen(str);
  1132                           
  1133                           ; BSR set to: 0
  1134                           ;incstack = 0
  1135  000B4E  C02E  F028         	movff	UART_Write_String@str,strlen@s
  1136  000B52  C02F  F029         	movff	UART_Write_String@str+1,strlen@s+1
  1137  000B56  EC1C  F006         	call	_strlen	;wreg free
  1138  000B5A  C028  F031         	movff	?_strlen,UART_Write_String@arrayLength
  1139  000B5E  C029  F032         	movff	?_strlen+1,UART_Write_String@arrayLength+1
  1140                           
  1141                           ;main.c: 205: for (int i = 0; i<arrayLength; i++) {
  1142  000B62  0E00               	movlw	0
  1143  000B64  6E34               	movwf	UART_Write_String@i+1,c
  1144  000B66  0E00               	movlw	0
  1145  000B68  6E33               	movwf	UART_Write_String@i,c
  1146  000B6A  D011               	goto	l74
  1147  000B6C                     
  1148                           ;main.c: 206: char a = str[i];
  1149  000B6C  5033               	movf	UART_Write_String@i,w,c
  1150  000B6E  242E               	addwf	UART_Write_String@str,w,c
  1151  000B70  6ED9               	movwf	fsr2l,c
  1152  000B72  5034               	movf	UART_Write_String@i+1,w,c
  1153  000B74  202F               	addwfc	UART_Write_String@str+1,w,c
  1154  000B76  6EDA               	movwf	fsr2h,c
  1155  000B78  50DF               	movf	indf2,w,c
  1156  000B7A  6E35               	movwf	UART_Write_String@a,c
  1157                           
  1158                           ;main.c: 207: UART_Write(a);
  1159  000B7C  5035               	movf	UART_Write_String@a,w,c
  1160  000B7E  ECC2  F006         	call	_UART_Write
  1161                           
  1162                           ;main.c: 208: if (a == '\r') {
  1163  000B82  0E0D               	movlw	13
  1164  000B84  1835               	xorwf	UART_Write_String@a,w,c
  1165  000B86  B4D8               	btfsc	status,2,c
  1166  000B88  0012               	return	
  1167                           
  1168                           ;main.c: 209: return;
  1169  000B8A  4A33               	infsnz	UART_Write_String@i,f,c
  1170  000B8C  2A34               	incf	UART_Write_String@i+1,f,c
  1171  000B8E                     l74:
  1172  000B8E  5031               	movf	UART_Write_String@arrayLength,w,c
  1173  000B90  5C33               	subwf	UART_Write_String@i,w,c
  1174  000B92  5034               	movf	UART_Write_String@i+1,w,c
  1175  000B94  0A80               	xorlw	128
  1176  000B96  6E30               	movwf	??_UART_Write_String& (0+255),c
  1177  000B98  5032               	movf	UART_Write_String@arrayLength+1,w,c
  1178  000B9A  0A80               	xorlw	128
  1179  000B9C  5830               	subwfb	??_UART_Write_String& (0+255),w,c
  1180  000B9E  B0D8               	btfsc	status,0,c
  1181  000BA0  0012               	return	
  1182  000BA2  D7E4               	goto	l75
  1183  000BA4                     __end_of_UART_Write_String:
  1184                           	opt stack 0
  1185                           tblptru	equ	0xFF8
  1186                           tblptrh	equ	0xFF7
  1187                           tblptrl	equ	0xFF6
  1188                           tablat	equ	0xFF5
  1189                           postinc0	equ	0xFEE
  1190                           wreg	equ	0xFE8
  1191                           postdec1	equ	0xFE5
  1192                           fsr1h	equ	0xFE2
  1193                           fsr1l	equ	0xFE1
  1194                           indf2	equ	0xFDF
  1195                           fsr2h	equ	0xFDA
  1196                           fsr2l	equ	0xFD9
  1197                           status	equ	0xFD8
  1198                           
  1199 ;; *************** function _strlen *****************
  1200 ;; Defined at:
  1201 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strlen.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;  s               2   39[COMRAM] PTR const unsigned char 
  1204 ;;		 -> movementString(256), 
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  cp              2   43[COMRAM] PTR const unsigned char 
  1207 ;;		 -> movementString(256), 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  2   39[COMRAM] unsigned int 
  1210 ;; Registers used:
  1211 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1217 ;;      Params:         2       0       0       0
  1218 ;;      Locals:         2       0       0       0
  1219 ;;      Temps:          2       0       0       0
  1220 ;;      Totals:         6       0       0       0
  1221 ;;Total ram usage:        6 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    2
  1224 ;; This function calls:
  1225 ;;		Nothing
  1226 ;; This function is called by:
  1227 ;;		_UART_Write_String
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text4
  1232  000C38                     __ptext4:
  1233                           	opt stack 0
  1234  000C38                     _strlen:
  1235                           	opt stack 27
  1236                           
  1237                           ;incstack = 0
  1238  000C38  C028  F02C         	movff	strlen@s,strlen@cp
  1239  000C3C  C029  F02D         	movff	strlen@s+1,strlen@cp+1
  1240  000C40  D002               	goto	l698
  1241  000C42  4A2C               	infsnz	strlen@cp,f,c
  1242  000C44  2A2D               	incf	strlen@cp+1,f,c
  1243  000C46                     l698:
  1244  000C46  C02C  FFD9         	movff	strlen@cp,fsr2l
  1245  000C4A  C02D  FFDA         	movff	strlen@cp+1,fsr2h
  1246  000C4E  50DF               	movf	indf2,w,c
  1247  000C50  A4D8               	btfss	status,2,c
  1248  000C52  D7F7               	goto	l699
  1249  000C54  C028  F02A         	movff	strlen@s,??_strlen
  1250  000C58  C029  F02B         	movff	strlen@s+1,??_strlen+1
  1251  000C5C  1E2A               	comf	??_strlen,f,c
  1252  000C5E  1E2B               	comf	??_strlen+1,f,c
  1253  000C60  4A2A               	infsnz	??_strlen,f,c
  1254  000C62  2A2B               	incf	??_strlen+1,f,c
  1255  000C64  502C               	movf	strlen@cp,w,c
  1256  000C66  242A               	addwf	??_strlen,w,c
  1257  000C68  6E28               	movwf	?_strlen,c
  1258  000C6A  502D               	movf	strlen@cp+1,w,c
  1259  000C6C  202B               	addwfc	??_strlen+1,w,c
  1260  000C6E  6E29               	movwf	?_strlen+1,c
  1261  000C70  0012               	return	
  1262  000C72                     __end_of_strlen:
  1263                           	opt stack 0
  1264                           tblptru	equ	0xFF8
  1265                           tblptrh	equ	0xFF7
  1266                           tblptrl	equ	0xFF6
  1267                           tablat	equ	0xFF5
  1268                           postinc0	equ	0xFEE
  1269                           wreg	equ	0xFE8
  1270                           postdec1	equ	0xFE5
  1271                           fsr1h	equ	0xFE2
  1272                           fsr1l	equ	0xFE1
  1273                           indf2	equ	0xFDF
  1274                           fsr2h	equ	0xFDA
  1275                           fsr2l	equ	0xFD9
  1276                           status	equ	0xFD8
  1277                           
  1278 ;; *************** function _UART_Write *****************
  1279 ;; Defined at:
  1280 ;;		line 214 in file "main.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;  data            1    wreg     unsigned char 
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;  data            1   39[COMRAM] unsigned char 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      void 
  1287 ;; Registers used:
  1288 ;;		wreg
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1294 ;;      Params:         0       0       0       0
  1295 ;;      Locals:         1       0       0       0
  1296 ;;      Temps:          0       0       0       0
  1297 ;;      Totals:         1       0       0       0
  1298 ;;Total ram usage:        1 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; Hardware stack levels required when called:    2
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_UART_Write_String
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text5
  1309  000D84                     __ptext5:
  1310                           	opt stack 0
  1311  000D84                     _UART_Write:
  1312                           	opt stack 27
  1313                           
  1314                           ;incstack = 0
  1315                           ;UART_Write@data stored from wreg
  1316  000D84  6E28               	movwf	UART_Write@data,c
  1317  000D86                     
  1318                           ;main.c: 215: while(!TRMT);
  1319  000D86  A2AC               	btfss	4012,1,c	;volatile
  1320  000D88  D7FE               	goto	l1074
  1321                           
  1322                           ;main.c: 216: TXREG = data;
  1323  000D8A  C028  FFAD         	movff	UART_Write@data,4013	;volatile
  1324  000D8E  0012               	return		;funcret
  1325  000D90                     __end_of_UART_Write:
  1326                           	opt stack 0
  1327                           tblptru	equ	0xFF8
  1328                           tblptrh	equ	0xFF7
  1329                           tblptrl	equ	0xFF6
  1330                           tablat	equ	0xFF5
  1331                           postinc0	equ	0xFEE
  1332                           wreg	equ	0xFE8
  1333                           postdec1	equ	0xFE5
  1334                           fsr1h	equ	0xFE2
  1335                           fsr1l	equ	0xFE1
  1336                           indf2	equ	0xFDF
  1337                           fsr2h	equ	0xFDA
  1338                           fsr2l	equ	0xFD9
  1339                           status	equ	0xFD8
  1340                           
  1341 ;; *************** function _InitApp *****************
  1342 ;; Defined at:
  1343 ;;		line 28 in file "user.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;		None
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;		None
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      void 
  1350 ;; Registers used:
  1351 ;;		None
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1357 ;;      Params:         0       0       0       0
  1358 ;;      Locals:         0       0       0       0
  1359 ;;      Temps:          0       0       0       0
  1360 ;;      Totals:         0       0       0       0
  1361 ;;Total ram usage:        0 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; Hardware stack levels required when called:    2
  1364 ;; This function calls:
  1365 ;;		Nothing
  1366 ;; This function is called by:
  1367 ;;		_main
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text6
  1372  000D90                     __ptext6:
  1373                           	opt stack 0
  1374  000D90                     _InitApp:
  1375                           	opt stack 28
  1376                           
  1377                           ;incstack = 0
  1378  000D90  0012               	return		;funcret
  1379  000D92                     __end_of_InitApp:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           postdec1	equ	0xFE5
  1388                           fsr1h	equ	0xFE2
  1389                           fsr1l	equ	0xFE1
  1390                           indf2	equ	0xFDF
  1391                           fsr2h	equ	0xFDA
  1392                           fsr2l	equ	0xFD9
  1393                           status	equ	0xFD8
  1394                           
  1395 ;; *************** function _FillServoPositionString *****************
  1396 ;; Defined at:
  1397 ;;		line 222 in file "main.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;		None
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  tmp             5   13[BANK0 ] unsigned char [5]
  1402 ;;  i               2   18[BANK0 ] unsigned int 
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  1    wreg      void 
  1405 ;; Registers used:
  1406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1412 ;;      Params:         0       0       0       0
  1413 ;;      Locals:         0       7       0       0
  1414 ;;      Temps:          0       0       0       0
  1415 ;;      Totals:         0       7       0       0
  1416 ;;Total ram usage:        7 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; Hardware stack levels required when called:    4
  1419 ;; This function calls:
  1420 ;;		_EmptyMovementString
  1421 ;;		___wmul
  1422 ;;		_sprintf
  1423 ;;		_strcat
  1424 ;; This function is called by:
  1425 ;;		_main
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text7
  1430  00069A                     __ptext7:
  1431                           	opt stack 0
  1432  00069A                     _FillServoPositionString:
  1433                           	opt stack 26
  1434                           
  1435                           ;main.c: 223: EmptyMovementString();
  1436                           
  1437                           ;incstack = 0
  1438  00069A  ECA6  F006         	call	_EmptyMovementString	;wreg free
  1439                           
  1440                           ;main.c: 224: char tmp[5];
  1441                           ;main.c: 225: unsigned int i = 0;
  1442  00069E  0E00               	movlw	0
  1443  0006A0  0100               	movlb	0	; () banked
  1444  0006A2  6F73               	movwf	(FillServoPositionString@i+1)& (0+255),b
  1445  0006A4  0E00               	movlw	0
  1446  0006A6  6F72               	movwf	FillServoPositionString@i& (0+255),b
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;main.c: 226: for(i = 0; i < SERVOSETS; i++){
  1450  0006A8  0E00               	movlw	0
  1451  0006AA  6F73               	movwf	(FillServoPositionString@i+1)& (0+255),b
  1452  0006AC  0E00               	movlw	0
  1453  0006AE  6F72               	movwf	FillServoPositionString@i& (0+255),b
  1454  0006B0                     l1278:
  1455                           
  1456                           ; BSR set to: 0
  1457  0006B0  0E1B               	movlw	low _SERVOSETS
  1458  0006B2  6EF6               	movwf	tblptrl,c
  1459  0006B4                     	if	1	;There is more than 1 active tblptr byte
  1460  0006B4  0E03               	movlw	high _SERVOSETS
  1461  0006B6  6EF7               	movwf	tblptrh,c
  1462  0006B8                     	endif
  1463  0006B8                     	if	0	;There are less than 3 active tblptr bytes
  1464  0006B8                     	endif
  1465  0006B8  0009               	tblrd		*+
  1466  0006BA  50F5               	movf	tablat,w,c
  1467  0006BC  5D72               	subwf	FillServoPositionString@i& (0+255),w,b
  1468  0006BE  0009               	tblrd		*+
  1469  0006C0  50F5               	movf	tablat,w,c
  1470  0006C2  5973               	subwfb	(FillServoPositionString@i+1)& (0+255),w,b
  1471  0006C4  B0D8               	btfsc	status,0,c
  1472  0006C6  D11B               	goto	u520
  1473                           
  1474                           ; BSR set to: 0
  1475                           ;main.c: 227: strcat(movementString, "#");
  1476                           
  1477                           ; BSR set to: 0
  1478                           
  1479                           ; BSR set to: 0
  1480  0006C8  0E00               	movlw	low _movementString
  1481  0006CA  6E2E               	movwf	strcat@to,c
  1482  0006CC  0E01               	movlw	high _movementString
  1483  0006CE  6E2F               	movwf	strcat@to+1,c
  1484  0006D0  0EC9               	movlw	low STR_1
  1485  0006D2  6E30               	movwf	strcat@from,c
  1486  0006D4  0E03               	movlw	high STR_1
  1487  0006D6  6E31               	movwf	strcat@from+1,c
  1488  0006D8  EC7B  F005         	call	_strcat	;wreg free
  1489                           
  1490                           ;main.c: 228: strcat(movementString, servosets[i].horizontalServo);
  1491  0006DC  0E00               	movlw	low _movementString
  1492  0006DE  6E2E               	movwf	strcat@to,c
  1493  0006E0  0E01               	movlw	high _movementString
  1494  0006E2  6E2F               	movwf	strcat@to+1,c
  1495  0006E4  C072  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1496  0006E8  C073  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1497  0006EC  0E00               	movlw	0
  1498  0006EE  6E2B               	movwf	___wmul@multiplicand+1,c
  1499  0006F0  0E1B               	movlw	27
  1500  0006F2  6E2A               	movwf	___wmul@multiplicand,c
  1501  0006F4  EC82  F006         	call	___wmul	;wreg free
  1502  0006F8  0E02               	movlw	2
  1503  0006FA  2628               	addwf	?___wmul,f,c
  1504  0006FC  0E00               	movlw	0
  1505  0006FE  2229               	addwfc	?___wmul+1,f,c
  1506  000700  0E1D               	movlw	low _servosets
  1507  000702  2428               	addwf	?___wmul,w,c
  1508  000704  6E30               	movwf	strcat@from,c
  1509  000706  0E03               	movlw	high _servosets
  1510  000708  2029               	addwfc	?___wmul+1,w,c
  1511  00070A  6E31               	movwf	strcat@from+1,c
  1512  00070C  EC7B  F005         	call	_strcat	;wreg free
  1513                           
  1514                           ;main.c: 229: strcat(movementString, "P");
  1515  000710  0E00               	movlw	low _movementString
  1516  000712  6E2E               	movwf	strcat@to,c
  1517  000714  0E01               	movlw	high _movementString
  1518  000716  6E2F               	movwf	strcat@to+1,c
  1519  000718  0ECB               	movlw	low STR_2
  1520  00071A  6E30               	movwf	strcat@from,c
  1521  00071C  0E03               	movlw	high STR_2
  1522  00071E  6E31               	movwf	strcat@from+1,c
  1523  000720  EC7B  F005         	call	_strcat	;wreg free
  1524                           
  1525                           ;main.c: 230: sprintf(tmp, "%d", servosets[i].horizontalMediumPosition);
  1526  000724  0E6D               	movlw	low FillServoPositionString@tmp
  1527  000726  0100               	movlb	0	; () banked
  1528  000728  6F60               	movwf	sprintf@sp& (0+255),b
  1529  00072A  0E00               	movlw	high FillServoPositionString@tmp
  1530  00072C  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1531  00072E  0EC6               	movlw	low STR_3
  1532  000730  6F62               	movwf	sprintf@f& (0+255),b
  1533  000732  0E03               	movlw	high STR_3
  1534  000734  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1535  000736  C072  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1536  00073A  C073  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1537  00073E  0E00               	movlw	0
  1538  000740  6E2B               	movwf	___wmul@multiplicand+1,c
  1539  000742  0E1B               	movlw	27
  1540  000744  6E2A               	movwf	___wmul@multiplicand,c
  1541  000746  EC82  F006         	call	___wmul	;wreg free
  1542  00074A  0E0B               	movlw	11
  1543  00074C  2628               	addwf	?___wmul,f,c
  1544  00074E  0E00               	movlw	0
  1545  000750  2229               	addwfc	?___wmul+1,f,c
  1546  000752  0E1D               	movlw	low _servosets
  1547  000754  2428               	addwf	?___wmul,w,c
  1548  000756  6EF6               	movwf	tblptrl,c
  1549  000758  0E03               	movlw	high _servosets
  1550  00075A  2029               	addwfc	?___wmul+1,w,c
  1551  00075C  6EF7               	movwf	tblptrh,c
  1552  00075E                     	if	0	;There are less than 3 active tblptr bytes
  1553  00075E                     	endif
  1554  00075E  0009               	tblrd		*+
  1555  000760  CFF5 F064          	movff	tablat,?_sprintf+4
  1556  000764  000A               	tblrd		*-
  1557  000766  CFF5 F065          	movff	tablat,?_sprintf+5
  1558  00076A  EC8A  F004         	call	_sprintf	;wreg free
  1559                           
  1560                           ;main.c: 231: strcat(movementString, tmp);
  1561  00076E  0E00               	movlw	low _movementString
  1562  000770  6E2E               	movwf	strcat@to,c
  1563  000772  0E01               	movlw	high _movementString
  1564  000774  6E2F               	movwf	strcat@to+1,c
  1565  000776  0E6D               	movlw	low FillServoPositionString@tmp
  1566  000778  6E30               	movwf	strcat@from,c
  1567  00077A  0E00               	movlw	high FillServoPositionString@tmp
  1568  00077C  6E31               	movwf	strcat@from+1,c
  1569  00077E  EC7B  F005         	call	_strcat	;wreg free
  1570                           
  1571                           ;main.c: 232: strcat(movementString, "#");
  1572  000782  0E00               	movlw	low _movementString
  1573  000784  6E2E               	movwf	strcat@to,c
  1574  000786  0E01               	movlw	high _movementString
  1575  000788  6E2F               	movwf	strcat@to+1,c
  1576  00078A  0EC9               	movlw	low STR_1
  1577  00078C  6E30               	movwf	strcat@from,c
  1578  00078E  0E03               	movlw	high STR_1
  1579  000790  6E31               	movwf	strcat@from+1,c
  1580  000792  EC7B  F005         	call	_strcat	;wreg free
  1581                           
  1582                           ;main.c: 233: strcat(movementString, servosets[i].upperVerticalServo);
  1583  000796  0E00               	movlw	low _movementString
  1584  000798  6E2E               	movwf	strcat@to,c
  1585  00079A  0E01               	movlw	high _movementString
  1586  00079C  6E2F               	movwf	strcat@to+1,c
  1587  00079E  C072  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1588  0007A2  C073  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1589  0007A6  0E00               	movlw	0
  1590  0007A8  6E2B               	movwf	___wmul@multiplicand+1,c
  1591  0007AA  0E1B               	movlw	27
  1592  0007AC  6E2A               	movwf	___wmul@multiplicand,c
  1593  0007AE  EC82  F006         	call	___wmul	;wreg free
  1594  0007B2  0E05               	movlw	5
  1595  0007B4  2628               	addwf	?___wmul,f,c
  1596  0007B6  0E00               	movlw	0
  1597  0007B8  2229               	addwfc	?___wmul+1,f,c
  1598  0007BA  0E1D               	movlw	low _servosets
  1599  0007BC  2428               	addwf	?___wmul,w,c
  1600  0007BE  6E30               	movwf	strcat@from,c
  1601  0007C0  0E03               	movlw	high _servosets
  1602  0007C2  2029               	addwfc	?___wmul+1,w,c
  1603  0007C4  6E31               	movwf	strcat@from+1,c
  1604  0007C6  EC7B  F005         	call	_strcat	;wreg free
  1605                           
  1606                           ;main.c: 234: strcat(movementString, "P");
  1607  0007CA  0E00               	movlw	low _movementString
  1608  0007CC  6E2E               	movwf	strcat@to,c
  1609  0007CE  0E01               	movlw	high _movementString
  1610  0007D0  6E2F               	movwf	strcat@to+1,c
  1611  0007D2  0ECB               	movlw	low STR_2
  1612  0007D4  6E30               	movwf	strcat@from,c
  1613  0007D6  0E03               	movlw	high STR_2
  1614  0007D8  6E31               	movwf	strcat@from+1,c
  1615  0007DA  EC7B  F005         	call	_strcat	;wreg free
  1616                           
  1617                           ;main.c: 235: sprintf(tmp, "%d", servosets[i].verticalUpperMediumPosition);
  1618  0007DE  0E6D               	movlw	low FillServoPositionString@tmp
  1619  0007E0  0100               	movlb	0	; () banked
  1620  0007E2  6F60               	movwf	sprintf@sp& (0+255),b
  1621  0007E4  0E00               	movlw	high FillServoPositionString@tmp
  1622  0007E6  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1623  0007E8  0EC6               	movlw	low STR_3
  1624  0007EA  6F62               	movwf	sprintf@f& (0+255),b
  1625  0007EC  0E03               	movlw	high STR_3
  1626  0007EE  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1627  0007F0  C072  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1628  0007F4  C073  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1629  0007F8  0E00               	movlw	0
  1630  0007FA  6E2B               	movwf	___wmul@multiplicand+1,c
  1631  0007FC  0E1B               	movlw	27
  1632  0007FE  6E2A               	movwf	___wmul@multiplicand,c
  1633  000800  EC82  F006         	call	___wmul	;wreg free
  1634  000804  0E0D               	movlw	13
  1635  000806  2628               	addwf	?___wmul,f,c
  1636  000808  0E00               	movlw	0
  1637  00080A  2229               	addwfc	?___wmul+1,f,c
  1638  00080C  0E1D               	movlw	low _servosets
  1639  00080E  2428               	addwf	?___wmul,w,c
  1640  000810  6EF6               	movwf	tblptrl,c
  1641  000812  0E03               	movlw	high _servosets
  1642  000814  2029               	addwfc	?___wmul+1,w,c
  1643  000816  6EF7               	movwf	tblptrh,c
  1644  000818                     	if	0	;There are less than 3 active tblptr bytes
  1645  000818                     	endif
  1646  000818  0009               	tblrd		*+
  1647  00081A  CFF5 F064          	movff	tablat,?_sprintf+4
  1648  00081E  000A               	tblrd		*-
  1649  000820  CFF5 F065          	movff	tablat,?_sprintf+5
  1650  000824  EC8A  F004         	call	_sprintf	;wreg free
  1651                           
  1652                           ;main.c: 236: strcat(movementString, tmp);
  1653  000828  0E00               	movlw	low _movementString
  1654  00082A  6E2E               	movwf	strcat@to,c
  1655  00082C  0E01               	movlw	high _movementString
  1656  00082E  6E2F               	movwf	strcat@to+1,c
  1657  000830  0E6D               	movlw	low FillServoPositionString@tmp
  1658  000832  6E30               	movwf	strcat@from,c
  1659  000834  0E00               	movlw	high FillServoPositionString@tmp
  1660  000836  6E31               	movwf	strcat@from+1,c
  1661  000838  EC7B  F005         	call	_strcat	;wreg free
  1662                           
  1663                           ;main.c: 237: strcat(movementString, "#");
  1664  00083C  0E00               	movlw	low _movementString
  1665  00083E  6E2E               	movwf	strcat@to,c
  1666  000840  0E01               	movlw	high _movementString
  1667  000842  6E2F               	movwf	strcat@to+1,c
  1668  000844  0EC9               	movlw	low STR_1
  1669  000846  6E30               	movwf	strcat@from,c
  1670  000848  0E03               	movlw	high STR_1
  1671  00084A  6E31               	movwf	strcat@from+1,c
  1672  00084C  EC7B  F005         	call	_strcat	;wreg free
  1673                           
  1674                           ;main.c: 238: strcat(movementString, servosets[i].lowerVerticalServo);
  1675  000850  0E00               	movlw	low _movementString
  1676  000852  6E2E               	movwf	strcat@to,c
  1677  000854  0E01               	movlw	high _movementString
  1678  000856  6E2F               	movwf	strcat@to+1,c
  1679  000858  C072  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1680  00085C  C073  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1681  000860  0E00               	movlw	0
  1682  000862  6E2B               	movwf	___wmul@multiplicand+1,c
  1683  000864  0E1B               	movlw	27
  1684  000866  6E2A               	movwf	___wmul@multiplicand,c
  1685  000868  EC82  F006         	call	___wmul	;wreg free
  1686  00086C  0E08               	movlw	8
  1687  00086E  2628               	addwf	?___wmul,f,c
  1688  000870  0E00               	movlw	0
  1689  000872  2229               	addwfc	?___wmul+1,f,c
  1690  000874  0E1D               	movlw	low _servosets
  1691  000876  2428               	addwf	?___wmul,w,c
  1692  000878  6E30               	movwf	strcat@from,c
  1693  00087A  0E03               	movlw	high _servosets
  1694  00087C  2029               	addwfc	?___wmul+1,w,c
  1695  00087E  6E31               	movwf	strcat@from+1,c
  1696  000880  EC7B  F005         	call	_strcat	;wreg free
  1697                           
  1698                           ;main.c: 239: strcat(movementString, "P");
  1699  000884  0E00               	movlw	low _movementString
  1700  000886  6E2E               	movwf	strcat@to,c
  1701  000888  0E01               	movlw	high _movementString
  1702  00088A  6E2F               	movwf	strcat@to+1,c
  1703  00088C  0ECB               	movlw	low STR_2
  1704  00088E  6E30               	movwf	strcat@from,c
  1705  000890  0E03               	movlw	high STR_2
  1706  000892  6E31               	movwf	strcat@from+1,c
  1707  000894  EC7B  F005         	call	_strcat	;wreg free
  1708                           
  1709                           ;main.c: 240: sprintf(tmp, "%d", servosets[i].verticalLowerMediumPosition);
  1710  000898  0E6D               	movlw	low FillServoPositionString@tmp
  1711  00089A  0100               	movlb	0	; () banked
  1712  00089C  6F60               	movwf	sprintf@sp& (0+255),b
  1713  00089E  0E00               	movlw	high FillServoPositionString@tmp
  1714  0008A0  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1715  0008A2  0EC6               	movlw	low STR_3
  1716  0008A4  6F62               	movwf	sprintf@f& (0+255),b
  1717  0008A6  0E03               	movlw	high STR_3
  1718  0008A8  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1719  0008AA  C072  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1720  0008AE  C073  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1721  0008B2  0E00               	movlw	0
  1722  0008B4  6E2B               	movwf	___wmul@multiplicand+1,c
  1723  0008B6  0E1B               	movlw	27
  1724  0008B8  6E2A               	movwf	___wmul@multiplicand,c
  1725  0008BA  EC82  F006         	call	___wmul	;wreg free
  1726  0008BE  0E0F               	movlw	15
  1727  0008C0  2628               	addwf	?___wmul,f,c
  1728  0008C2  0E00               	movlw	0
  1729  0008C4  2229               	addwfc	?___wmul+1,f,c
  1730  0008C6  0E1D               	movlw	low _servosets
  1731  0008C8  2428               	addwf	?___wmul,w,c
  1732  0008CA  6EF6               	movwf	tblptrl,c
  1733  0008CC  0E03               	movlw	high _servosets
  1734  0008CE  2029               	addwfc	?___wmul+1,w,c
  1735  0008D0  6EF7               	movwf	tblptrh,c
  1736  0008D2                     	if	0	;There are less than 3 active tblptr bytes
  1737  0008D2                     	endif
  1738  0008D2  0009               	tblrd		*+
  1739  0008D4  CFF5 F064          	movff	tablat,?_sprintf+4
  1740  0008D8  000A               	tblrd		*-
  1741  0008DA  CFF5 F065          	movff	tablat,?_sprintf+5
  1742  0008DE  EC8A  F004         	call	_sprintf	;wreg free
  1743                           
  1744                           ;main.c: 241: strcat(movementString, tmp);
  1745  0008E2  0E00               	movlw	low _movementString
  1746  0008E4  6E2E               	movwf	strcat@to,c
  1747  0008E6  0E01               	movlw	high _movementString
  1748  0008E8  6E2F               	movwf	strcat@to+1,c
  1749  0008EA  0E6D               	movlw	low FillServoPositionString@tmp
  1750  0008EC  6E30               	movwf	strcat@from,c
  1751  0008EE  0E00               	movlw	high FillServoPositionString@tmp
  1752  0008F0  6E31               	movwf	strcat@from+1,c
  1753  0008F2  EC7B  F005         	call	_strcat	;wreg free
  1754  0008F6  0100               	movlb	0	; () banked
  1755  0008F8  4B72               	infsnz	FillServoPositionString@i& (0+255),f,b
  1756  0008FA  2B73               	incf	(FillServoPositionString@i+1)& (0+255),f,b
  1757  0008FC  D6D9               	goto	l1278
  1758  0008FE                     u520:
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;main.c: 242: }
  1762                           ;main.c: 243: strcat(movementString, "T2000\r");
  1763                           
  1764                           ; BSR set to: 0
  1765  0008FE  0E00               	movlw	low _movementString
  1766  000900  6E2E               	movwf	strcat@to,c
  1767  000902  0E01               	movlw	high _movementString
  1768  000904  6E2F               	movwf	strcat@to+1,c
  1769  000906  0EBF               	movlw	low STR_10
  1770  000908  6E30               	movwf	strcat@from,c
  1771  00090A  0E03               	movlw	high STR_10
  1772  00090C  6E31               	movwf	strcat@from+1,c
  1773  00090E  EC7B  F005         	call	_strcat	;wreg free
  1774  000912  0012               	return		;funcret
  1775  000914                     __end_of_FillServoPositionString:
  1776                           	opt stack 0
  1777                           tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1h	equ	0xFE2
  1785                           fsr1l	equ	0xFE1
  1786                           indf2	equ	0xFDF
  1787                           fsr2h	equ	0xFDA
  1788                           fsr2l	equ	0xFD9
  1789                           status	equ	0xFD8
  1790                           
  1791 ;; *************** function _strcat *****************
  1792 ;; Defined at:
  1793 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcat.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;  to              2   45[COMRAM] PTR unsigned char 
  1796 ;;		 -> movementString(256), 
  1797 ;;  from            2   47[COMRAM] PTR const unsigned char 
  1798 ;;		 -> STR_22(2), STR_20(2), STR_19(2), STR_18(2), 
  1799 ;;		 -> STR_16(2), STR_15(2), STR_14(2), InitServos@tmp(5), 
  1800 ;;		 -> STR_12(2), STR_11(2), STR_10(7), STR_8(2), 
  1801 ;;		 -> STR_7(2), STR_5(2), STR_4(2), FillServoPositionString@tmp(5), 
  1802 ;;		 -> STR_2(2), STR_1(2), servosets(162), 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;  cp              2   49[COMRAM] PTR unsigned char 
  1805 ;;		 -> movementString(256), 
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  2   45[COMRAM] PTR unsigned char 
  1808 ;; Registers used:
  1809 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1815 ;;      Params:         4       0       0       0
  1816 ;;      Locals:         2       0       0       0
  1817 ;;      Temps:          0       0       0       0
  1818 ;;      Totals:         6       0       0       0
  1819 ;;Total ram usage:        6 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:    2
  1822 ;; This function calls:
  1823 ;;		Nothing
  1824 ;; This function is called by:
  1825 ;;		_FillServoPositionString
  1826 ;;		_InitServos
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text8
  1831  000AF6                     __ptext8:
  1832                           	opt stack 0
  1833  000AF6                     _strcat:
  1834                           	opt stack 27
  1835                           
  1836                           ;incstack = 0
  1837  000AF6  C02E  F032         	movff	strcat@to,strcat@cp
  1838  000AFA  C02F  F033         	movff	strcat@to+1,strcat@cp+1
  1839  000AFE  D002               	goto	l689
  1840  000B00  4A32               	infsnz	strcat@cp,f,c
  1841  000B02  2A33               	incf	strcat@cp+1,f,c
  1842  000B04                     l689:
  1843  000B04  C032  FFD9         	movff	strcat@cp,fsr2l
  1844  000B08  C033  FFDA         	movff	strcat@cp+1,fsr2h
  1845  000B0C  50DF               	movf	indf2,w,c
  1846  000B0E  B4D8               	btfsc	status,2,c
  1847  000B10  D005               	goto	l692
  1848  000B12  D7F6               	goto	l690
  1849  000B14  4A32               	infsnz	strcat@cp,f,c
  1850  000B16  2A33               	incf	strcat@cp+1,f,c
  1851  000B18  4A30               	infsnz	strcat@from,f,c
  1852  000B1A  2A31               	incf	strcat@from+1,f,c
  1853  000B1C                     l692:
  1854  000B1C  C030  FFF6         	movff	strcat@from,tblptrl
  1855  000B20  C031  FFF7         	movff	strcat@from+1,tblptrh
  1856  000B24  6AF8               	clrf	tblptru,c
  1857  000B26  C032  FFD9         	movff	strcat@cp,fsr2l
  1858  000B2A  C033  FFDA         	movff	strcat@cp+1,fsr2h
  1859  000B2E  0E02               	movlw	(high __ramtop+-1)
  1860  000B30  64F7               	cpfsgt	tblptrh,c
  1861  000B32  D003               	bra	u397
  1862  000B34  0008               	tblrd		*
  1863  000B36  50F5               	movf	tablat,w,c
  1864  000B38  D005               	bra	u390
  1865  000B3A                     u397:
  1866  000B3A  CFF6 FFE1          	movff	tblptrl,fsr1l
  1867  000B3E  CFF7 FFE2          	movff	tblptrh,fsr1h
  1868  000B42  50E7               	movf	indf1,w,c
  1869  000B44                     u390:
  1870  000B44  6EDF               	movwf	indf2,c
  1871  000B46  50DF               	movf	indf2,w,c
  1872  000B48  B4D8               	btfsc	status,2,c
  1873  000B4A  0012               	return	
  1874  000B4C  D7E3               	goto	l693
  1875  000B4E                     __end_of_strcat:
  1876                           	opt stack 0
  1877                           tblptru	equ	0xFF8
  1878                           tblptrh	equ	0xFF7
  1879                           tblptrl	equ	0xFF6
  1880                           tablat	equ	0xFF5
  1881                           postinc0	equ	0xFEE
  1882                           wreg	equ	0xFE8
  1883                           indf1	equ	0xFE7
  1884                           postdec1	equ	0xFE5
  1885                           fsr1h	equ	0xFE2
  1886                           fsr1l	equ	0xFE1
  1887                           indf2	equ	0xFDF
  1888                           fsr2h	equ	0xFDA
  1889                           fsr2l	equ	0xFD9
  1890                           status	equ	0xFD8
  1891                           
  1892 ;; *************** function _sprintf *****************
  1893 ;; Defined at:
  1894 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  1897 ;;		 -> InitServos@tmp(5), FillServoPositionString@tmp(5), 
  1898 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  1899 ;;		 -> STR_21(3), STR_17(3), STR_13(3), STR_9(3), 
  1900 ;;		 -> STR_6(3), STR_3(3), 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  tmpval          4    0        struct .
  1903 ;;  cp              3    0        PTR const unsigned char 
  1904 ;;  val             2   10[BANK0 ] unsigned int 
  1905 ;;  ap              2    6[BANK0 ] PTR void [1]
  1906 ;;		 -> ?_sprintf(2), 
  1907 ;;  len             2    0        unsigned int 
  1908 ;;  c               1   12[BANK0 ] char 
  1909 ;;  prec            1    9[BANK0 ] char 
  1910 ;;  flag            1    8[BANK0 ] unsigned char 
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  2    0[BANK0 ] int 
  1913 ;; Registers used:
  1914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1920 ;;      Params:         0       6       0       0
  1921 ;;      Locals:         0       7       0       0
  1922 ;;      Temps:          1       0       0       0
  1923 ;;      Totals:         1      13       0       0
  1924 ;;Total ram usage:       14 bytes
  1925 ;; Hardware stack levels used:    1
  1926 ;; Hardware stack levels required when called:    3
  1927 ;; This function calls:
  1928 ;;		___lwdiv
  1929 ;;		___lwmod
  1930 ;; This function is called by:
  1931 ;;		_FillServoPositionString
  1932 ;;		_InitServos
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           	psect	text9
  1937  000914                     __ptext9:
  1938                           	opt stack 0
  1939  000914                     _sprintf:
  1940                           	opt stack 26
  1941                           
  1942                           ;doprnt.c: 494: va_list ap;
  1943                           ;doprnt.c: 499: signed char c;
  1944                           ;doprnt.c: 506: signed char prec;
  1945                           ;doprnt.c: 508: unsigned char flag;
  1946                           ;doprnt.c: 523: union {
  1947                           ;doprnt.c: 524: unsigned long vd;
  1948                           ;doprnt.c: 525: double integ;
  1949                           ;doprnt.c: 526: } tmpval;
  1950                           ;doprnt.c: 528: unsigned int val;
  1951                           ;doprnt.c: 529: unsigned len;
  1952                           ;doprnt.c: 530: const char * cp;
  1953                           ;doprnt.c: 533: *ap = __va_start();
  1954                           
  1955                           ;incstack = 0
  1956  000914  0E64               	movlw	low (?_sprintf+4)
  1957  000916  0100               	movlb	0	; () banked
  1958  000918  6F66               	movwf	sprintf@ap& (0+255),b
  1959  00091A  0E00               	movlw	high (?_sprintf+4)
  1960  00091C  6F67               	movwf	(sprintf@ap+1)& (0+255),b
  1961                           
  1962                           ;doprnt.c: 536: while(c = *f++) {
  1963  00091E  D08D               	goto	u470
  1964  000920                     
  1965                           ; BSR set to: 0
  1966                           ;doprnt.c: 538: if(c != '%')
  1967                           
  1968                           ; BSR set to: 0
  1969  000920  0E25               	movlw	37
  1970  000922  196C               	xorwf	sprintf@c& (0+255),w,b
  1971  000924  B4D8               	btfsc	status,2,c
  1972  000926  D009               	goto	l118
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;doprnt.c: 540: {
  1976                           ;doprnt.c: 541: ((*sp++ = (c)));
  1977  000928  C060  FFD9         	movff	sprintf@sp,fsr2l
  1978  00092C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1979  000930  C06C  FFDF         	movff	sprintf@c,indf2
  1980                           
  1981                           ; BSR set to: 0
  1982  000934  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1983  000936  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1984                           
  1985                           ;doprnt.c: 542: continue;
  1986  000938  D080               	goto	u470
  1987  00093A                     l118:
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;doprnt.c: 543: }
  1991                           ;doprnt.c: 548: flag = 0;
  1992                           
  1993                           ; BSR set to: 0
  1994  00093A  0E00               	movlw	0
  1995  00093C  6F68               	movwf	sprintf@flag& (0+255),b
  1996                           
  1997                           ; BSR set to: 0
  1998                           
  1999                           ; BSR set to: 0
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;doprnt.c: 822: }
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;doprnt.c: 813: continue;
  2006                           
  2007                           ;doprnt.c: 802: default:
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;doprnt.c: 698: case 'i':
  2011                           ;doprnt.c: 699: break;
  2012                           
  2013                           ; BSR set to: 0
  2014                           
  2015                           ;doprnt.c: 697: case 'd':
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;doprnt.c: 638: goto alldone;
  2019                           
  2020                           ;doprnt.c: 637: case 0:
  2021                           
  2022                           ;doprnt.c: 635: switch(c = *f++) {
  2023  00093E  C062  FFF6         	movff	sprintf@f,tblptrl
  2024  000942  C063  FFF7         	movff	sprintf@f+1,tblptrh
  2025  000946  4B62               	infsnz	sprintf@f& (0+255),f,b
  2026  000948  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  2027  00094A                     	if	0	;tblptru may be non-zero
  2028  00094A                     	endif
  2029  00094A                     	if	0	;tblptru may be non-zero
  2030  00094A                     	endif
  2031  00094A  0008               	tblrd		*
  2032  00094C  CFF5 F06C          	movff	tablat,sprintf@c
  2033  000950  516C               	movf	sprintf@c& (0+255),w,b
  2034                           
  2035                           ; Switch size 1, requested type "space"
  2036                           ; Number of cases is 3, Range of values is 0 to 105
  2037                           ; switch strategies available:
  2038                           ; Name         Instructions Cycles
  2039                           ; simple_byte           10     6 (average)
  2040                           ;	Chosen strategy is simple_byte
  2041  000952  0A00               	xorlw	0	; case 0
  2042  000954  B4D8               	btfsc	status,2,c
  2043  000956  D07D               	goto	u480
  2044  000958  0A64               	xorlw	100	; case 100
  2045  00095A  B4D8               	btfsc	status,2,c
  2046  00095C  D003               	goto	l124
  2047  00095E  0A0D               	xorlw	13	; case 105
  2048  000960  A4D8               	btfss	status,2,c
  2049  000962  D06B               	goto	u470
  2050  000964                     l124:
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;doprnt.c: 1253: {
  2054                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2055                           
  2056                           ; BSR set to: 0
  2057  000964  C066  FFD9         	movff	sprintf@ap,fsr2l
  2058  000968  C067  FFDA         	movff	sprintf@ap+1,fsr2h
  2059  00096C  CFDE F06A          	movff	postinc2,sprintf@val
  2060  000970  CFDD F06B          	movff	postdec2,sprintf@val+1
  2061                           
  2062                           ; BSR set to: 0
  2063  000974  0E02               	movlw	2
  2064  000976  2766               	addwf	sprintf@ap& (0+255),f,b
  2065  000978  0E00               	movlw	0
  2066  00097A  2367               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;doprnt.c: 1261: if((int)val < 0) {
  2070  00097C  AF6B               	btfss	(sprintf@val+1)& (0+255),7,b
  2071  00097E  D006               	goto	l126
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;doprnt.c: 1262: flag |= 0x03;
  2075  000980  0E03               	movlw	3
  2076  000982  1368               	iorwf	sprintf@flag& (0+255),f,b
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;doprnt.c: 1263: val = -val;
  2080  000984  6D6A               	negf	sprintf@val& (0+255),b
  2081  000986  1F6B               	comf	(sprintf@val+1)& (0+255),f,b
  2082  000988  B0D8               	btfsc	status,0,c
  2083  00098A  2B6B               	incf	(sprintf@val+1)& (0+255),f,b
  2084  00098C                     l126:
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;doprnt.c: 1264: }
  2088                           ;doprnt.c: 1266: }
  2089                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2090                           
  2091                           ; BSR set to: 0
  2092  00098C  0E01               	movlw	1
  2093  00098E  6F6C               	movwf	sprintf@c& (0+255),b
  2094  000990                     l1178:
  2095                           
  2096                           ; BSR set to: 0
  2097  000990  0E05               	movlw	5
  2098  000992  196C               	xorwf	sprintf@c& (0+255),w,b
  2099  000994  B4D8               	btfsc	status,2,c
  2100  000996  D012               	goto	u450
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;doprnt.c: 1306: if(val < dpowers[c])
  2104                           
  2105                           ; BSR set to: 0
  2106                           
  2107                           ; BSR set to: 0
  2108  000998  516C               	movf	sprintf@c& (0+255),w,b
  2109  00099A  0D02               	mullw	2
  2110  00099C  0E11               	movlw	low _dpowers
  2111  00099E  24F3               	addwf	prodl,w,c
  2112  0009A0  6EF6               	movwf	tblptrl,c
  2113  0009A2  0E03               	movlw	high _dpowers
  2114  0009A4  20F4               	addwfc	prodh,w,c
  2115  0009A6  6EF7               	movwf	tblptrh,c
  2116  0009A8                     	if	0	;There are less than 3 active tblptr bytes
  2117  0009A8                     	endif
  2118  0009A8  0009               	tblrd		*+
  2119  0009AA  50F5               	movf	tablat,w,c
  2120  0009AC  5D6A               	subwf	sprintf@val& (0+255),w,b
  2121  0009AE  0009               	tblrd		*+
  2122  0009B0  50F5               	movf	tablat,w,c
  2123  0009B2  596B               	subwfb	(sprintf@val+1)& (0+255),w,b
  2124  0009B4  A0D8               	btfss	status,0,c
  2125  0009B6  D002               	goto	u450
  2126                           
  2127                           ; BSR set to: 0
  2128                           
  2129                           ; BSR set to: 0
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;doprnt.c: 1307: break;
  2133  0009B8  2B6C               	incf	sprintf@c& (0+255),f,b
  2134  0009BA  D7EA               	goto	l1178
  2135  0009BC                     u450:
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;doprnt.c: 1422: {
  2139                           ;doprnt.c: 1438: if(flag & 0x03)
  2140                           
  2141                           ; BSR set to: 0
  2142  0009BC  C068  F034         	movff	sprintf@flag,??_sprintf
  2143  0009C0  0E03               	movlw	3
  2144  0009C2  1634               	andwf	??_sprintf,f,c
  2145  0009C4  B4D8               	btfsc	status,2,c
  2146  0009C6  D008               	goto	l130
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2150  0009C8  C060  FFD9         	movff	sprintf@sp,fsr2l
  2151  0009CC  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2152  0009D0  0E2D               	movlw	45
  2153  0009D2  6EDF               	movwf	indf2,c
  2154                           
  2155                           ; BSR set to: 0
  2156  0009D4  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2157  0009D6  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2158  0009D8                     l130:
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;doprnt.c: 1469: }
  2162                           ;doprnt.c: 1472: prec = c;
  2163                           
  2164                           ; BSR set to: 0
  2165  0009D8  C06C  F069         	movff	sprintf@c,sprintf@prec
  2166                           
  2167                           ;doprnt.c: 1474: while(prec--) {
  2168  0009DC  D02A               	goto	l131
  2169  0009DE                     
  2170                           ; BSR set to: 0
  2171                           ;doprnt.c: 1478: {
  2172                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2173                           
  2174                           ; BSR set to: 0
  2175  0009DE  5169               	movf	sprintf@prec& (0+255),w,b
  2176  0009E0  0D02               	mullw	2
  2177  0009E2  0E11               	movlw	low _dpowers
  2178  0009E4  24F3               	addwf	prodl,w,c
  2179  0009E6  6EF6               	movwf	tblptrl,c
  2180  0009E8  0E03               	movlw	high _dpowers
  2181  0009EA  20F4               	addwfc	prodh,w,c
  2182  0009EC  6EF7               	movwf	tblptrh,c
  2183  0009EE                     	if	0	;There are less than 3 active tblptr bytes
  2184  0009EE                     	endif
  2185  0009EE  0009               	tblrd		*+
  2186  0009F0  CFF5 F02A          	movff	tablat,___lwdiv@divisor
  2187  0009F4  000A               	tblrd		*-
  2188  0009F6  CFF5 F02B          	movff	tablat,___lwdiv@divisor+1
  2189  0009FA  C06A  F028         	movff	sprintf@val,___lwdiv@dividend
  2190  0009FE  C06B  F029         	movff	sprintf@val+1,___lwdiv@dividend+1
  2191  000A02  ECD2  F005         	call	___lwdiv	;wreg free
  2192  000A06  C028  F02F         	movff	?___lwdiv,___lwmod@dividend
  2193  000A0A  C029  F030         	movff	?___lwdiv+1,___lwmod@dividend+1
  2194  000A0E  0E00               	movlw	0
  2195  000A10  6E32               	movwf	___lwmod@divisor+1,c
  2196  000A12  0E0A               	movlw	10
  2197  000A14  6E31               	movwf	___lwmod@divisor,c
  2198  000A16  ECFB  F005         	call	___lwmod	;wreg free
  2199  000A1A  502F               	movf	?___lwmod,w,c
  2200  000A1C  0F30               	addlw	48
  2201  000A1E  0100               	movlb	0	; () banked
  2202  000A20  6F6C               	movwf	sprintf@c& (0+255),b
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;doprnt.c: 1523: }
  2206                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2207  000A22  C060  FFD9         	movff	sprintf@sp,fsr2l
  2208  000A26  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2209  000A2A  C06C  FFDF         	movff	sprintf@c,indf2
  2210                           
  2211                           ; BSR set to: 0
  2212  000A2E  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2213  000A30  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2214  000A32                     l131:
  2215                           
  2216                           ; BSR set to: 0
  2217                           
  2218                           ; BSR set to: 0
  2219  000A32  0769               	decf	sprintf@prec& (0+255),f,b
  2220  000A34  2969               	incf	sprintf@prec& (0+255),w,b
  2221  000A36  A4D8               	btfss	status,2,c
  2222  000A38  D7D2               	goto	l132
  2223  000A3A                     u470:
  2224                           
  2225                           ; BSR set to: 0
  2226                           
  2227                           ; BSR set to: 0
  2228                           
  2229                           ; BSR set to: 0
  2230  000A3A  C062  FFF6         	movff	sprintf@f,tblptrl
  2231  000A3E  C063  FFF7         	movff	sprintf@f+1,tblptrh
  2232  000A42  4B62               	infsnz	sprintf@f& (0+255),f,b
  2233  000A44  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  2234  000A46                     	if	0	;tblptru may be non-zero
  2235  000A46                     	endif
  2236  000A46                     	if	0	;tblptru may be non-zero
  2237  000A46                     	endif
  2238  000A46  0008               	tblrd		*
  2239  000A48  CFF5 F06C          	movff	tablat,sprintf@c
  2240  000A4C  516C               	movf	sprintf@c& (0+255),w,b
  2241  000A4E  A4D8               	btfss	status,2,c
  2242  000A50  D767               	goto	l117
  2243  000A52                     u480:
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;doprnt.c: 1538: *sp = 0;
  2247                           
  2248                           ; BSR set to: 0
  2249                           
  2250                           ;doprnt.c: 1525: }
  2251                           ;doprnt.c: 1533: }
  2252                           ;doprnt.c: 1535: alldone:
  2253                           
  2254                           ; BSR set to: 0
  2255  000A52  C060  FFD9         	movff	sprintf@sp,fsr2l
  2256  000A56  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2257  000A5A  0E00               	movlw	0
  2258  000A5C  6EDF               	movwf	indf2,c
  2259  000A5E  0012               	return	
  2260  000A60                     __end_of_sprintf:
  2261                           	opt stack 0
  2262                           tblptru	equ	0xFF8
  2263                           tblptrh	equ	0xFF7
  2264                           tblptrl	equ	0xFF6
  2265                           tablat	equ	0xFF5
  2266                           prodh	equ	0xFF4
  2267                           prodl	equ	0xFF3
  2268                           postinc0	equ	0xFEE
  2269                           wreg	equ	0xFE8
  2270                           indf1	equ	0xFE7
  2271                           postdec1	equ	0xFE5
  2272                           fsr1h	equ	0xFE2
  2273                           fsr1l	equ	0xFE1
  2274                           indf2	equ	0xFDF
  2275                           postinc2	equ	0xFDE
  2276                           postdec2	equ	0xFDD
  2277                           fsr2h	equ	0xFDA
  2278                           fsr2l	equ	0xFD9
  2279                           status	equ	0xFD8
  2280                           
  2281 ;; *************** function ___lwmod *****************
  2282 ;; Defined at:
  2283 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  dividend        2   46[COMRAM] unsigned int 
  2286 ;;  divisor         2   48[COMRAM] unsigned int 
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;  counter         1   50[COMRAM] unsigned char 
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  2   46[COMRAM] unsigned int 
  2291 ;; Registers used:
  2292 ;;		wreg, status,2, status,0
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2298 ;;      Params:         4       0       0       0
  2299 ;;      Locals:         1       0       0       0
  2300 ;;      Temps:          0       0       0       0
  2301 ;;      Totals:         5       0       0       0
  2302 ;;Total ram usage:        5 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:    2
  2305 ;; This function calls:
  2306 ;;		Nothing
  2307 ;; This function is called by:
  2308 ;;		_sprintf
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           	psect	text10
  2313  000BF6                     __ptext10:
  2314                           	opt stack 0
  2315  000BF6                     ___lwmod:
  2316                           	opt stack 26
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;incstack = 0
  2320  000BF6  5031               	movf	___lwmod@divisor,w,c
  2321  000BF8  1032               	iorwf	___lwmod@divisor+1,w,c
  2322  000BFA  B4D8               	btfsc	status,2,c
  2323  000BFC  D018               	goto	l554
  2324  000BFE  0E01               	movlw	1
  2325  000C00  6E33               	movwf	___lwmod@counter,c
  2326  000C02  D004               	goto	l549
  2327  000C04  90D8               	bcf	status,0,c
  2328  000C06  3631               	rlcf	___lwmod@divisor,f,c
  2329  000C08  3632               	rlcf	___lwmod@divisor+1,f,c
  2330  000C0A  2A33               	incf	___lwmod@counter,f,c
  2331  000C0C                     l549:
  2332  000C0C  AE32               	btfss	___lwmod@divisor+1,7,c
  2333  000C0E  D7FA               	goto	l550
  2334  000C10                     u340:
  2335  000C10  5031               	movf	___lwmod@divisor,w,c
  2336  000C12  5C2F               	subwf	___lwmod@dividend,w,c
  2337  000C14  5032               	movf	___lwmod@divisor+1,w,c
  2338  000C16  5830               	subwfb	___lwmod@dividend+1,w,c
  2339  000C18  A0D8               	btfss	status,0,c
  2340  000C1A  D004               	goto	l553
  2341  000C1C  5031               	movf	___lwmod@divisor,w,c
  2342  000C1E  5E2F               	subwf	___lwmod@dividend,f,c
  2343  000C20  5032               	movf	___lwmod@divisor+1,w,c
  2344  000C22  5A30               	subwfb	___lwmod@dividend+1,f,c
  2345  000C24                     l553:
  2346  000C24  90D8               	bcf	status,0,c
  2347  000C26  3232               	rrcf	___lwmod@divisor+1,f,c
  2348  000C28  3231               	rrcf	___lwmod@divisor,f,c
  2349  000C2A  2E33               	decfsz	___lwmod@counter,f,c
  2350  000C2C  D7F1               	goto	u340
  2351  000C2E                     l554:
  2352  000C2E  C02F  F02F         	movff	___lwmod@dividend,?___lwmod
  2353  000C32  C030  F030         	movff	___lwmod@dividend+1,?___lwmod+1
  2354  000C36  0012               	return		;funcret
  2355  000C38                     __end_of___lwmod:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           tblptrh	equ	0xFF7
  2359                           tblptrl	equ	0xFF6
  2360                           tablat	equ	0xFF5
  2361                           prodh	equ	0xFF4
  2362                           prodl	equ	0xFF3
  2363                           postinc0	equ	0xFEE
  2364                           wreg	equ	0xFE8
  2365                           indf1	equ	0xFE7
  2366                           postdec1	equ	0xFE5
  2367                           fsr1h	equ	0xFE2
  2368                           fsr1l	equ	0xFE1
  2369                           indf2	equ	0xFDF
  2370                           postinc2	equ	0xFDE
  2371                           postdec2	equ	0xFDD
  2372                           fsr2h	equ	0xFDA
  2373                           fsr2l	equ	0xFD9
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function ___lwdiv *****************
  2377 ;; Defined at:
  2378 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  dividend        2   39[COMRAM] unsigned int 
  2381 ;;  divisor         2   41[COMRAM] unsigned int 
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  quotient        2   43[COMRAM] unsigned int 
  2384 ;;  counter         1   45[COMRAM] unsigned char 
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  2   39[COMRAM] unsigned int 
  2387 ;; Registers used:
  2388 ;;		wreg, status,2, status,0
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2394 ;;      Params:         4       0       0       0
  2395 ;;      Locals:         3       0       0       0
  2396 ;;      Temps:          0       0       0       0
  2397 ;;      Totals:         7       0       0       0
  2398 ;;Total ram usage:        7 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    2
  2401 ;; This function calls:
  2402 ;;		Nothing
  2403 ;; This function is called by:
  2404 ;;		_sprintf
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text11
  2409  000BA4                     __ptext11:
  2410                           	opt stack 0
  2411  000BA4                     ___lwdiv:
  2412                           	opt stack 26
  2413                           
  2414                           ;incstack = 0
  2415  000BA4  0E00               	movlw	0
  2416  000BA6  6E2D               	movwf	___lwdiv@quotient+1,c
  2417  000BA8  0E00               	movlw	0
  2418  000BAA  6E2C               	movwf	___lwdiv@quotient,c
  2419  000BAC  502A               	movf	___lwdiv@divisor,w,c
  2420  000BAE  102B               	iorwf	___lwdiv@divisor+1,w,c
  2421  000BB0  B4D8               	btfsc	status,2,c
  2422  000BB2  D01C               	goto	l544
  2423  000BB4  0E01               	movlw	1
  2424  000BB6  6E2E               	movwf	___lwdiv@counter,c
  2425  000BB8  D004               	goto	l539
  2426  000BBA  90D8               	bcf	status,0,c
  2427  000BBC  362A               	rlcf	___lwdiv@divisor,f,c
  2428  000BBE  362B               	rlcf	___lwdiv@divisor+1,f,c
  2429  000BC0  2A2E               	incf	___lwdiv@counter,f,c
  2430  000BC2                     l539:
  2431  000BC2  AE2B               	btfss	___lwdiv@divisor+1,7,c
  2432  000BC4  D7FA               	goto	l540
  2433  000BC6                     u310:
  2434  000BC6  90D8               	bcf	status,0,c
  2435  000BC8  362C               	rlcf	___lwdiv@quotient,f,c
  2436  000BCA  362D               	rlcf	___lwdiv@quotient+1,f,c
  2437  000BCC  502A               	movf	___lwdiv@divisor,w,c
  2438  000BCE  5C28               	subwf	___lwdiv@dividend,w,c
  2439  000BD0  502B               	movf	___lwdiv@divisor+1,w,c
  2440  000BD2  5829               	subwfb	___lwdiv@dividend+1,w,c
  2441  000BD4  A0D8               	btfss	status,0,c
  2442  000BD6  D005               	goto	l543
  2443  000BD8  502A               	movf	___lwdiv@divisor,w,c
  2444  000BDA  5E28               	subwf	___lwdiv@dividend,f,c
  2445  000BDC  502B               	movf	___lwdiv@divisor+1,w,c
  2446  000BDE  5A29               	subwfb	___lwdiv@dividend+1,f,c
  2447  000BE0  802C               	bsf	___lwdiv@quotient,0,c
  2448  000BE2                     l543:
  2449  000BE2  90D8               	bcf	status,0,c
  2450  000BE4  322B               	rrcf	___lwdiv@divisor+1,f,c
  2451  000BE6  322A               	rrcf	___lwdiv@divisor,f,c
  2452  000BE8  2E2E               	decfsz	___lwdiv@counter,f,c
  2453  000BEA  D7ED               	goto	u310
  2454  000BEC                     l544:
  2455  000BEC  C02C  F028         	movff	___lwdiv@quotient,?___lwdiv
  2456  000BF0  C02D  F029         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2457  000BF4  0012               	return		;funcret
  2458  000BF6                     __end_of___lwdiv:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           prodh	equ	0xFF4
  2465                           prodl	equ	0xFF3
  2466                           postinc0	equ	0xFEE
  2467                           wreg	equ	0xFE8
  2468                           indf1	equ	0xFE7
  2469                           postdec1	equ	0xFE5
  2470                           fsr1h	equ	0xFE2
  2471                           fsr1l	equ	0xFE1
  2472                           indf2	equ	0xFDF
  2473                           postinc2	equ	0xFDE
  2474                           postdec2	equ	0xFDD
  2475                           fsr2h	equ	0xFDA
  2476                           fsr2l	equ	0xFD9
  2477                           status	equ	0xFD8
  2478                           
  2479 ;; *************** function ___wmul *****************
  2480 ;; Defined at:
  2481 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;  multiplier      2   39[COMRAM] unsigned int 
  2484 ;;  multiplicand    2   41[COMRAM] unsigned int 
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;  product         2   43[COMRAM] unsigned int 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  2   39[COMRAM] unsigned int 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0, prodl, prodh
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2496 ;;      Params:         4       0       0       0
  2497 ;;      Locals:         2       0       0       0
  2498 ;;      Temps:          0       0       0       0
  2499 ;;      Totals:         6       0       0       0
  2500 ;;Total ram usage:        6 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    2
  2503 ;; This function calls:
  2504 ;;		Nothing
  2505 ;; This function is called by:
  2506 ;;		_FillServoPositionString
  2507 ;;		_InitServos
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text12
  2512  000D04                     __ptext12:
  2513                           	opt stack 0
  2514  000D04                     ___wmul:
  2515                           	opt stack 27
  2516                           
  2517                           ;incstack = 0
  2518  000D04  5028               	movf	___wmul@multiplier,w,c
  2519  000D06  022A               	mulwf	___wmul@multiplicand,c
  2520  000D08  CFF3 F02C          	movff	prodl,___wmul@product
  2521  000D0C  CFF4 F02D          	movff	prodh,___wmul@product+1
  2522  000D10  5028               	movf	___wmul@multiplier,w,c
  2523  000D12  022B               	mulwf	___wmul@multiplicand+1,c
  2524  000D14  50F3               	movf	prodl,w,c
  2525  000D16  262D               	addwf	___wmul@product+1,f,c
  2526  000D18  5029               	movf	___wmul@multiplier+1,w,c
  2527  000D1A  022A               	mulwf	___wmul@multiplicand,c
  2528  000D1C  50F3               	movf	prodl,w,c
  2529  000D1E  262D               	addwf	___wmul@product+1,f,c
  2530  000D20  C02C  F028         	movff	___wmul@product,?___wmul
  2531  000D24  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  2532  000D28  0012               	return	
  2533  000D2A                     __end_of___wmul:
  2534                           	opt stack 0
  2535                           tblptru	equ	0xFF8
  2536                           tblptrh	equ	0xFF7
  2537                           tblptrl	equ	0xFF6
  2538                           tablat	equ	0xFF5
  2539                           prodh	equ	0xFF4
  2540                           prodl	equ	0xFF3
  2541                           postinc0	equ	0xFEE
  2542                           wreg	equ	0xFE8
  2543                           indf1	equ	0xFE7
  2544                           postdec1	equ	0xFE5
  2545                           fsr1h	equ	0xFE2
  2546                           fsr1l	equ	0xFE1
  2547                           indf2	equ	0xFDF
  2548                           postinc2	equ	0xFDE
  2549                           postdec2	equ	0xFDD
  2550                           fsr2h	equ	0xFDA
  2551                           fsr2l	equ	0xFD9
  2552                           status	equ	0xFD8
  2553                           
  2554 ;; *************** function _EmptyMovementString *****************
  2555 ;; Defined at:
  2556 ;;		line 247 in file "main.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;		None
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;		None
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  1    wreg      void 
  2563 ;; Registers used:
  2564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2570 ;;      Params:         0       0       0       0
  2571 ;;      Locals:         0       0       0       0
  2572 ;;      Temps:          0       0       0       0
  2573 ;;      Totals:         0       0       0       0
  2574 ;;Total ram usage:        0 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; Hardware stack levels required when called:    3
  2577 ;; This function calls:
  2578 ;;		_memset
  2579 ;; This function is called by:
  2580 ;;		_FillServoPositionString
  2581 ;;		_InitServos
  2582 ;; This function uses a non-reentrant model
  2583 ;;
  2584                           
  2585                           	psect	text13
  2586  000D4C                     __ptext13:
  2587                           	opt stack 0
  2588  000D4C                     _EmptyMovementString:
  2589                           	opt stack 26
  2590                           
  2591                           ;main.c: 248: memset(&movementString[0], 0, sizeof(movementString));
  2592                           
  2593                           ;incstack = 0
  2594  000D4C  0E00               	movlw	low _movementString
  2595  000D4E  6E28               	movwf	memset@p1,c
  2596  000D50  0E01               	movlw	high _movementString
  2597  000D52  6E29               	movwf	memset@p1+1,c
  2598  000D54  0E00               	movlw	0
  2599  000D56  6E2B               	movwf	memset@c+1,c
  2600  000D58  0E00               	movlw	0
  2601  000D5A  6E2A               	movwf	memset@c,c
  2602  000D5C  0E01               	movlw	1
  2603  000D5E  6E2D               	movwf	memset@n+1,c
  2604  000D60  0E00               	movlw	0
  2605  000D62  6E2C               	movwf	memset@n,c
  2606  000D64  EC6C  F006         	call	_memset	;wreg free
  2607  000D68  0012               	return		;funcret
  2608  000D6A                     __end_of_EmptyMovementString:
  2609                           	opt stack 0
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           postinc0	equ	0xFEE
  2617                           wreg	equ	0xFE8
  2618                           indf1	equ	0xFE7
  2619                           postdec1	equ	0xFE5
  2620                           fsr1h	equ	0xFE2
  2621                           fsr1l	equ	0xFE1
  2622                           indf2	equ	0xFDF
  2623                           postinc2	equ	0xFDE
  2624                           postdec2	equ	0xFDD
  2625                           fsr2h	equ	0xFDA
  2626                           fsr2l	equ	0xFD9
  2627                           status	equ	0xFD8
  2628                           
  2629 ;; *************** function _memset *****************
  2630 ;; Defined at:
  2631 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memset.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;  p1              2   39[COMRAM] PTR void 
  2634 ;;		 -> movementString(256), 
  2635 ;;  c               2   41[COMRAM] int 
  2636 ;;  n               2   43[COMRAM] unsigned int 
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;  p               2   45[COMRAM] PTR unsigned char 
  2639 ;;		 -> movementString(256), 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  2   39[COMRAM] PTR void 
  2642 ;; Registers used:
  2643 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2649 ;;      Params:         6       0       0       0
  2650 ;;      Locals:         2       0       0       0
  2651 ;;      Temps:          0       0       0       0
  2652 ;;      Totals:         8       0       0       0
  2653 ;;Total ram usage:        8 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    2
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_EmptyMovementString
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text14
  2664  000CD8                     __ptext14:
  2665                           	opt stack 0
  2666  000CD8                     _memset:
  2667                           	opt stack 26
  2668                           
  2669                           ;incstack = 0
  2670  000CD8  C028  F02E         	movff	memset@p1,memset@p
  2671  000CDC  C029  F02F         	movff	memset@p1+1,memset@p+1
  2672  000CE0  D008               	goto	l563
  2673  000CE2                     l1080:
  2674  000CE2  C02E  FFD9         	movff	memset@p,fsr2l
  2675  000CE6  C02F  FFDA         	movff	memset@p+1,fsr2h
  2676  000CEA  C02A  FFDF         	movff	memset@c,indf2
  2677  000CEE  4A2E               	infsnz	memset@p,f,c
  2678  000CF0  2A2F               	incf	memset@p+1,f,c
  2679  000CF2                     l563:
  2680  000CF2  062C               	decf	memset@n,f,c
  2681  000CF4  A0D8               	btfss	status,0,c
  2682  000CF6  062D               	decf	memset@n+1,f,c
  2683  000CF8  282C               	incf	memset@n,w,c
  2684  000CFA  E1F3               	bnz	l1080
  2685  000CFC  282D               	incf	memset@n+1,w,c
  2686  000CFE  B4D8               	btfsc	status,2,c
  2687  000D00  0012               	return	
  2688  000D02  D7EF               	goto	l564
  2689  000D04                     __end_of_memset:
  2690                           	opt stack 0
  2691                           tblptru	equ	0xFF8
  2692                           tblptrh	equ	0xFF7
  2693                           tblptrl	equ	0xFF6
  2694                           tablat	equ	0xFF5
  2695                           prodh	equ	0xFF4
  2696                           prodl	equ	0xFF3
  2697                           postinc0	equ	0xFEE
  2698                           wreg	equ	0xFE8
  2699                           indf1	equ	0xFE7
  2700                           postdec1	equ	0xFE5
  2701                           fsr1h	equ	0xFE2
  2702                           fsr1l	equ	0xFE1
  2703                           indf2	equ	0xFDF
  2704                           postinc2	equ	0xFDE
  2705                           postdec2	equ	0xFDD
  2706                           fsr2h	equ	0xFDA
  2707                           fsr2l	equ	0xFD9
  2708                           status	equ	0xFD8
  2709                           
  2710 ;; *************** function _ConfigureOscillator *****************
  2711 ;; Defined at:
  2712 ;;		line 23 in file "system.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg, status,2
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2726 ;;      Params:         0       0       0       0
  2727 ;;      Locals:         0       0       0       0
  2728 ;;      Temps:          0       0       0       0
  2729 ;;      Totals:         0       0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    2
  2733 ;; This function calls:
  2734 ;;		Nothing
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           	psect	text15
  2741  000D6A                     __ptext15:
  2742                           	opt stack 0
  2743  000D6A                     _ConfigureOscillator:
  2744                           	opt stack 28
  2745                           
  2746                           ;system.c: 25: OSCTUNEbits.INTSRC = 0b1;
  2747                           
  2748                           ;incstack = 0
  2749  000D6A  8E9B               	bsf	3995,7,c	;volatile
  2750                           
  2751                           ;system.c: 26: OSCTUNEbits.PLLEN = 0b0;
  2752  000D6C  9C9B               	bcf	3995,6,c	;volatile
  2753                           
  2754                           ;system.c: 27: OSCTUNEbits.TUN = 0b00000;
  2755  000D6E  909B               	bcf	3995,0,c	;volatile
  2756  000D70  929B               	bcf	3995,1,c	;volatile
  2757  000D72  949B               	bcf	3995,2,c	;volatile
  2758  000D74  969B               	bcf	3995,3,c	;volatile
  2759  000D76  989B               	bcf	3995,4,c	;volatile
  2760                           
  2761                           ;system.c: 28: OSCCONbits.IDLEN = 0b0;
  2762  000D78  9ED3               	bcf	4051,7,c	;volatile
  2763                           
  2764                           ;system.c: 29: OSCCONbits.IRCF = 0b101;
  2765  000D7A  50D3               	movf	4051,w,c	;volatile
  2766  000D7C  0B8F               	andlw	-113
  2767  000D7E  0950               	iorlw	80
  2768  000D80  6ED3               	movwf	4051,c	;volatile
  2769  000D82  0012               	return		;funcret
  2770  000D84                     __end_of_ConfigureOscillator:
  2771                           	opt stack 0
  2772                           tblptru	equ	0xFF8
  2773                           tblptrh	equ	0xFF7
  2774                           tblptrl	equ	0xFF6
  2775                           tablat	equ	0xFF5
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           postinc0	equ	0xFEE
  2779                           wreg	equ	0xFE8
  2780                           indf1	equ	0xFE7
  2781                           postdec1	equ	0xFE5
  2782                           fsr1h	equ	0xFE2
  2783                           fsr1l	equ	0xFE1
  2784                           indf2	equ	0xFDF
  2785                           postinc2	equ	0xFDE
  2786                           postdec2	equ	0xFDD
  2787                           fsr2h	equ	0xFDA
  2788                           fsr2l	equ	0xFD9
  2789                           status	equ	0xFD8
  2790                           
  2791 ;; *************** function _low_isr *****************
  2792 ;; Defined at:
  2793 ;;		line 67 in file "interrupts.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;		None
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;		None
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		None
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2807 ;;      Params:         0       0       0       0
  2808 ;;      Locals:         0       0       0       0
  2809 ;;      Temps:         21       0       0       0
  2810 ;;      Totals:        21       0       0       0
  2811 ;;Total ram usage:       21 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    1
  2814 ;; This function calls:
  2815 ;;		Nothing
  2816 ;; This function is called by:
  2817 ;;		Interrupt level 1
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	intcodelo
  2822  000018                     __pintcodelo:
  2823                           	opt stack 0
  2824  000018                     _low_isr:
  2825                           	opt stack 26
  2826                           
  2827                           ;incstack = 0
  2828  000018  8038               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2829  00001A  CFD8 F013          	movff	status,??_low_isr
  2830  00001E  CFE8 F014          	movff	wreg,??_low_isr+1
  2831  000022  CFE0 F015          	movff	bsr,??_low_isr+2
  2832  000026  CFFA F016          	movff	pclath,??_low_isr+3
  2833  00002A  CFFB F017          	movff	pclatu,??_low_isr+4
  2834  00002E  CFE9 F018          	movff	fsr0l,??_low_isr+5
  2835  000032  CFEA F019          	movff	fsr0h,??_low_isr+6
  2836  000036  CFE1 F01A          	movff	fsr1l,??_low_isr+7
  2837  00003A  CFE2 F01B          	movff	fsr1h,??_low_isr+8
  2838  00003E  CFD9 F01C          	movff	fsr2l,??_low_isr+9
  2839  000042  CFDA F01D          	movff	fsr2h,??_low_isr+10
  2840  000046  CFF3 F01E          	movff	prodl,??_low_isr+11
  2841  00004A  CFF4 F01F          	movff	prodh,??_low_isr+12
  2842  00004E  CFF6 F020          	movff	tblptrl,??_low_isr+13
  2843  000052  CFF7 F021          	movff	tblptrh,??_low_isr+14
  2844  000056  CFF8 F022          	movff	tblptru,??_low_isr+15
  2845  00005A  CFF5 F023          	movff	tablat,??_low_isr+16
  2846  00005E  C038  F024         	movff	btemp,??_low_isr+17
  2847  000062  C039  F025         	movff	btemp+1,??_low_isr+18
  2848  000066  C03A  F026         	movff	btemp+2,??_low_isr+19
  2849  00006A  C03B  F027         	movff	btemp+3,??_low_isr+20
  2850  00006E  C027  F03B         	movff	??_low_isr+20,btemp+3
  2851  000072  C026  F03A         	movff	??_low_isr+19,btemp+2
  2852  000076  C025  F039         	movff	??_low_isr+18,btemp+1
  2853  00007A  C024  F038         	movff	??_low_isr+17,btemp
  2854  00007E  C023  FFF5         	movff	??_low_isr+16,tablat
  2855  000082  C022  FFF8         	movff	??_low_isr+15,tblptru
  2856  000086  C021  FFF7         	movff	??_low_isr+14,tblptrh
  2857  00008A  C020  FFF6         	movff	??_low_isr+13,tblptrl
  2858  00008E  C01F  FFF4         	movff	??_low_isr+12,prodh
  2859  000092  C01E  FFF3         	movff	??_low_isr+11,prodl
  2860  000096  C01D  FFDA         	movff	??_low_isr+10,fsr2h
  2861  00009A  C01C  FFD9         	movff	??_low_isr+9,fsr2l
  2862  00009E  C01B  FFE2         	movff	??_low_isr+8,fsr1h
  2863  0000A2  C01A  FFE1         	movff	??_low_isr+7,fsr1l
  2864  0000A6  C019  FFEA         	movff	??_low_isr+6,fsr0h
  2865  0000AA  C018  FFE9         	movff	??_low_isr+5,fsr0l
  2866  0000AE  C017  FFFB         	movff	??_low_isr+4,pclatu
  2867  0000B2  C016  FFFA         	movff	??_low_isr+3,pclath
  2868  0000B6  C015  FFE0         	movff	??_low_isr+2,bsr
  2869  0000BA  C014  FFE8         	movff	??_low_isr+1,wreg
  2870  0000BE  C013  FFD8         	movff	??_low_isr,status
  2871  0000C2  9038               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2872  0000C4  0010               	retfie	
  2873  0000C6                     __end_of_low_isr:
  2874                           	opt stack 0
  2875                           pclatu	equ	0xFFB
  2876                           pclath	equ	0xFFA
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           prodh	equ	0xFF4
  2882                           prodl	equ	0xFF3
  2883                           postinc0	equ	0xFEE
  2884                           fsr0h	equ	0xFEA
  2885                           fsr0l	equ	0xFE9
  2886                           wreg	equ	0xFE8
  2887                           indf1	equ	0xFE7
  2888                           postdec1	equ	0xFE5
  2889                           fsr1h	equ	0xFE2
  2890                           fsr1l	equ	0xFE1
  2891                           bsr	equ	0xFE0
  2892                           indf2	equ	0xFDF
  2893                           postinc2	equ	0xFDE
  2894                           postdec2	equ	0xFDD
  2895                           fsr2h	equ	0xFDA
  2896                           fsr2l	equ	0xFD9
  2897                           status	equ	0xFD8
  2898                           
  2899 ;; *************** function _high_isr *****************
  2900 ;; Defined at:
  2901 ;;		line 27 in file "interrupts.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;		None
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;		None
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  1    wreg      void 
  2908 ;; Registers used:
  2909 ;;		None
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2915 ;;      Params:         0       0       0       0
  2916 ;;      Locals:         0       0       0       0
  2917 ;;      Temps:         18       0       0       0
  2918 ;;      Totals:        18       0       0       0
  2919 ;;Total ram usage:       18 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; This function calls:
  2922 ;;		Nothing
  2923 ;; This function is called by:
  2924 ;;		Interrupt level 2
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           	psect	intcode
  2929  000008                     __pintcode:
  2930                           	opt stack 0
  2931  000008                     _high_isr:
  2932                           	opt stack 26
  2933                           
  2934                           ;incstack = 0
  2935  000008  8238               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2936  00000A  ED30  F005         	call	int_func,f	;refresh shadow registers
  2937                           pclatu	equ	0xFFB
  2938                           pclath	equ	0xFFA
  2939                           tblptru	equ	0xFF8
  2940                           tblptrh	equ	0xFF7
  2941                           tblptrl	equ	0xFF6
  2942                           tablat	equ	0xFF5
  2943                           prodh	equ	0xFF4
  2944                           prodl	equ	0xFF3
  2945                           postinc0	equ	0xFEE
  2946                           fsr0h	equ	0xFEA
  2947                           fsr0l	equ	0xFE9
  2948                           wreg	equ	0xFE8
  2949                           indf1	equ	0xFE7
  2950                           postdec1	equ	0xFE5
  2951                           fsr1h	equ	0xFE2
  2952                           fsr1l	equ	0xFE1
  2953                           bsr	equ	0xFE0
  2954                           indf2	equ	0xFDF
  2955                           postinc2	equ	0xFDE
  2956                           postdec2	equ	0xFDD
  2957                           fsr2h	equ	0xFDA
  2958                           fsr2l	equ	0xFD9
  2959                           status	equ	0xFD8
  2960                           
  2961                           	psect	intcode_body
  2962  000A60                     __pintcode_body:
  2963                           	opt stack 26
  2964  000A60                     int_func:
  2965                           	opt stack 26
  2966  000A60  0006               	pop		; remove dummy address from shadow register refresh
  2967  000A62  CFFA F001          	movff	pclath,??_high_isr
  2968  000A66  CFFB F002          	movff	pclatu,??_high_isr+1
  2969  000A6A  CFE9 F003          	movff	fsr0l,??_high_isr+2
  2970  000A6E  CFEA F004          	movff	fsr0h,??_high_isr+3
  2971  000A72  CFE1 F005          	movff	fsr1l,??_high_isr+4
  2972  000A76  CFE2 F006          	movff	fsr1h,??_high_isr+5
  2973  000A7A  CFD9 F007          	movff	fsr2l,??_high_isr+6
  2974  000A7E  CFDA F008          	movff	fsr2h,??_high_isr+7
  2975  000A82  CFF3 F009          	movff	prodl,??_high_isr+8
  2976  000A86  CFF4 F00A          	movff	prodh,??_high_isr+9
  2977  000A8A  CFF6 F00B          	movff	tblptrl,??_high_isr+10
  2978  000A8E  CFF7 F00C          	movff	tblptrh,??_high_isr+11
  2979  000A92  CFF8 F00D          	movff	tblptru,??_high_isr+12
  2980  000A96  CFF5 F00E          	movff	tablat,??_high_isr+13
  2981  000A9A  C038  F00F         	movff	btemp,??_high_isr+14
  2982  000A9E  C039  F010         	movff	btemp+1,??_high_isr+15
  2983  000AA2  C03A  F011         	movff	btemp+2,??_high_isr+16
  2984  000AA6  C03B  F012         	movff	btemp+3,??_high_isr+17
  2985  000AAA  C012  F03B         	movff	??_high_isr+17,btemp+3
  2986  000AAE  C011  F03A         	movff	??_high_isr+16,btemp+2
  2987  000AB2  C010  F039         	movff	??_high_isr+15,btemp+1
  2988  000AB6  C00F  F038         	movff	??_high_isr+14,btemp
  2989  000ABA  C00E  FFF5         	movff	??_high_isr+13,tablat
  2990  000ABE  C00D  FFF8         	movff	??_high_isr+12,tblptru
  2991  000AC2  C00C  FFF7         	movff	??_high_isr+11,tblptrh
  2992  000AC6  C00B  FFF6         	movff	??_high_isr+10,tblptrl
  2993  000ACA  C00A  FFF4         	movff	??_high_isr+9,prodh
  2994  000ACE  C009  FFF3         	movff	??_high_isr+8,prodl
  2995  000AD2  C008  FFDA         	movff	??_high_isr+7,fsr2h
  2996  000AD6  C007  FFD9         	movff	??_high_isr+6,fsr2l
  2997  000ADA  C006  FFE2         	movff	??_high_isr+5,fsr1h
  2998  000ADE  C005  FFE1         	movff	??_high_isr+4,fsr1l
  2999  000AE2  C004  FFEA         	movff	??_high_isr+3,fsr0h
  3000  000AE6  C003  FFE9         	movff	??_high_isr+2,fsr0l
  3001  000AEA  C002  FFFB         	movff	??_high_isr+1,pclatu
  3002  000AEE  C001  FFFA         	movff	??_high_isr,pclath
  3003  000AF2  9238               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3004  000AF4  0011               	retfie		f
  3005  000AF6                     __end_of_high_isr:
  3006                           	opt stack 0
  3007                           pclatu	equ	0xFFB
  3008                           pclath	equ	0xFFA
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           postinc0	equ	0xFEE
  3016                           fsr0h	equ	0xFEA
  3017                           fsr0l	equ	0xFE9
  3018                           wreg	equ	0xFE8
  3019                           indf1	equ	0xFE7
  3020                           postdec1	equ	0xFE5
  3021                           fsr1h	equ	0xFE2
  3022                           fsr1l	equ	0xFE1
  3023                           bsr	equ	0xFE0
  3024                           indf2	equ	0xFDF
  3025                           postinc2	equ	0xFDE
  3026                           postdec2	equ	0xFDD
  3027                           fsr2h	equ	0xFDA
  3028                           fsr2l	equ	0xFD9
  3029                           status	equ	0xFD8
  3030                           pclatu	equ	0xFFB
  3031                           pclath	equ	0xFFA
  3032                           tblptru	equ	0xFF8
  3033                           tblptrh	equ	0xFF7
  3034                           tblptrl	equ	0xFF6
  3035                           tablat	equ	0xFF5
  3036                           prodh	equ	0xFF4
  3037                           prodl	equ	0xFF3
  3038                           postinc0	equ	0xFEE
  3039                           fsr0h	equ	0xFEA
  3040                           fsr0l	equ	0xFE9
  3041                           wreg	equ	0xFE8
  3042                           indf1	equ	0xFE7
  3043                           postdec1	equ	0xFE5
  3044                           fsr1h	equ	0xFE2
  3045                           fsr1l	equ	0xFE1
  3046                           bsr	equ	0xFE0
  3047                           indf2	equ	0xFDF
  3048                           postinc2	equ	0xFDE
  3049                           postdec2	equ	0xFDD
  3050                           fsr2h	equ	0xFDA
  3051                           fsr2l	equ	0xFD9
  3052                           status	equ	0xFD8
  3053                           
  3054                           	psect	rparam
  3055  0000                     pclatu	equ	0xFFB
  3056                           pclath	equ	0xFFA
  3057                           tblptru	equ	0xFF8
  3058                           tblptrh	equ	0xFF7
  3059                           tblptrl	equ	0xFF6
  3060                           tablat	equ	0xFF5
  3061                           prodh	equ	0xFF4
  3062                           prodl	equ	0xFF3
  3063                           postinc0	equ	0xFEE
  3064                           fsr0h	equ	0xFEA
  3065                           fsr0l	equ	0xFE9
  3066                           wreg	equ	0xFE8
  3067                           indf1	equ	0xFE7
  3068                           postdec1	equ	0xFE5
  3069                           fsr1h	equ	0xFE2
  3070                           fsr1l	equ	0xFE1
  3071                           bsr	equ	0xFE0
  3072                           indf2	equ	0xFDF
  3073                           postinc2	equ	0xFDE
  3074                           postdec2	equ	0xFDD
  3075                           fsr2h	equ	0xFDA
  3076                           fsr2l	equ	0xFD9
  3077                           status	equ	0xFD8
  3078                           
  3079                           	psect	temp
  3080  000038                     btemp:
  3081                           	opt stack 0
  3082  000038                     	ds	1
  3083  0000                     int$flags	set	btemp
  3084  0000                     wtemp6	set	btemp+1
  3085                           pclatu	equ	0xFFB
  3086                           pclath	equ	0xFFA
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           prodh	equ	0xFF4
  3092                           prodl	equ	0xFF3
  3093                           postinc0	equ	0xFEE
  3094                           fsr0h	equ	0xFEA
  3095                           fsr0l	equ	0xFE9
  3096                           wreg	equ	0xFE8
  3097                           indf1	equ	0xFE7
  3098                           postdec1	equ	0xFE5
  3099                           fsr1h	equ	0xFE2
  3100                           fsr1l	equ	0xFE1
  3101                           bsr	equ	0xFE0
  3102                           indf2	equ	0xFDF
  3103                           postinc2	equ	0xFDE
  3104                           postdec2	equ	0xFDD
  3105                           fsr2h	equ	0xFDA
  3106                           fsr2l	equ	0xFD9
  3107                           status	equ	0xFD8


Data Sizes:
    Strings     14
    Constant    190
    Data        0
    BSS         256
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     55      55
    BANK0           160     20      20
    BANK1           256      0     256
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 162
		 -> STR_22(CODE[2]), STR_20(CODE[2]), STR_19(CODE[2]), STR_18(CODE[2]), 
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), InitServos@tmp(BANK0[5]), 
		 -> STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[7]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), FillServoPositionString@tmp(BANK0[5]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), servosets(CODE[162]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    memset@p1	PTR void  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    memset@p	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_21(CODE[3]), STR_17(CODE[3]), STR_13(CODE[3]), STR_9(CODE[3]), 
		 -> STR_6(CODE[3]), STR_3(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 5
		 -> InitServos@tmp(BANK0[5]), FillServoPositionString@tmp(BANK0[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    UART_Write_String@str	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 


Critical Paths under _main in COMRAM

    _main->_UART_Write_String
    _InitServos->_UART_Write_String
    _UART_Write_String->_strlen
    _FillServoPositionString->_sprintf
    _strcat->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _EmptyMovementString->_memset

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_FillServoPositionString
    _main->_InitServos
    _InitServos->_sprintf
    _FillServoPositionString->_sprintf

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   19290
                                             53 COMRAM     2     2      0
                _ConfigureOscillator
            _FillServoPositionString
                            _InitApp
                         _InitServos
                          _UART_Init
                  _UART_Write_String
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            2     2      0       0
                                             39 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitServos                                           7     7      0    9645
                                             13 BANK0      7     7      0
                _EmptyMovementString
                  _UART_Write_String
                             ___wmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (1) _UART_Write_String                                    8     6      2     650
                                             45 COMRAM     8     6      2
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     166
                                             39 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FillServoPositionString                              7     7      0    8995
                                             13 BANK0      7     7      0
                _EmptyMovementString
                             ___wmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4    4354
                                             45 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    2014
                                             51 COMRAM     1     1      0
                                              0 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                             46 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             39 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1983
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _EmptyMovementString                                  0     0      0     324
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     324
                                             39 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             21    21      0       0
                                             18 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _FillServoPositionString
     _EmptyMovementString
       _memset
     ___wmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
     _strcat
       ___wmul (ARG)
   _InitApp
   _InitServos
     _EmptyMovementString
       _memset
     _UART_Write_String
       _UART_Write
       _strlen
     ___wmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
     _strcat
       ___wmul (ARG)
   _UART_Init
   _UART_Write_String
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0     100       6      100.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     14      14       4       12.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     37      37       1       58.5%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14B       9        0.0%
DATA                 0      0     14B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed Oct 04 02:32:16 2017

                              l65 0C92                                l74 0B8E  
                              l75 0B6C                                bsr 000FE0  
             ___wmul@multiplicand 002A                       __CFG_BORV$3 000000  
      __size_of_UART_Write_String 0056                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                               l130 09D8  
                             l131 0A32                               l132 09DE  
                             l124 0964                               l117 0920  
                             l126 098C                               l118 093A  
                             l540 0BBA                               l550 0C04  
                             l543 0BE2                               l544 0BEC  
                             l553 0C24                               l554 0C2E  
                             l563 0CF2                               l539 0BC2  
                             l564 0CE2                               l549 0C0C  
                             l690 0B00                               l692 0B1C  
                             l693 0B14                               l689 0B04  
                             l698 0C46                               l699 0C42  
                    __CFG_CPB$OFF 000000                               u310 0BC6  
                             u340 0C10                               u520 08FE  
                             u450 09BC                      __CFG_CPD$OFF 000000  
                             u470 0A3A                               u390 0B44  
                             u480 0A52                               u537 0C9C  
                             u547 0CCA                               u397 0B3A  
                             wreg 000FE8                      __CFG_IESO$ON 000000  
           ??_EmptyMovementString 0030                      __CFG_LVP$OFF 000000  
                    __CFG_WDT$OFF 000000                              l1220 03E0  
                            l1080 0CE2                              l1074 0D86  
                            l1178 0990                              l1278 06B0  
                            STR_1 03C9                              STR_2 03CB  
                            STR_3 03C6                              STR_4 03C9  
                            STR_5 03CB                              STR_6 03C6  
                            STR_7 03C9                              STR_8 03CB  
                            STR_9 03C6                              _TRMT 007D61  
                            _main 0C72                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 0038  
                            prodh 000FF4                              prodl 000FF3  
                            start 00C6                     __CFG_MCLRE$ON 000000  
                    ___param_bank 000000                   __end_of_InitApp 0D92  
                           ?_main 0001                             STR_10 03BF  
                           STR_11 03C9                             STR_20 03CB  
                           STR_12 03CB                             STR_21 03C6  
                           STR_13 03C6                             STR_22 03C4  
                           STR_14 03C4                             STR_15 03C9  
                           STR_16 03CB                             STR_17 03C6  
                           STR_18 03C4                             STR_19 03C9  
                 __end_of___lwdiv 0BF6                   __end_of___lwmod 0C38  
__size_of_FillServoPositionString 027A                             _SPBRG 000FAF  
                           _TXREG 000FAD               _ConfigureOscillator 0D6A  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                     ?_UART_Write 0001                __size_of_UART_Init 002E  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                 __end_of_dpowers 031B                   __end_of_low_isr 00C6  
                           pclath 000FFA                             tablat 000FF5  
                     InitServos@i 0072                             status 000FD8  
                           wtemp6 0039                   __end_of_sprintf 0A60  
                  __CFG_PBADEN$ON 000000              ?_ConfigureOscillator 0001  
                 __initialization 0D2A                        _InitServos 03CE  
                    __end_of_main 0CAA                            ??_main 0036  
                   __activetblptr 000002                   __CFG_BBSIZ$1024 000000  
                          _SPBRGH 000FB0                         ??_InitApp 0028  
           ??_ConfigureOscillator 0028                 __end_of_SERVOSETS 031D  
                  __CFG_XINST$OFF 000000                 __end_of_UART_Init 0CD8  
                __end_of_high_isr 0AF6               __size_of_UART_Write 000C  
                          ___wmul 0D04                    __CFG_STVREN$ON 000000  
                       ??___lwdiv 002C                         ??___lwmod 0033  
                          _memset 0CD8                            clear_0 0D32  
                          _strcat 0AF6                            _strlen 0C38  
                 __CFG_BOREN$BOHW 000000                      __mediumconst 0000  
                       ??_low_isr 0013                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                       ??_sprintf 0034                        __accesstop 0060  
         __end_of__initialization 0D3E        FillServoPositionString@tmp 006D  
                   ___rparam_used 000001                    __pcstackCOMRAM 0001  
        FillServoPositionString@i 0072                       ?_InitServos 0001  
         _FillServoPositionString 069A                   __CFG_OSC$IRCIO7 000000  
                      __pbssBANK1 0100      UART_Write_String@arrayLength 0031  
                         ?___wmul 0028                           ?_memset 0028  
                         ?_strcat 002E                           ?_strlen 0028  
     __end_of_EmptyMovementString 0D6A                      ??_UART_Write 0028  
             __size_of_InitServos 02CC                         ?_high_isr 0001  
                         _InitApp 0D90                           __Hparam 0000  
                         __Lparam 0000                   __size_of___wmul 0026  
              __end_of_UART_Write 0D90         ??_FillServoPositionString 0035  
                         ___lwdiv 0BA4                           ___lwmod 0BF6  
                    __psmallconst 0300                           __pcinit 0D2A  
                 __size_of_memset 002C                           __ramtop 0300  
                         __ptext0 0C72                           __ptext1 0CAA  
                         __ptext2 03CE                           __ptext3 0B4E  
                         __ptext4 0C38                           __ptext5 0D84  
                         __ptext6 0D90                           __ptext7 069A  
                         __ptext8 0AF6                           __ptext9 0914  
                 __size_of_strcat 0058                   __size_of_strlen 003A  
                         _dpowers 0311                           _low_isr 0018  
                         _sprintf 0914                        ??_high_isr 0001  
                  __pintcode_body 0A60              end_of_initialization 0D3E  
                         memset@c 002A                           memset@n 002C  
                         memset@p 002E                     __Lmediumconst 0000  
                         int_func 0A60                     InitServos@tmp 006D  
               __end_of_servosets 03BF                         _RCSTAbits 000FAB  
               __end_of_positions 0311                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                         _SERVOSETS 031B  
                         strlen@s 0028                         _UART_Init 0CAA  
                  UART_Write@data 0028                         _TRISCbits 000F94  
     __end_of_ConfigureOscillator 0D84                    _movementString 0100  
                       _TXSTAbits 000FAC                      ??_InitServos 0036  
                  __end_of___wmul 0D2A                       _BAUDCONbits 000FB8  
                      ?_UART_Init 0001                    __end_of_memset 0D04  
                  __end_of_strcat 0B4E                    __end_of_strlen 0C72  
             start_initialization 0D2A                __end_of_InitServos 069A  
                        ??___wmul 002C                  __CFG_LPT1OSC$OFF 000000  
                        ??_memset 002E                          ??_strcat 0032  
                        ??_strlen 002A                     __pcstackBANK0 0060  
               __size_of_high_isr 0AEE                       sprintf@flag 0068  
                     sprintf@prec 0069                          ?_InitApp 0001  
                ___lwdiv@dividend 0028                         __pintcode 0008  
                        ?___lwdiv 0028                          ?___lwmod 002F  
                     __pintcodelo 0018                       ??_UART_Init 0028  
                     __smallconst 0300                          ?_low_isr 0001  
                ___lwdiv@quotient 002C      __size_of_EmptyMovementString 001E  
                        ?_sprintf 0060                    ___wmul@product 002C  
                __CFG_WDTPS$32768 000000                         _servosets 031D  
                       _positions 0301              UART_Write_String@str 002E  
               ___wmul@multiplier 0028                  __size_of_InitApp 0002  
                        __Hrparam 0000          ?_FillServoPositionString 0001  
                        __Lrparam 0000                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042                 _UART_Write_String 0B4E  
                      sprintf@val 006A                        strcat@from 0030  
              ?_UART_Write_String 002E                   ___lwdiv@divisor 002A  
                 ___lwdiv@counter 002E                  __size_of_low_isr 00AE  
                        __ptext10 0BF6                          __ptext11 0BA4  
                        __ptext12 0D04                          __ptext13 0D4C  
                        __ptext14 0CD8                          __ptext15 0D6A  
                        _high_isr 0008                  __size_of_sprintf 014C  
             ??_UART_Write_String 0030                     __size_of_main 0038  
    __size_of_ConfigureOscillator 001A                          int$flags 0038  
       __end_of_UART_Write_String 0BA4                       _OSCTUNEbits 000F9B  
                        memset@p1 0028                          intlevel1 0000  
                        intlevel2 0000                         sprintf@ap 0066  
                       sprintf@sp 0060   __end_of_FillServoPositionString 0914  
                ___lwmod@dividend 002F                        _OSCCONbits 000FD3  
              UART_Write_String@a 0035                UART_Write_String@i 0033  
             _EmptyMovementString 0D4C                          sprintf@c 006C  
                        sprintf@f 0062                          strcat@cp 0032  
                        strcat@to 002E                   ___lwmod@divisor 0031  
                        strlen@cp 002C                   ___lwmod@counter 0033  
                      _UART_Write 0D84              ?_EmptyMovementString 0001  
