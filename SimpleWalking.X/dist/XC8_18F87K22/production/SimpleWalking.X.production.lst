

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed Oct 04 22:16:49 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           ; Version 1.44
    36                           ; Generated 14/09/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F2480 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataBANK0
    71  000C34                     __pidataBANK0:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _servosets
    75  000C34  0000               	dw	0
    76  000C36  31                 	db	49
    77  000C37  32                 	db	50
    78  000C38  00                 	db	0
    79  000C39  31                 	db	49
    80  000C3A  00                 	db	0
    81  000C3B  00                 	db	0
    82  000C3C  32                 	db	50
    83  000C3D  00                 	db	0
    84  000C3E  00                 	db	0
    85  000C3F  06A4               	dw	1700
    86  000C41  0898               	dw	2200
    87  000C43  0708               	dw	1800
    88  000C45  0001               	dw	1
    89  000C47  0001               	dw	1
    90  000C49  0002               	dw	2
    91  000C4B  34                 	db	52
    92  000C4C  00                 	db	0
    93  000C4D  00                 	db	0
    94  000C4E  35                 	db	53
    95  000C4F  00                 	db	0
    96  000C50  00                 	db	0
    97  000C51  36                 	db	54
    98  000C52  00                 	db	0
    99  000C53  00                 	db	0
   100  000C54  0546               	dw	1350
   101  000C56  0640               	dw	1600
   102  000C58  06A4               	dw	1700
   103  000C5A  0001               	dw	1
   104  000C5C  0001               	dw	1
   105  000C5E  0000               	dw	0
   106  000C60  38                 	db	56
   107  000C61  00                 	db	0
   108  000C62  00                 	db	0
   109  000C63  39                 	db	57
   110  000C64  00                 	db	0
   111  000C65  00                 	db	0
   112  000C66  31                 	db	49
   113  000C67  30                 	db	48
   114  000C68  00                 	db	0
   115  000C69  03E8               	dw	1000
   116  000C6B  0640               	dw	1600
   117  000C6D  0708               	dw	1800
   118  000C6F  0001               	dw	1
   119  000C71  0001               	dw	1
   120  000C73  0002               	dw	2
   121  000C75  31                 	db	49
   122  000C76  36                 	db	54
   123  000C77  00                 	db	0
   124  000C78  31                 	db	49
   125  000C79  37                 	db	55
   126  000C7A  00                 	db	0
   127  000C7B  31                 	db	49
   128  000C7C  38                 	db	56
   129  000C7D  00                 	db	0
   130  000C7E  0640               	dw	1600
   131  000C80  04B0               	dw	1200
   132  000C82  05DC               	dw	1500
   133  000C84  FFFF               	dw	65535
   134  000C86  FFFF               	dw	65535
   135  000C88  0000               	dw	0
   136  000C8A  32                 	db	50
   137  000C8B  30                 	db	48
   138  000C8C  00                 	db	0
   139  000C8D  32                 	db	50
   140  000C8E  31                 	db	49
   141  000C8F  00                 	db	0
   142  000C90  32                 	db	50
   143  000C91  32                 	db	50
   144  000C92  00                 	db	0
   145  000C93  0834               	dw	2100
   146  000C95  0514               	dw	1300
   147  000C97  03E8               	dw	1000
   148  000C99  FFFF               	dw	65535
   149  000C9B  FFFF               	dw	65535
   150  000C9D  0002               	dw	2
   151  000C9F  32                 	db	50
   152  000CA0  34                 	db	52
   153  000CA1  00                 	db	0
   154  000CA2  32                 	db	50
   155  000CA3  35                 	db	53
   156  000CA4  00                 	db	0
   157  000CA5  32                 	db	50
   158  000CA6  36                 	db	54
   159  000CA7  00                 	db	0
   160  000CA8  076C               	dw	1900
   161  000CAA  0578               	dw	1400
   162  000CAC  03E8               	dw	1000
   163  000CAE  FFFF               	dw	65535
   164  000CB0  FFFF               	dw	65535
   165                           
   166                           	psect	smallconst
   167  000300                     __psmallconst:
   168                           	opt stack 0
   169  000300  00                 	db	0
   170  000301                     _positions:
   171                           	opt stack 0
   172  000301  0000               	dw	0
   173  000303  0000               	dw	0
   174  000305  00C8               	dw	200
   175  000307  0000               	dw	0
   176  000309  0000               	dw	0
   177  00030B  00C8               	dw	200
   178  00030D  0000               	dw	0
   179  00030F  FF38               	dw	65336
   180  000311                     __end_of_positions:
   181                           	opt stack 0
   182  000311                     _dpowers:
   183                           	opt stack 0
   184  000311  0001               	dw	1
   185  000313  000A               	dw	10
   186  000315  0064               	dw	100
   187  000317  03E8               	dw	1000
   188  000319  2710               	dw	10000
   189  00031B                     __end_of_dpowers:
   190                           	opt stack 0
   191  00031B                     _SERVOSETS:
   192                           	opt stack 0
   193  00031B  0006               	dw	6
   194  00031D                     __end_of_SERVOSETS:
   195                           	opt stack 0
   196  0000                     _OSCCONbits	set	4051
   197  0000                     _OSCTUNEbits	set	3995
   198  0000                     _TXREG	set	4013
   199  0000                     _TRISCbits	set	3988
   200  0000                     _RCSTAbits	set	4011
   201  0000                     _SPBRGH	set	4016
   202  0000                     _SPBRG	set	4015
   203  0000                     _TXSTAbits	set	4012
   204  0000                     _BAUDCONbits	set	4024
   205  0000                     _TRMT	set	32097
   206  00031D                     STR_10:
   207  00031D  54                 	db	84	;'T'
   208  00031E  34                 	db	52	;'4'
   209  00031F  30                 	db	48	;'0'
   210  000320  30                 	db	48	;'0'
   211  000321  0D                 	db	13
   212  000322  00                 	db	0
   213  000323                     STR_3:
   214  000323  25                 	db	37
   215  000324  64                 	db	100	;'d'
   216  000325  00                 	db	0
   217  000326                     STR_1:
   218  000326  23                 	db	35
   219  000327  00                 	db	0
   220  000328                     STR_2:
   221  000328  50                 	db	80	;'P'
   222  000329  00                 	db	0
   223  0000                     
   224                           ; #config settings
   225  00032A  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	cinit
   228  000DB2                     __pcinit:
   229                           	opt stack 0
   230  000DB2                     start_initialization:
   231                           	opt stack 0
   232  000DB2                     __initialization:
   233                           	opt stack 0
   234                           
   235                           ; Initialize objects allocated to BANK0 (126 bytes)
   236                           ; load TBLPTR registers with __pidataBANK0
   237  000DB2  0E34               	movlw	low __pidataBANK0
   238  000DB4  6EF6               	movwf	tblptrl,c
   239  000DB6  0E0C               	movlw	high __pidataBANK0
   240  000DB8  6EF7               	movwf	tblptrh,c
   241  000DBA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   242  000DBC  6EF8               	movwf	tblptru,c
   243  000DBE  EE00  F060         	lfsr	0,__pdataBANK0
   244  000DC2  EE10 F07E          	lfsr	1,126
   245  000DC6                     copy_data0:
   246  000DC6  0009               	tblrd		*+
   247  000DC8  CFF5 FFEE          	movff	tablat,postinc0
   248  000DCC  50E5               	movf	postdec1,w,c
   249  000DCE  50E1               	movf	fsr1l,w,c
   250  000DD0  E1FA               	bnz	copy_data0
   251                           
   252                           ; Clear objects allocated to BANK1 (256 bytes)
   253  000DD2  EE01  F000         	lfsr	0,__pbssBANK1
   254  000DD6  EE11 F000          	lfsr	1,256
   255  000DDA                     clear_0:
   256  000DDA  6AEE               	clrf	postinc0,c
   257  000DDC  50E5               	movf	postdec1,w,c
   258  000DDE  50E1               	movf	fsr1l,w,c
   259  000DE0  E1FC               	bnz	clear_0
   260  000DE2  50E2               	movf	fsr1h,w,c
   261  000DE4  E1FA               	bnz	clear_0
   262  000DE6                     end_of_initialization:
   263                           	opt stack 0
   264  000DE6                     __end_of__initialization:
   265                           	opt stack 0
   266  000DE6  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   267  000DE8  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   268  000DEA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   269  000DEC  6EF8               	movwf	tblptru,c
   270  000DEE  0100               	movlb	0
   271  000DF0  EF78  F007         	goto	_main	;jump to C main() function
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           postdec1	equ	0xFE5
   278                           fsr1h	equ	0xFE2
   279                           fsr1l	equ	0xFE1
   280                           
   281                           	psect	dataBANK0
   282  000060                     __pdataBANK0:
   283                           	opt stack 0
   284  000060                     _servosets:
   285                           	opt stack 0
   286  000060                     	ds	126
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           postdec1	equ	0xFE5
   293                           fsr1h	equ	0xFE2
   294                           fsr1l	equ	0xFE1
   295                           
   296                           	psect	bssBANK1
   297  000100                     __pbssBANK1:
   298                           	opt stack 0
   299  000100                     _movementString:
   300                           	opt stack 0
   301  000100                     	ds	256
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           postdec1	equ	0xFE5
   308                           fsr1h	equ	0xFE2
   309                           fsr1l	equ	0xFE1
   310                           
   311                           	psect	cstackBANK0
   312  0000DE                     __pcstackBANK0:
   313                           	opt stack 0
   314  0000DE                     ?_sprintf:
   315                           	opt stack 0
   316  0000DE                     sprintf@sp:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x0
   320  0000DE                     	ds	2
   321  0000E0                     sprintf@f:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x2
   325  0000E0                     	ds	4
   326  0000E4                     sprintf@ap:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x6
   330  0000E4                     	ds	2
   331  0000E6                     sprintf@flag:
   332                           	opt stack 0
   333                           
   334                           ; 1 bytes @ 0x8
   335  0000E6                     	ds	1
   336  0000E7                     sprintf@prec:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x9
   340  0000E7                     	ds	1
   341  0000E8                     sprintf@val:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0xA
   345  0000E8                     	ds	2
   346  0000EA                     sprintf@c:
   347                           	opt stack 0
   348                           
   349                           ; 1 bytes @ 0xC
   350  0000EA                     	ds	1
   351  0000EB                     FillServoPositionString@deltaHorizontal:
   352                           	opt stack 0
   353  0000EB                     InitServos@tmp:
   354                           	opt stack 0
   355                           
   356                           ; 5 bytes @ 0xD
   357  0000EB                     	ds	2
   358  0000ED                     FillServoPositionString@newHorizontalPosition:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0xF
   362  0000ED                     	ds	2
   363  0000EF                     FillServoPositionString@deltaVertical:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x11
   367  0000EF                     	ds	1
   368  0000F0                     InitServos@i:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x12
   372  0000F0                     	ds	1
   373  0000F1                     FillServoPositionString@newVerticalPosition:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x13
   377  0000F1                     	ds	2
   378  0000F3                     FillServoPositionString@tmp:
   379                           	opt stack 0
   380                           
   381                           ; 5 bytes @ 0x15
   382  0000F3                     	ds	5
   383  0000F8                     _FillServoPositionString$1046:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x1A
   387  0000F8                     	ds	2
   388  0000FA                     _FillServoPositionString$1047:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x1C
   392  0000FA                     	ds	2
   393  0000FC                     FillServoPositionString@i:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x1E
   397  0000FC                     	ds	2
   398                           tblptru	equ	0xFF8
   399                           tblptrh	equ	0xFF7
   400                           tblptrl	equ	0xFF6
   401                           tablat	equ	0xFF5
   402                           postinc0	equ	0xFEE
   403                           postdec1	equ	0xFE5
   404                           fsr1h	equ	0xFE2
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	cstackCOMRAM
   408  000001                     __pcstackCOMRAM:
   409                           	opt stack 0
   410  000001                     ??_high_isr:
   411  000001                     
   412                           ; 1 bytes @ 0x0
   413  000001                     	ds	18
   414  000013                     ??_low_isr:
   415                           
   416                           ; 1 bytes @ 0x12
   417  000013                     	ds	21
   418  000028                     ??_UART_Init:
   419  000028                     ?_strlen:
   420                           	opt stack 0
   421  000028                     ?___wmul:
   422                           	opt stack 0
   423  000028                     ?___lwdiv:
   424                           	opt stack 0
   425  000028                     UART_Write@data:
   426                           	opt stack 0
   427  000028                     ___wmul@multiplier:
   428                           	opt stack 0
   429  000028                     ___lwdiv@dividend:
   430                           	opt stack 0
   431  000028                     memset@p1:
   432                           	opt stack 0
   433  000028                     strlen@s:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x27
   437  000028                     	ds	2
   438  00002A                     ??_strlen:
   439  00002A                     ___wmul@multiplicand:
   440                           	opt stack 0
   441  00002A                     ___lwdiv@divisor:
   442                           	opt stack 0
   443  00002A                     memset@c:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x29
   447  00002A                     	ds	2
   448  00002C                     ___wmul@product:
   449                           	opt stack 0
   450  00002C                     ___lwdiv@quotient:
   451                           	opt stack 0
   452  00002C                     memset@n:
   453                           	opt stack 0
   454  00002C                     strlen@cp:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x2B
   458  00002C                     	ds	2
   459  00002E                     ___lwdiv@counter:
   460                           	opt stack 0
   461  00002E                     UART_Write_String@str:
   462                           	opt stack 0
   463  00002E                     memset@p:
   464                           	opt stack 0
   465  00002E                     strcat@to:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x2D
   469  00002E                     	ds	1
   470  00002F                     ?___lwmod:
   471                           	opt stack 0
   472  00002F                     ___lwmod@dividend:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x2E
   476  00002F                     	ds	1
   477  000030                     ??_UART_Write_String:
   478  000030                     RotatePositions@i:
   479                           	opt stack 0
   480  000030                     strcat@from:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x2F
   484  000030                     	ds	1
   485  000031                     UART_Write_String@arrayLength:
   486                           	opt stack 0
   487  000031                     ___lwmod@divisor:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x30
   491  000031                     	ds	1
   492  000032                     strcat@cp:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x31
   496  000032                     	ds	1
   497  000033                     ___lwmod@counter:
   498                           	opt stack 0
   499  000033                     UART_Write_String@i:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x32
   503  000033                     	ds	1
   504  000034                     ??_sprintf:
   505                           
   506                           ; 1 bytes @ 0x33
   507  000034                     	ds	1
   508  000035                     ??_FillServoPositionString:
   509  000035                     UART_Write_String@a:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x34
   513  000035                     	ds	1
   514  000036                     
   515                           ; 1 bytes @ 0x35
   516  000036                     	ds	1
   517  000037                     tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           postdec1	equ	0xFE5
   523                           fsr1h	equ	0xFE2
   524                           fsr1l	equ	0xFE1
   525                           
   526                           ; 1 bytes @ 0x36
   527 ;;
   528 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   529 ;;
   530 ;; *************** function _main *****************
   531 ;; Defined at:
   532 ;;		line 137 in file "main.c"
   533 ;; Parameters:    Size  Location     Type
   534 ;;		None
   535 ;; Auto vars:     Size  Location     Type
   536 ;;		None
   537 ;; Return value:  Size  Location     Type
   538 ;;                  1    wreg      void 
   539 ;; Registers used:
   540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   541 ;; Tracked objects:
   542 ;;		On entry : 0/0
   543 ;;		On exit  : 0/0
   544 ;;		Unchanged: 0/0
   545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   546 ;;      Params:         0       0       0       0
   547 ;;      Locals:         0       0       0       0
   548 ;;      Temps:          0       0       0       0
   549 ;;      Totals:         0       0       0       0
   550 ;;Total ram usage:        0 bytes
   551 ;; Hardware stack levels required when called:    5
   552 ;; This function calls:
   553 ;;		_ConfigureOscillator
   554 ;;		_FillServoPositionString
   555 ;;		_InitServos
   556 ;;		_RotatePositions
   557 ;;		_UART_Init
   558 ;;		_UART_Write_String
   559 ;; This function is called by:
   560 ;;		Startup code after reset
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           	psect	text0
   565  000EF0                     __ptext0:
   566                           	opt stack 0
   567  000EF0                     _main:
   568                           	opt stack 26
   569                           
   570                           ;main.c: 142: ConfigureOscillator();
   571                           
   572                           ;incstack = 0
   573  000EF0  EC98  F007         	call	_ConfigureOscillator	;wreg free
   574                           
   575                           ;main.c: 146: UART_Init();
   576  000EF4  EC38  F007         	call	_UART_Init	;wreg free
   577                           
   578                           ;main.c: 150: InitServos();
   579  000EF8  EC77  F003         	call	_InitServos	;wreg free
   580  000EFC                     
   581                           ;main.c: 158: FillServoPositionString();
   582  000EFC  EC96  F001         	call	_FillServoPositionString	;wreg free
   583                           
   584                           ;main.c: 162: UART_Write_String(movementString);
   585  000F00  0E00               	movlw	low _movementString
   586  000F02  6E2E               	movwf	UART_Write_String@str,c
   587  000F04  0E01               	movlw	high _movementString
   588  000F06  6E2F               	movwf	UART_Write_String@str+1,c
   589  000F08  EC85  F006         	call	_UART_Write_String	;wreg free
   590                           
   591                           ;main.c: 166: RotatePositions();
   592  000F0C  EC7D  F005         	call	_RotatePositions	;wreg free
   593  000F10  D7F5               	goto	l65
   594  000F12                     __end_of_main:
   595                           	opt stack 0
   596                           tblptru	equ	0xFF8
   597                           tblptrh	equ	0xFF7
   598                           tblptrl	equ	0xFF6
   599                           tablat	equ	0xFF5
   600                           postinc0	equ	0xFEE
   601                           postdec1	equ	0xFE5
   602                           fsr1h	equ	0xFE2
   603                           fsr1l	equ	0xFE1
   604                           
   605 ;; *************** function _UART_Init *****************
   606 ;; Defined at:
   607 ;;		line 172 in file "main.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      unsigned char 
   614 ;; Registers used:
   615 ;;		wreg, status,2
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   621 ;;      Params:         0       0       0       0
   622 ;;      Locals:         0       0       0       0
   623 ;;      Temps:          2       0       0       0
   624 ;;      Totals:         2       0       0       0
   625 ;;Total ram usage:        2 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; Hardware stack levels required when called:    2
   628 ;; This function calls:
   629 ;;		Nothing
   630 ;; This function is called by:
   631 ;;		_main
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text1
   636  000E70                     __ptext1:
   637                           	opt stack 0
   638  000E70                     _UART_Init:
   639                           	opt stack 28
   640                           
   641                           ;main.c: 173: BAUDCONbits.BRG16 = 0b1;
   642                           
   643                           ;incstack = 0
   644  000E70  86B8               	bsf	4024,3,c	;volatile
   645                           
   646                           ;main.c: 174: TXSTAbits.BRGH = 0b1;
   647  000E72  84AC               	bsf	4012,2,c	;volatile
   648                           
   649                           ;main.c: 175: SPBRG = 51;
   650  000E74  0E33               	movlw	51
   651  000E76  6EAF               	movwf	4015,c	;volatile
   652                           
   653                           ;main.c: 176: SPBRGH = 0;
   654  000E78  0E00               	movlw	0
   655  000E7A  6EB0               	movwf	4016,c	;volatile
   656                           
   657                           ;main.c: 177: TXSTAbits.SYNC = 0b0;
   658  000E7C  98AC               	bcf	4012,4,c	;volatile
   659                           
   660                           ;main.c: 178: RCSTAbits.SPEN = 0b1;
   661  000E7E  8EAB               	bsf	4011,7,c	;volatile
   662                           
   663                           ;main.c: 179: TXSTAbits.TXEN = 0b1;
   664  000E80  8AAC               	bsf	4012,5,c	;volatile
   665                           
   666                           ;main.c: 181: TRISCbits.TRISC6 = 0b0;
   667  000E82  9C94               	bcf	3988,6,c	;volatile
   668                           
   669                           ;main.c: 182: TRISCbits.TRISC7 = 0b1;
   670  000E84  8E94               	bsf	3988,7,c	;volatile
   671                           
   672                           ;main.c: 184: _delay((unsigned long)((1000)*(2000000/4000.0)));
   673  000E86  0E03               	movlw	3
   674  000E88  6E29               	movwf	(??_UART_Init+1)& (0+255),c
   675  000E8A  0E8A               	movlw	138
   676  000E8C  6E28               	movwf	??_UART_Init& (0+255),c
   677  000E8E  0E56               	movlw	86
   678  000E90                     u597:
   679  000E90  2EE8               	decfsz	wreg,f,c
   680  000E92  D7FE               	bra	u597
   681  000E94  2E28               	decfsz	??_UART_Init& (0+255),f,c
   682  000E96  D7FC               	bra	u597
   683  000E98  2E29               	decfsz	(??_UART_Init+1)& (0+255),f,c
   684  000E9A  D7FA               	bra	u597
   685  000E9C  0012               	return	
   686  000E9E                     __end_of_UART_Init:
   687                           	opt stack 0
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           postdec1	equ	0xFE5
   695                           fsr1h	equ	0xFE2
   696                           fsr1l	equ	0xFE1
   697                           
   698 ;; *************** function _RotatePositions *****************
   699 ;; Defined at:
   700 ;;		line 272 in file "main.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;		None
   703 ;; Auto vars:     Size  Location     Type
   704 ;;  i               2   47[COMRAM] unsigned int 
   705 ;; Return value:  Size  Location     Type
   706 ;;                  1    wreg      void 
   707 ;; Registers used:
   708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   709 ;; Tracked objects:
   710 ;;		On entry : 0/0
   711 ;;		On exit  : 0/0
   712 ;;		Unchanged: 0/0
   713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   714 ;;      Params:         0       0       0       0
   715 ;;      Locals:         2       0       0       0
   716 ;;      Temps:          2       0       0       0
   717 ;;      Totals:         4       0       0       0
   718 ;;Total ram usage:        4 bytes
   719 ;; Hardware stack levels used:    1
   720 ;; Hardware stack levels required when called:    3
   721 ;; This function calls:
   722 ;;		___wmul
   723 ;; This function is called by:
   724 ;;		_main
   725 ;; This function uses a non-reentrant model
   726 ;;
   727                           
   728                           	psect	text2
   729  000AFA                     __ptext2:
   730                           	opt stack 0
   731  000AFA                     _RotatePositions:
   732                           	opt stack 27
   733                           
   734                           ;main.c: 273: for (unsigned int i = 0; i < SERVOSETS; i++) {
   735                           
   736                           ;incstack = 0
   737  000AFA  0E00               	movlw	0
   738  000AFC  6E31               	movwf	RotatePositions@i+1,c
   739  000AFE  0E00               	movlw	0
   740  000B00  6E30               	movwf	RotatePositions@i,c
   741  000B02                     l1367:
   742  000B02  0E1B               	movlw	low _SERVOSETS
   743  000B04  6EF6               	movwf	tblptrl,c
   744  000B06                     	if	1	;There is more than 1 active tblptr byte
   745  000B06  0E03               	movlw	high _SERVOSETS
   746  000B08  6EF7               	movwf	tblptrh,c
   747  000B0A                     	endif
   748  000B0A                     	if	0	;There are less than 3 active tblptr bytes
   749  000B0A                     	endif
   750  000B0A  0009               	tblrd		*+
   751  000B0C  50F5               	movf	tablat,w,c
   752  000B0E  5C30               	subwf	RotatePositions@i,w,c
   753  000B10  0009               	tblrd		*+
   754  000B12  50F5               	movf	tablat,w,c
   755  000B14  5831               	subwfb	RotatePositions@i+1,w,c
   756  000B16  B0D8               	btfsc	status,0,c
   757  000B18  0012               	return	
   758                           
   759                           ;main.c: 274: if (servosets[i].currentServoPosition < (4 - 1)) {
   760  000B1A  C030  F028         	movff	RotatePositions@i,___wmul@multiplier
   761  000B1E  C031  F029         	movff	RotatePositions@i+1,___wmul@multiplier+1
   762  000B22  0E00               	movlw	0
   763  000B24  6E2B               	movwf	___wmul@multiplicand+1,c
   764  000B26  0E15               	movlw	21
   765  000B28  6E2A               	movwf	___wmul@multiplicand,c
   766  000B2A  EC65  F007         	call	___wmul	;wreg free
   767  000B2E  0E60               	movlw	low _servosets
   768  000B30  2428               	addwf	?___wmul,w,c
   769  000B32  6ED9               	movwf	fsr2l,c
   770  000B34  0E00               	movlw	high _servosets
   771  000B36  2029               	addwfc	?___wmul+1,w,c
   772  000B38  6EDA               	movwf	fsr2h,c
   773  000B3A  0E01               	movlw	1
   774  000B3C  50DB               	movf	plusw2,w,c
   775  000B3E  E118               	bnz	l1375
   776  000B40  0E03               	movlw	3
   777  000B42  5CDE               	subwf	postinc2,w,c
   778  000B44  B0D8               	btfsc	status,0,c
   779  000B46  D014               	goto	l102
   780                           
   781                           ;main.c: 275: servosets[i].currentServoPosition += 1;
   782  000B48  C030  F028         	movff	RotatePositions@i,___wmul@multiplier
   783  000B4C  C031  F029         	movff	RotatePositions@i+1,___wmul@multiplier+1
   784  000B50  0E00               	movlw	0
   785  000B52  6E2B               	movwf	___wmul@multiplicand+1,c
   786  000B54  0E15               	movlw	21
   787  000B56  6E2A               	movwf	___wmul@multiplicand,c
   788  000B58  EC65  F007         	call	___wmul	;wreg free
   789  000B5C  0E60               	movlw	low _servosets
   790  000B5E  2428               	addwf	?___wmul,w,c
   791  000B60  6ED9               	movwf	fsr2l,c
   792  000B62  0E00               	movlw	high _servosets
   793  000B64  2029               	addwfc	?___wmul+1,w,c
   794  000B66  6EDA               	movwf	fsr2h,c
   795  000B68  2ADE               	incf	postinc2,f,c
   796  000B6A  0E00               	movlw	0
   797  000B6C  22DD               	addwfc	postdec2,f,c
   798                           
   799                           ;main.c: 276: } else {
   800  000B6E  D014               	goto	l103
   801  000B70                     l102:
   802  000B70                     l1375:
   803                           
   804                           ;main.c: 277: servosets[i].currentServoPosition = 0;
   805  000B70  C030  F028         	movff	RotatePositions@i,___wmul@multiplier
   806  000B74  C031  F029         	movff	RotatePositions@i+1,___wmul@multiplier+1
   807  000B78  0E00               	movlw	0
   808  000B7A  6E2B               	movwf	___wmul@multiplicand+1,c
   809  000B7C  0E15               	movlw	21
   810  000B7E  6E2A               	movwf	___wmul@multiplicand,c
   811  000B80  EC65  F007         	call	___wmul	;wreg free
   812  000B84  0E60               	movlw	low _servosets
   813  000B86  2428               	addwf	?___wmul,w,c
   814  000B88  6ED9               	movwf	fsr2l,c
   815  000B8A  0E00               	movlw	high _servosets
   816  000B8C  2029               	addwfc	?___wmul+1,w,c
   817  000B8E  6EDA               	movwf	fsr2h,c
   818  000B90  0E00               	movlw	0
   819  000B92  6EDE               	movwf	postinc2,c
   820  000B94  0E00               	movlw	0
   821  000B96  6EDD               	movwf	postdec2,c
   822  000B98                     l103:
   823  000B98  4A30               	infsnz	RotatePositions@i,f,c
   824  000B9A  2A31               	incf	RotatePositions@i+1,f,c
   825  000B9C  D7B2               	goto	l1367
   826  000B9E                     __end_of_RotatePositions:
   827                           	opt stack 0
   828                           tblptru	equ	0xFF8
   829                           tblptrh	equ	0xFF7
   830                           tblptrl	equ	0xFF6
   831                           tablat	equ	0xFF5
   832                           postinc0	equ	0xFEE
   833                           wreg	equ	0xFE8
   834                           postdec1	equ	0xFE5
   835                           fsr1h	equ	0xFE2
   836                           fsr1l	equ	0xFE1
   837                           postinc2	equ	0xFDE
   838                           postdec2	equ	0xFDD
   839                           plusw2	equ	0xFDB
   840                           fsr2h	equ	0xFDA
   841                           fsr2l	equ	0xFD9
   842                           status	equ	0xFD8
   843                           
   844 ;; *************** function _InitServos *****************
   845 ;; Defined at:
   846 ;;		line 241 in file "main.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;  tmp             5   13[BANK0 ] unsigned char [5]
   851 ;;  i               2   18[BANK0 ] unsigned int 
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   861 ;;      Params:         0       0       0       0
   862 ;;      Locals:         0       7       0       0
   863 ;;      Temps:          0       0       0       0
   864 ;;      Totals:         0       7       0       0
   865 ;;Total ram usage:        7 bytes
   866 ;; Hardware stack levels used:    1
   867 ;; Hardware stack levels required when called:    4
   868 ;; This function calls:
   869 ;;		_EmptyMovementString
   870 ;;		_UART_Write_String
   871 ;;		___wmul
   872 ;;		_sprintf
   873 ;;		_strcat
   874 ;; This function is called by:
   875 ;;		_main
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           	psect	text3
   880  0006EE                     __ptext3:
   881                           	opt stack 0
   882  0006EE                     _InitServos:
   883                           	opt stack 26
   884                           
   885                           ;main.c: 242: char tmp[5];
   886                           ;main.c: 243: unsigned int i = 0;
   887                           
   888                           ;incstack = 0
   889  0006EE  0E00               	movlw	0
   890  0006F0  0100               	movlb	0	; () banked
   891  0006F2  6FF1               	movwf	(InitServos@i+1)& (0+255),b
   892  0006F4  0E00               	movlw	0
   893  0006F6  6FF0               	movwf	InitServos@i& (0+255),b
   894                           
   895                           ;main.c: 244: for(i = 0; i < SERVOSETS; i++){
   896  0006F8  0E00               	movlw	0
   897  0006FA  6FF1               	movwf	(InitServos@i+1)& (0+255),b
   898  0006FC  0E00               	movlw	0
   899  0006FE  6FF0               	movwf	InitServos@i& (0+255),b
   900  000700                     l1255:
   901                           
   902                           ; BSR set to: 0
   903  000700  0E1B               	movlw	low _SERVOSETS
   904  000702  6EF6               	movwf	tblptrl,c
   905  000704                     	if	1	;There is more than 1 active tblptr byte
   906  000704  0E03               	movlw	high _SERVOSETS
   907  000706  6EF7               	movwf	tblptrh,c
   908  000708                     	endif
   909  000708                     	if	0	;There are less than 3 active tblptr bytes
   910  000708                     	endif
   911  000708  0009               	tblrd		*+
   912  00070A  50F5               	movf	tablat,w,c
   913  00070C  5DF0               	subwf	InitServos@i& (0+255),w,b
   914  00070E  0009               	tblrd		*+
   915  000710  50F5               	movf	tablat,w,c
   916  000712  59F1               	subwfb	(InitServos@i+1)& (0+255),w,b
   917  000714  B0D8               	btfsc	status,0,c
   918  000716  0012               	return	
   919                           
   920                           ; BSR set to: 0
   921                           ;main.c: 245: EmptyMovementString();
   922                           
   923                           ; BSR set to: 0
   924                           
   925                           ; BSR set to: 0
   926  000718  EC89  F007         	call	_EmptyMovementString	;wreg free
   927                           
   928                           ;main.c: 246: strcat(movementString, "#");
   929  00071C  0E00               	movlw	low _movementString
   930  00071E  6E2E               	movwf	strcat@to,c
   931  000720  0E01               	movlw	high _movementString
   932  000722  6E2F               	movwf	strcat@to+1,c
   933  000724  0E26               	movlw	low STR_1
   934  000726  6E30               	movwf	strcat@from,c
   935  000728  0E03               	movlw	high STR_1
   936  00072A  6E31               	movwf	strcat@from+1,c
   937  00072C  EC59  F006         	call	_strcat	;wreg free
   938                           
   939                           ;main.c: 247: strcat(movementString, servosets[i].horizontalServo);
   940  000730  0E00               	movlw	low _movementString
   941  000732  6E2E               	movwf	strcat@to,c
   942  000734  0E01               	movlw	high _movementString
   943  000736  6E2F               	movwf	strcat@to+1,c
   944  000738  C0F0  F028         	movff	InitServos@i,___wmul@multiplier
   945  00073C  C0F1  F029         	movff	InitServos@i+1,___wmul@multiplier+1
   946  000740  0E00               	movlw	0
   947  000742  6E2B               	movwf	___wmul@multiplicand+1,c
   948  000744  0E15               	movlw	21
   949  000746  6E2A               	movwf	___wmul@multiplicand,c
   950  000748  EC65  F007         	call	___wmul	;wreg free
   951  00074C  0E02               	movlw	2
   952  00074E  2628               	addwf	?___wmul,f,c
   953  000750  0E00               	movlw	0
   954  000752  2229               	addwfc	?___wmul+1,f,c
   955  000754  0E60               	movlw	low _servosets
   956  000756  2428               	addwf	?___wmul,w,c
   957  000758  6E30               	movwf	strcat@from,c
   958  00075A  0E00               	movlw	high _servosets
   959  00075C  2029               	addwfc	?___wmul+1,w,c
   960  00075E  6E31               	movwf	strcat@from+1,c
   961  000760  EC59  F006         	call	_strcat	;wreg free
   962                           
   963                           ;main.c: 248: strcat(movementString, "P");
   964  000764  0E00               	movlw	low _movementString
   965  000766  6E2E               	movwf	strcat@to,c
   966  000768  0E01               	movlw	high _movementString
   967  00076A  6E2F               	movwf	strcat@to+1,c
   968  00076C  0E28               	movlw	low STR_2
   969  00076E  6E30               	movwf	strcat@from,c
   970  000770  0E03               	movlw	high STR_2
   971  000772  6E31               	movwf	strcat@from+1,c
   972  000774  EC59  F006         	call	_strcat	;wreg free
   973                           
   974                           ;main.c: 249: sprintf(tmp, "%d", servosets[i].horizontalMediumPosition);
   975  000778  0EEB               	movlw	low InitServos@tmp
   976  00077A  0100               	movlb	0	; () banked
   977  00077C  6FDE               	movwf	sprintf@sp& (0+255),b
   978  00077E  0E00               	movlw	high InitServos@tmp
   979  000780  6FDF               	movwf	(sprintf@sp+1)& (0+255),b
   980  000782  0E23               	movlw	low STR_3
   981  000784  6FE0               	movwf	sprintf@f& (0+255),b
   982  000786  0E03               	movlw	high STR_3
   983  000788  6FE1               	movwf	(sprintf@f+1)& (0+255),b
   984  00078A  C0F0  F028         	movff	InitServos@i,___wmul@multiplier
   985  00078E  C0F1  F029         	movff	InitServos@i+1,___wmul@multiplier+1
   986  000792  0E00               	movlw	0
   987  000794  6E2B               	movwf	___wmul@multiplicand+1,c
   988  000796  0E15               	movlw	21
   989  000798  6E2A               	movwf	___wmul@multiplicand,c
   990  00079A  EC65  F007         	call	___wmul	;wreg free
   991  00079E  0E0B               	movlw	11
   992  0007A0  2628               	addwf	?___wmul,f,c
   993  0007A2  0E00               	movlw	0
   994  0007A4  2229               	addwfc	?___wmul+1,f,c
   995  0007A6  0E60               	movlw	low _servosets
   996  0007A8  2428               	addwf	?___wmul,w,c
   997  0007AA  6ED9               	movwf	fsr2l,c
   998  0007AC  0E00               	movlw	high _servosets
   999  0007AE  2029               	addwfc	?___wmul+1,w,c
  1000  0007B0  6EDA               	movwf	fsr2h,c
  1001  0007B2  CFDE F0E2          	movff	postinc2,?_sprintf+4
  1002  0007B6  CFDD F0E3          	movff	postdec2,?_sprintf+5
  1003  0007BA  ECD7  F004         	call	_sprintf	;wreg free
  1004                           
  1005                           ;main.c: 250: strcat(movementString, tmp);
  1006  0007BE  0E00               	movlw	low _movementString
  1007  0007C0  6E2E               	movwf	strcat@to,c
  1008  0007C2  0E01               	movlw	high _movementString
  1009  0007C4  6E2F               	movwf	strcat@to+1,c
  1010  0007C6  0EEB               	movlw	low InitServos@tmp
  1011  0007C8  6E30               	movwf	strcat@from,c
  1012  0007CA  0E00               	movlw	high InitServos@tmp
  1013  0007CC  6E31               	movwf	strcat@from+1,c
  1014  0007CE  EC59  F006         	call	_strcat	;wreg free
  1015                           
  1016                           ;main.c: 251: strcat(movementString, "\r");
  1017  0007D2  0E00               	movlw	low _movementString
  1018  0007D4  6E2E               	movwf	strcat@to,c
  1019  0007D6  0E01               	movlw	high _movementString
  1020  0007D8  6E2F               	movwf	strcat@to+1,c
  1021  0007DA  0E21               	movlw	low (STR_10+4)
  1022  0007DC  6E30               	movwf	strcat@from,c
  1023  0007DE  0E03               	movlw	high (STR_10+4)
  1024  0007E0  6E31               	movwf	strcat@from+1,c
  1025  0007E2  EC59  F006         	call	_strcat	;wreg free
  1026                           
  1027                           ;main.c: 252: UART_Write_String(movementString);
  1028  0007E6  0E00               	movlw	low _movementString
  1029  0007E8  6E2E               	movwf	UART_Write_String@str,c
  1030  0007EA  0E01               	movlw	high _movementString
  1031  0007EC  6E2F               	movwf	UART_Write_String@str+1,c
  1032  0007EE  EC85  F006         	call	_UART_Write_String	;wreg free
  1033                           
  1034                           ;main.c: 253: EmptyMovementString();
  1035  0007F2  EC89  F007         	call	_EmptyMovementString	;wreg free
  1036                           
  1037                           ;main.c: 254: strcat(movementString, "#");
  1038  0007F6  0E00               	movlw	low _movementString
  1039  0007F8  6E2E               	movwf	strcat@to,c
  1040  0007FA  0E01               	movlw	high _movementString
  1041  0007FC  6E2F               	movwf	strcat@to+1,c
  1042  0007FE  0E26               	movlw	low STR_1
  1043  000800  6E30               	movwf	strcat@from,c
  1044  000802  0E03               	movlw	high STR_1
  1045  000804  6E31               	movwf	strcat@from+1,c
  1046  000806  EC59  F006         	call	_strcat	;wreg free
  1047                           
  1048                           ;main.c: 255: strcat(movementString, servosets[i].upperVerticalServo);
  1049  00080A  0E00               	movlw	low _movementString
  1050  00080C  6E2E               	movwf	strcat@to,c
  1051  00080E  0E01               	movlw	high _movementString
  1052  000810  6E2F               	movwf	strcat@to+1,c
  1053  000812  C0F0  F028         	movff	InitServos@i,___wmul@multiplier
  1054  000816  C0F1  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  1055  00081A  0E00               	movlw	0
  1056  00081C  6E2B               	movwf	___wmul@multiplicand+1,c
  1057  00081E  0E15               	movlw	21
  1058  000820  6E2A               	movwf	___wmul@multiplicand,c
  1059  000822  EC65  F007         	call	___wmul	;wreg free
  1060  000826  0E05               	movlw	5
  1061  000828  2628               	addwf	?___wmul,f,c
  1062  00082A  0E00               	movlw	0
  1063  00082C  2229               	addwfc	?___wmul+1,f,c
  1064  00082E  0E60               	movlw	low _servosets
  1065  000830  2428               	addwf	?___wmul,w,c
  1066  000832  6E30               	movwf	strcat@from,c
  1067  000834  0E00               	movlw	high _servosets
  1068  000836  2029               	addwfc	?___wmul+1,w,c
  1069  000838  6E31               	movwf	strcat@from+1,c
  1070  00083A  EC59  F006         	call	_strcat	;wreg free
  1071                           
  1072                           ;main.c: 256: strcat(movementString, "P");
  1073  00083E  0E00               	movlw	low _movementString
  1074  000840  6E2E               	movwf	strcat@to,c
  1075  000842  0E01               	movlw	high _movementString
  1076  000844  6E2F               	movwf	strcat@to+1,c
  1077  000846  0E28               	movlw	low STR_2
  1078  000848  6E30               	movwf	strcat@from,c
  1079  00084A  0E03               	movlw	high STR_2
  1080  00084C  6E31               	movwf	strcat@from+1,c
  1081  00084E  EC59  F006         	call	_strcat	;wreg free
  1082                           
  1083                           ;main.c: 257: sprintf(tmp, "%d", servosets[i].verticalUpperMediumPosition);
  1084  000852  0EEB               	movlw	low InitServos@tmp
  1085  000854  0100               	movlb	0	; () banked
  1086  000856  6FDE               	movwf	sprintf@sp& (0+255),b
  1087  000858  0E00               	movlw	high InitServos@tmp
  1088  00085A  6FDF               	movwf	(sprintf@sp+1)& (0+255),b
  1089  00085C  0E23               	movlw	low STR_3
  1090  00085E  6FE0               	movwf	sprintf@f& (0+255),b
  1091  000860  0E03               	movlw	high STR_3
  1092  000862  6FE1               	movwf	(sprintf@f+1)& (0+255),b
  1093  000864  C0F0  F028         	movff	InitServos@i,___wmul@multiplier
  1094  000868  C0F1  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  1095  00086C  0E00               	movlw	0
  1096  00086E  6E2B               	movwf	___wmul@multiplicand+1,c
  1097  000870  0E15               	movlw	21
  1098  000872  6E2A               	movwf	___wmul@multiplicand,c
  1099  000874  EC65  F007         	call	___wmul	;wreg free
  1100  000878  0E0D               	movlw	13
  1101  00087A  2628               	addwf	?___wmul,f,c
  1102  00087C  0E00               	movlw	0
  1103  00087E  2229               	addwfc	?___wmul+1,f,c
  1104  000880  0E60               	movlw	low _servosets
  1105  000882  2428               	addwf	?___wmul,w,c
  1106  000884  6ED9               	movwf	fsr2l,c
  1107  000886  0E00               	movlw	high _servosets
  1108  000888  2029               	addwfc	?___wmul+1,w,c
  1109  00088A  6EDA               	movwf	fsr2h,c
  1110  00088C  CFDE F0E2          	movff	postinc2,?_sprintf+4
  1111  000890  CFDD F0E3          	movff	postdec2,?_sprintf+5
  1112  000894  ECD7  F004         	call	_sprintf	;wreg free
  1113                           
  1114                           ;main.c: 258: strcat(movementString, tmp);
  1115  000898  0E00               	movlw	low _movementString
  1116  00089A  6E2E               	movwf	strcat@to,c
  1117  00089C  0E01               	movlw	high _movementString
  1118  00089E  6E2F               	movwf	strcat@to+1,c
  1119  0008A0  0EEB               	movlw	low InitServos@tmp
  1120  0008A2  6E30               	movwf	strcat@from,c
  1121  0008A4  0E00               	movlw	high InitServos@tmp
  1122  0008A6  6E31               	movwf	strcat@from+1,c
  1123  0008A8  EC59  F006         	call	_strcat	;wreg free
  1124                           
  1125                           ;main.c: 259: strcat(movementString, "\r");
  1126  0008AC  0E00               	movlw	low _movementString
  1127  0008AE  6E2E               	movwf	strcat@to,c
  1128  0008B0  0E01               	movlw	high _movementString
  1129  0008B2  6E2F               	movwf	strcat@to+1,c
  1130  0008B4  0E21               	movlw	low (STR_10+4)
  1131  0008B6  6E30               	movwf	strcat@from,c
  1132  0008B8  0E03               	movlw	high (STR_10+4)
  1133  0008BA  6E31               	movwf	strcat@from+1,c
  1134  0008BC  EC59  F006         	call	_strcat	;wreg free
  1135                           
  1136                           ;main.c: 260: UART_Write_String(movementString);
  1137  0008C0  0E00               	movlw	low _movementString
  1138  0008C2  6E2E               	movwf	UART_Write_String@str,c
  1139  0008C4  0E01               	movlw	high _movementString
  1140  0008C6  6E2F               	movwf	UART_Write_String@str+1,c
  1141  0008C8  EC85  F006         	call	_UART_Write_String	;wreg free
  1142                           
  1143                           ;main.c: 261: EmptyMovementString();
  1144  0008CC  EC89  F007         	call	_EmptyMovementString	;wreg free
  1145                           
  1146                           ;main.c: 262: strcat(movementString, "#");
  1147  0008D0  0E00               	movlw	low _movementString
  1148  0008D2  6E2E               	movwf	strcat@to,c
  1149  0008D4  0E01               	movlw	high _movementString
  1150  0008D6  6E2F               	movwf	strcat@to+1,c
  1151  0008D8  0E26               	movlw	low STR_1
  1152  0008DA  6E30               	movwf	strcat@from,c
  1153  0008DC  0E03               	movlw	high STR_1
  1154  0008DE  6E31               	movwf	strcat@from+1,c
  1155  0008E0  EC59  F006         	call	_strcat	;wreg free
  1156                           
  1157                           ;main.c: 263: strcat(movementString, servosets[i].lowerVerticalServo);
  1158  0008E4  0E00               	movlw	low _movementString
  1159  0008E6  6E2E               	movwf	strcat@to,c
  1160  0008E8  0E01               	movlw	high _movementString
  1161  0008EA  6E2F               	movwf	strcat@to+1,c
  1162  0008EC  C0F0  F028         	movff	InitServos@i,___wmul@multiplier
  1163  0008F0  C0F1  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  1164  0008F4  0E00               	movlw	0
  1165  0008F6  6E2B               	movwf	___wmul@multiplicand+1,c
  1166  0008F8  0E15               	movlw	21
  1167  0008FA  6E2A               	movwf	___wmul@multiplicand,c
  1168  0008FC  EC65  F007         	call	___wmul	;wreg free
  1169  000900  0E08               	movlw	8
  1170  000902  2628               	addwf	?___wmul,f,c
  1171  000904  0E00               	movlw	0
  1172  000906  2229               	addwfc	?___wmul+1,f,c
  1173  000908  0E60               	movlw	low _servosets
  1174  00090A  2428               	addwf	?___wmul,w,c
  1175  00090C  6E30               	movwf	strcat@from,c
  1176  00090E  0E00               	movlw	high _servosets
  1177  000910  2029               	addwfc	?___wmul+1,w,c
  1178  000912  6E31               	movwf	strcat@from+1,c
  1179  000914  EC59  F006         	call	_strcat	;wreg free
  1180                           
  1181                           ;main.c: 264: strcat(movementString, "P");
  1182  000918  0E00               	movlw	low _movementString
  1183  00091A  6E2E               	movwf	strcat@to,c
  1184  00091C  0E01               	movlw	high _movementString
  1185  00091E  6E2F               	movwf	strcat@to+1,c
  1186  000920  0E28               	movlw	low STR_2
  1187  000922  6E30               	movwf	strcat@from,c
  1188  000924  0E03               	movlw	high STR_2
  1189  000926  6E31               	movwf	strcat@from+1,c
  1190  000928  EC59  F006         	call	_strcat	;wreg free
  1191                           
  1192                           ;main.c: 265: sprintf(tmp, "%d", servosets[i].verticalLowerMediumPosition);
  1193  00092C  0EEB               	movlw	low InitServos@tmp
  1194  00092E  0100               	movlb	0	; () banked
  1195  000930  6FDE               	movwf	sprintf@sp& (0+255),b
  1196  000932  0E00               	movlw	high InitServos@tmp
  1197  000934  6FDF               	movwf	(sprintf@sp+1)& (0+255),b
  1198  000936  0E23               	movlw	low STR_3
  1199  000938  6FE0               	movwf	sprintf@f& (0+255),b
  1200  00093A  0E03               	movlw	high STR_3
  1201  00093C  6FE1               	movwf	(sprintf@f+1)& (0+255),b
  1202  00093E  C0F0  F028         	movff	InitServos@i,___wmul@multiplier
  1203  000942  C0F1  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  1204  000946  0E00               	movlw	0
  1205  000948  6E2B               	movwf	___wmul@multiplicand+1,c
  1206  00094A  0E15               	movlw	21
  1207  00094C  6E2A               	movwf	___wmul@multiplicand,c
  1208  00094E  EC65  F007         	call	___wmul	;wreg free
  1209  000952  0E0F               	movlw	15
  1210  000954  2628               	addwf	?___wmul,f,c
  1211  000956  0E00               	movlw	0
  1212  000958  2229               	addwfc	?___wmul+1,f,c
  1213  00095A  0E60               	movlw	low _servosets
  1214  00095C  2428               	addwf	?___wmul,w,c
  1215  00095E  6ED9               	movwf	fsr2l,c
  1216  000960  0E00               	movlw	high _servosets
  1217  000962  2029               	addwfc	?___wmul+1,w,c
  1218  000964  6EDA               	movwf	fsr2h,c
  1219  000966  CFDE F0E2          	movff	postinc2,?_sprintf+4
  1220  00096A  CFDD F0E3          	movff	postdec2,?_sprintf+5
  1221  00096E  ECD7  F004         	call	_sprintf	;wreg free
  1222                           
  1223                           ;main.c: 266: strcat(movementString, tmp);
  1224  000972  0E00               	movlw	low _movementString
  1225  000974  6E2E               	movwf	strcat@to,c
  1226  000976  0E01               	movlw	high _movementString
  1227  000978  6E2F               	movwf	strcat@to+1,c
  1228  00097A  0EEB               	movlw	low InitServos@tmp
  1229  00097C  6E30               	movwf	strcat@from,c
  1230  00097E  0E00               	movlw	high InitServos@tmp
  1231  000980  6E31               	movwf	strcat@from+1,c
  1232  000982  EC59  F006         	call	_strcat	;wreg free
  1233                           
  1234                           ;main.c: 267: strcat(movementString, "\r");
  1235  000986  0E00               	movlw	low _movementString
  1236  000988  6E2E               	movwf	strcat@to,c
  1237  00098A  0E01               	movlw	high _movementString
  1238  00098C  6E2F               	movwf	strcat@to+1,c
  1239  00098E  0E21               	movlw	low (STR_10+4)
  1240  000990  6E30               	movwf	strcat@from,c
  1241  000992  0E03               	movlw	high (STR_10+4)
  1242  000994  6E31               	movwf	strcat@from+1,c
  1243  000996  EC59  F006         	call	_strcat	;wreg free
  1244                           
  1245                           ;main.c: 268: UART_Write_String(movementString);
  1246  00099A  0E00               	movlw	low _movementString
  1247  00099C  6E2E               	movwf	UART_Write_String@str,c
  1248  00099E  0E01               	movlw	high _movementString
  1249  0009A0  6E2F               	movwf	UART_Write_String@str+1,c
  1250  0009A2  EC85  F006         	call	_UART_Write_String	;wreg free
  1251  0009A6  0100               	movlb	0	; () banked
  1252  0009A8  4BF0               	infsnz	InitServos@i& (0+255),f,b
  1253  0009AA  2BF1               	incf	(InitServos@i+1)& (0+255),f,b
  1254  0009AC  D6A9               	goto	l1255
  1255  0009AE                     __end_of_InitServos:
  1256                           	opt stack 0
  1257                           tblptru	equ	0xFF8
  1258                           tblptrh	equ	0xFF7
  1259                           tblptrl	equ	0xFF6
  1260                           tablat	equ	0xFF5
  1261                           postinc0	equ	0xFEE
  1262                           wreg	equ	0xFE8
  1263                           postdec1	equ	0xFE5
  1264                           fsr1h	equ	0xFE2
  1265                           fsr1l	equ	0xFE1
  1266                           postinc2	equ	0xFDE
  1267                           postdec2	equ	0xFDD
  1268                           plusw2	equ	0xFDB
  1269                           fsr2h	equ	0xFDA
  1270                           fsr2l	equ	0xFD9
  1271                           status	equ	0xFD8
  1272                           
  1273 ;; *************** function _UART_Write_String *****************
  1274 ;; Defined at:
  1275 ;;		line 189 in file "main.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  str             2   45[COMRAM] PTR const unsigned char 
  1278 ;;		 -> movementString(256), 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  a               1   52[COMRAM] unsigned char 
  1281 ;;  i               2   50[COMRAM] int 
  1282 ;;  arrayLength     2   48[COMRAM] int 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1292 ;;      Params:         2       0       0       0
  1293 ;;      Locals:         5       0       0       0
  1294 ;;      Temps:          1       0       0       0
  1295 ;;      Totals:         8       0       0       0
  1296 ;;Total ram usage:        8 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    3
  1299 ;; This function calls:
  1300 ;;		_UART_Write
  1301 ;;		_strlen
  1302 ;; This function is called by:
  1303 ;;		_main
  1304 ;;		_InitServos
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text4
  1309  000D0A                     __ptext4:
  1310                           	opt stack 0
  1311  000D0A                     _UART_Write_String:
  1312                           	opt stack 27
  1313                           
  1314                           ;main.c: 190: int arrayLength = strlen(str);
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;incstack = 0
  1318  000D0A  C02E  F028         	movff	UART_Write_String@str,strlen@s
  1319  000D0E  C02F  F029         	movff	UART_Write_String@str+1,strlen@s+1
  1320  000D12  EC1B  F007         	call	_strlen	;wreg free
  1321  000D16  C028  F031         	movff	?_strlen,UART_Write_String@arrayLength
  1322  000D1A  C029  F032         	movff	?_strlen+1,UART_Write_String@arrayLength+1
  1323                           
  1324                           ;main.c: 191: for (int i = 0; i<arrayLength; i++) {
  1325  000D1E  0E00               	movlw	0
  1326  000D20  6E34               	movwf	UART_Write_String@i+1,c
  1327  000D22  0E00               	movlw	0
  1328  000D24  6E33               	movwf	UART_Write_String@i,c
  1329  000D26  D011               	goto	l74
  1330  000D28                     
  1331                           ;main.c: 192: char a = str[i];
  1332  000D28  5033               	movf	UART_Write_String@i,w,c
  1333  000D2A  242E               	addwf	UART_Write_String@str,w,c
  1334  000D2C  6ED9               	movwf	fsr2l,c
  1335  000D2E  5034               	movf	UART_Write_String@i+1,w,c
  1336  000D30  202F               	addwfc	UART_Write_String@str+1,w,c
  1337  000D32  6EDA               	movwf	fsr2h,c
  1338  000D34  50DF               	movf	indf2,w,c
  1339  000D36  6E35               	movwf	UART_Write_String@a,c
  1340                           
  1341                           ;main.c: 193: UART_Write(a);
  1342  000D38  5035               	movf	UART_Write_String@a,w,c
  1343  000D3A  ECA5  F007         	call	_UART_Write
  1344                           
  1345                           ;main.c: 194: if (a == '\r') {
  1346  000D3E  0E0D               	movlw	13
  1347  000D40  1835               	xorwf	UART_Write_String@a,w,c
  1348  000D42  B4D8               	btfsc	status,2,c
  1349  000D44  0012               	return	
  1350                           
  1351                           ;main.c: 195: return;
  1352  000D46  4A33               	infsnz	UART_Write_String@i,f,c
  1353  000D48  2A34               	incf	UART_Write_String@i+1,f,c
  1354  000D4A                     l74:
  1355  000D4A  5031               	movf	UART_Write_String@arrayLength,w,c
  1356  000D4C  5C33               	subwf	UART_Write_String@i,w,c
  1357  000D4E  5034               	movf	UART_Write_String@i+1,w,c
  1358  000D50  0A80               	xorlw	128
  1359  000D52  6E30               	movwf	??_UART_Write_String& (0+255),c
  1360  000D54  5032               	movf	UART_Write_String@arrayLength+1,w,c
  1361  000D56  0A80               	xorlw	128
  1362  000D58  5830               	subwfb	??_UART_Write_String& (0+255),w,c
  1363  000D5A  B0D8               	btfsc	status,0,c
  1364  000D5C  0012               	return	
  1365  000D5E  D7E4               	goto	l75
  1366  000D60                     __end_of_UART_Write_String:
  1367                           	opt stack 0
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postdec1	equ	0xFE5
  1375                           fsr1h	equ	0xFE2
  1376                           fsr1l	equ	0xFE1
  1377                           indf2	equ	0xFDF
  1378                           postinc2	equ	0xFDE
  1379                           postdec2	equ	0xFDD
  1380                           plusw2	equ	0xFDB
  1381                           fsr2h	equ	0xFDA
  1382                           fsr2l	equ	0xFD9
  1383                           status	equ	0xFD8
  1384                           
  1385 ;; *************** function _strlen *****************
  1386 ;; Defined at:
  1387 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strlen.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;  s               2   39[COMRAM] PTR const unsigned char 
  1390 ;;		 -> movementString(256), 
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  cp              2   43[COMRAM] PTR const unsigned char 
  1393 ;;		 -> movementString(256), 
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  2   39[COMRAM] unsigned int 
  1396 ;; Registers used:
  1397 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1403 ;;      Params:         2       0       0       0
  1404 ;;      Locals:         2       0       0       0
  1405 ;;      Temps:          2       0       0       0
  1406 ;;      Totals:         6       0       0       0
  1407 ;;Total ram usage:        6 bytes
  1408 ;; Hardware stack levels used:    1
  1409 ;; Hardware stack levels required when called:    2
  1410 ;; This function calls:
  1411 ;;		Nothing
  1412 ;; This function is called by:
  1413 ;;		_UART_Write_String
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text5
  1418  000E36                     __ptext5:
  1419                           	opt stack 0
  1420  000E36                     _strlen:
  1421                           	opt stack 27
  1422                           
  1423                           ;incstack = 0
  1424  000E36  C028  F02C         	movff	strlen@s,strlen@cp
  1425  000E3A  C029  F02D         	movff	strlen@s+1,strlen@cp+1
  1426  000E3E  D002               	goto	l705
  1427  000E40  4A2C               	infsnz	strlen@cp,f,c
  1428  000E42  2A2D               	incf	strlen@cp+1,f,c
  1429  000E44                     l705:
  1430  000E44  C02C  FFD9         	movff	strlen@cp,fsr2l
  1431  000E48  C02D  FFDA         	movff	strlen@cp+1,fsr2h
  1432  000E4C  50DF               	movf	indf2,w,c
  1433  000E4E  A4D8               	btfss	status,2,c
  1434  000E50  D7F7               	goto	l706
  1435  000E52  C028  F02A         	movff	strlen@s,??_strlen
  1436  000E56  C029  F02B         	movff	strlen@s+1,??_strlen+1
  1437  000E5A  1E2A               	comf	??_strlen,f,c
  1438  000E5C  1E2B               	comf	??_strlen+1,f,c
  1439  000E5E  4A2A               	infsnz	??_strlen,f,c
  1440  000E60  2A2B               	incf	??_strlen+1,f,c
  1441  000E62  502C               	movf	strlen@cp,w,c
  1442  000E64  242A               	addwf	??_strlen,w,c
  1443  000E66  6E28               	movwf	?_strlen,c
  1444  000E68  502D               	movf	strlen@cp+1,w,c
  1445  000E6A  202B               	addwfc	??_strlen+1,w,c
  1446  000E6C  6E29               	movwf	?_strlen+1,c
  1447  000E6E  0012               	return	
  1448  000E70                     __end_of_strlen:
  1449                           	opt stack 0
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           postinc0	equ	0xFEE
  1455                           wreg	equ	0xFE8
  1456                           postdec1	equ	0xFE5
  1457                           fsr1h	equ	0xFE2
  1458                           fsr1l	equ	0xFE1
  1459                           indf2	equ	0xFDF
  1460                           postinc2	equ	0xFDE
  1461                           postdec2	equ	0xFDD
  1462                           plusw2	equ	0xFDB
  1463                           fsr2h	equ	0xFDA
  1464                           fsr2l	equ	0xFD9
  1465                           status	equ	0xFD8
  1466                           
  1467 ;; *************** function _UART_Write *****************
  1468 ;; Defined at:
  1469 ;;		line 200 in file "main.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;  data            1    wreg     unsigned char 
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;  data            1   39[COMRAM] unsigned char 
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1483 ;;      Params:         0       0       0       0
  1484 ;;      Locals:         1       0       0       0
  1485 ;;      Temps:          0       0       0       0
  1486 ;;      Totals:         1       0       0       0
  1487 ;;Total ram usage:        1 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    2
  1490 ;; This function calls:
  1491 ;;		Nothing
  1492 ;; This function is called by:
  1493 ;;		_UART_Write_String
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           	psect	text6
  1498  000F4A                     __ptext6:
  1499                           	opt stack 0
  1500  000F4A                     _UART_Write:
  1501                           	opt stack 27
  1502                           
  1503                           ;incstack = 0
  1504                           ;UART_Write@data stored from wreg
  1505  000F4A  6E28               	movwf	UART_Write@data,c
  1506  000F4C                     
  1507                           ;main.c: 201: while(!TRMT);
  1508  000F4C  A2AC               	btfss	4012,1,c	;volatile
  1509  000F4E  D7FE               	goto	l1109
  1510                           
  1511                           ;main.c: 202: TXREG = data;
  1512  000F50  C028  FFAD         	movff	UART_Write@data,4013	;volatile
  1513  000F54  0012               	return		;funcret
  1514  000F56                     __end_of_UART_Write:
  1515                           	opt stack 0
  1516                           tblptru	equ	0xFF8
  1517                           tblptrh	equ	0xFF7
  1518                           tblptrl	equ	0xFF6
  1519                           tablat	equ	0xFF5
  1520                           postinc0	equ	0xFEE
  1521                           wreg	equ	0xFE8
  1522                           postdec1	equ	0xFE5
  1523                           fsr1h	equ	0xFE2
  1524                           fsr1l	equ	0xFE1
  1525                           indf2	equ	0xFDF
  1526                           postinc2	equ	0xFDE
  1527                           postdec2	equ	0xFDD
  1528                           plusw2	equ	0xFDB
  1529                           fsr2h	equ	0xFDA
  1530                           fsr2l	equ	0xFD9
  1531                           status	equ	0xFD8
  1532                           
  1533 ;; *************** function _FillServoPositionString *****************
  1534 ;; Defined at:
  1535 ;;		line 208 in file "main.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  newVerticalP    2   19[BANK0 ] int 
  1540 ;;  deltaVertica    2   17[BANK0 ] int 
  1541 ;;  newHorizonta    2   15[BANK0 ] int 
  1542 ;;  deltaHorizon    2   13[BANK0 ] int 
  1543 ;;  tmp             5   21[BANK0 ] unsigned char [5]
  1544 ;;  i               2   30[BANK0 ] unsigned int 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1554 ;;      Params:         0       0       0       0
  1555 ;;      Locals:         0      19       0       0
  1556 ;;      Temps:          2       0       0       0
  1557 ;;      Totals:         2      19       0       0
  1558 ;;Total ram usage:       21 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    4
  1561 ;; This function calls:
  1562 ;;		_EmptyMovementString
  1563 ;;		___wmul
  1564 ;;		_sprintf
  1565 ;;		_strcat
  1566 ;; This function is called by:
  1567 ;;		_main
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text7
  1572  00032C                     __ptext7:
  1573                           	opt stack 0
  1574  00032C                     _FillServoPositionString:
  1575                           	opt stack 26
  1576                           
  1577                           ;main.c: 209: EmptyMovementString();
  1578                           
  1579                           ;incstack = 0
  1580  00032C  EC89  F007         	call	_EmptyMovementString	;wreg free
  1581                           
  1582                           ;main.c: 210: char tmp[5];
  1583                           ;main.c: 211: unsigned int i = 0;
  1584  000330  0E00               	movlw	0
  1585  000332  0100               	movlb	0	; () banked
  1586  000334  6FFD               	movwf	(FillServoPositionString@i+1)& (0+255),b
  1587  000336  0E00               	movlw	0
  1588  000338  6FFC               	movwf	FillServoPositionString@i& (0+255),b
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;main.c: 212: for(i = 0; i < SERVOSETS; i++){
  1592  00033A  0E00               	movlw	0
  1593  00033C  6FFD               	movwf	(FillServoPositionString@i+1)& (0+255),b
  1594  00033E  0E00               	movlw	0
  1595  000340  6FFC               	movwf	FillServoPositionString@i& (0+255),b
  1596  000342                     l1313:
  1597                           
  1598                           ; BSR set to: 0
  1599  000342  0E1B               	movlw	low _SERVOSETS
  1600  000344  6EF6               	movwf	tblptrl,c
  1601  000346                     	if	1	;There is more than 1 active tblptr byte
  1602  000346  0E03               	movlw	high _SERVOSETS
  1603  000348  6EF7               	movwf	tblptrh,c
  1604  00034A                     	endif
  1605  00034A                     	if	0	;There are less than 3 active tblptr bytes
  1606  00034A                     	endif
  1607  00034A  0009               	tblrd		*+
  1608  00034C  50F5               	movf	tablat,w,c
  1609  00034E  5DFC               	subwf	FillServoPositionString@i& (0+255),w,b
  1610  000350  0009               	tblrd		*+
  1611  000352  50F5               	movf	tablat,w,c
  1612  000354  59FD               	subwfb	(FillServoPositionString@i+1)& (0+255),w,b
  1613  000356  B0D8               	btfsc	status,0,c
  1614  000358  D1BF               	goto	u550
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;main.c: 213: strcat(movementString, "#");
  1618                           
  1619                           ; BSR set to: 0
  1620                           
  1621                           ; BSR set to: 0
  1622  00035A  0E00               	movlw	low _movementString
  1623  00035C  6E2E               	movwf	strcat@to,c
  1624  00035E  0E01               	movlw	high _movementString
  1625  000360  6E2F               	movwf	strcat@to+1,c
  1626  000362  0E26               	movlw	low STR_1
  1627  000364  6E30               	movwf	strcat@from,c
  1628  000366  0E03               	movlw	high STR_1
  1629  000368  6E31               	movwf	strcat@from+1,c
  1630  00036A  EC59  F006         	call	_strcat	;wreg free
  1631                           
  1632                           ;main.c: 214: strcat(movementString, servosets[i].horizontalServo);
  1633  00036E  0E00               	movlw	low _movementString
  1634  000370  6E2E               	movwf	strcat@to,c
  1635  000372  0E01               	movlw	high _movementString
  1636  000374  6E2F               	movwf	strcat@to+1,c
  1637  000376  C0FC  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1638  00037A  C0FD  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1639  00037E  0E00               	movlw	0
  1640  000380  6E2B               	movwf	___wmul@multiplicand+1,c
  1641  000382  0E15               	movlw	21
  1642  000384  6E2A               	movwf	___wmul@multiplicand,c
  1643  000386  EC65  F007         	call	___wmul	;wreg free
  1644  00038A  0E02               	movlw	2
  1645  00038C  2628               	addwf	?___wmul,f,c
  1646  00038E  0E00               	movlw	0
  1647  000390  2229               	addwfc	?___wmul+1,f,c
  1648  000392  0E60               	movlw	low _servosets
  1649  000394  2428               	addwf	?___wmul,w,c
  1650  000396  6E30               	movwf	strcat@from,c
  1651  000398  0E00               	movlw	high _servosets
  1652  00039A  2029               	addwfc	?___wmul+1,w,c
  1653  00039C  6E31               	movwf	strcat@from+1,c
  1654  00039E  EC59  F006         	call	_strcat	;wreg free
  1655                           
  1656                           ;main.c: 215: strcat(movementString, "P");
  1657  0003A2  0E00               	movlw	low _movementString
  1658  0003A4  6E2E               	movwf	strcat@to,c
  1659  0003A6  0E01               	movlw	high _movementString
  1660  0003A8  6E2F               	movwf	strcat@to+1,c
  1661  0003AA  0E28               	movlw	low STR_2
  1662  0003AC  6E30               	movwf	strcat@from,c
  1663  0003AE  0E03               	movlw	high STR_2
  1664  0003B0  6E31               	movwf	strcat@from+1,c
  1665  0003B2  EC59  F006         	call	_strcat	;wreg free
  1666                           
  1667                           ;main.c: 216: int deltaHorizontal = positions.horizontalMovement[servosets[i].currentSer
      +                          voPosition] * servosets[i].multiplierHorizontal;
  1668  0003B6  C0FC  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1669  0003BA  C0FD  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1670  0003BE  0E00               	movlw	0
  1671  0003C0  6E2B               	movwf	___wmul@multiplicand+1,c
  1672  0003C2  0E15               	movlw	21
  1673  0003C4  6E2A               	movwf	___wmul@multiplicand,c
  1674  0003C6  EC65  F007         	call	___wmul	;wreg free
  1675  0003CA  0E11               	movlw	17
  1676  0003CC  2628               	addwf	?___wmul,f,c
  1677  0003CE  0E00               	movlw	0
  1678  0003D0  2229               	addwfc	?___wmul+1,f,c
  1679  0003D2  0E60               	movlw	low _servosets
  1680  0003D4  2428               	addwf	?___wmul,w,c
  1681  0003D6  6ED9               	movwf	fsr2l,c
  1682  0003D8  0E00               	movlw	high _servosets
  1683  0003DA  2029               	addwfc	?___wmul+1,w,c
  1684  0003DC  6EDA               	movwf	fsr2h,c
  1685  0003DE  CFDE F0F8          	movff	postinc2,_FillServoPositionString$1046
  1686  0003E2  CFDD F0F9          	movff	postdec2,_FillServoPositionString$1046+1
  1687                           
  1688                           ;main.c: 216: int deltaHorizontal = positions.horizontalMovement[servosets[i].currentSer
      +                          voPosition] * servosets[i].multiplierHorizontal;
  1689  0003E6  C0FC  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1690  0003EA  C0FD  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1691  0003EE  0E00               	movlw	0
  1692  0003F0  6E2B               	movwf	___wmul@multiplicand+1,c
  1693  0003F2  0E15               	movlw	21
  1694  0003F4  6E2A               	movwf	___wmul@multiplicand,c
  1695  0003F6  EC65  F007         	call	___wmul	;wreg free
  1696  0003FA  0E60               	movlw	low _servosets
  1697  0003FC  2428               	addwf	?___wmul,w,c
  1698  0003FE  6ED9               	movwf	fsr2l,c
  1699  000400  0E00               	movlw	high _servosets
  1700  000402  2029               	addwfc	?___wmul+1,w,c
  1701  000404  6EDA               	movwf	fsr2h,c
  1702  000406  CFDE F035          	movff	postinc2,??_FillServoPositionString
  1703  00040A  CFDD F036          	movff	postdec2,??_FillServoPositionString+1
  1704  00040E  90D8               	bcf	status,0,c
  1705  000410  3635               	rlcf	??_FillServoPositionString,f,c
  1706  000412  3636               	rlcf	??_FillServoPositionString+1,f,c
  1707  000414  0E08               	movlw	8
  1708  000416  2635               	addwf	??_FillServoPositionString,f,c
  1709  000418  0E00               	movlw	0
  1710  00041A  2236               	addwfc	??_FillServoPositionString+1,f,c
  1711  00041C  0E01               	movlw	low _positions
  1712  00041E  2435               	addwf	??_FillServoPositionString,w,c
  1713  000420  6EF6               	movwf	tblptrl,c
  1714  000422  0E03               	movlw	high _positions
  1715  000424  2036               	addwfc	??_FillServoPositionString+1,w,c
  1716  000426  6EF7               	movwf	tblptrh,c
  1717  000428                     	if	0	;There are less than 3 active tblptr bytes
  1718  000428                     	endif
  1719  000428  0009               	tblrd		*+
  1720  00042A  CFF5 F0FA          	movff	tablat,_FillServoPositionString$1047
  1721  00042E  000A               	tblrd		*-
  1722  000430  CFF5 F0FB          	movff	tablat,_FillServoPositionString$1047+1
  1723                           
  1724                           ;main.c: 216: int deltaHorizontal = positions.horizontalMovement[servosets[i].currentSer
      +                          voPosition] * servosets[i].multiplierHorizontal;
  1725  000434  C0F8  F028         	movff	_FillServoPositionString$1046,___wmul@multiplier
  1726  000438  C0F9  F029         	movff	_FillServoPositionString$1046+1,___wmul@multiplier+1
  1727  00043C  C0FA  F02A         	movff	_FillServoPositionString$1047,___wmul@multiplicand
  1728  000440  C0FB  F02B         	movff	_FillServoPositionString$1047+1,___wmul@multiplicand+1
  1729  000444  EC65  F007         	call	___wmul	;wreg free
  1730  000448  C028  F0EB         	movff	?___wmul,FillServoPositionString@deltaHorizontal
  1731  00044C  C029  F0EC         	movff	?___wmul+1,FillServoPositionString@deltaHorizontal+1
  1732                           
  1733                           ;main.c: 217: int newHorizontalPosition = servosets[i].horizontalMediumPosition + deltaH
      +                          orizontal;
  1734  000450  C0FC  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1735  000454  C0FD  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1736  000458  0E00               	movlw	0
  1737  00045A  6E2B               	movwf	___wmul@multiplicand+1,c
  1738  00045C  0E15               	movlw	21
  1739  00045E  6E2A               	movwf	___wmul@multiplicand,c
  1740  000460  EC65  F007         	call	___wmul	;wreg free
  1741  000464  0E0B               	movlw	11
  1742  000466  2628               	addwf	?___wmul,f,c
  1743  000468  0E00               	movlw	0
  1744  00046A  2229               	addwfc	?___wmul+1,f,c
  1745  00046C  0E60               	movlw	low _servosets
  1746  00046E  2428               	addwf	?___wmul,w,c
  1747  000470  6ED9               	movwf	fsr2l,c
  1748  000472  0E00               	movlw	high _servosets
  1749  000474  2029               	addwfc	?___wmul+1,w,c
  1750  000476  6EDA               	movwf	fsr2h,c
  1751  000478  CFDE F035          	movff	postinc2,??_FillServoPositionString
  1752  00047C  CFDD F036          	movff	postdec2,??_FillServoPositionString+1
  1753  000480  0100               	movlb	0	; () banked
  1754  000482  51EB               	movf	FillServoPositionString@deltaHorizontal& (0+255),w,b
  1755  000484  2435               	addwf	??_FillServoPositionString,w,c
  1756  000486  6FED               	movwf	FillServoPositionString@newHorizontalPosition& (0+255),b
  1757  000488  51EC               	movf	(FillServoPositionString@deltaHorizontal+1)& (0+255),w,b
  1758  00048A  2036               	addwfc	??_FillServoPositionString+1,w,c
  1759  00048C  6FEE               	movwf	(FillServoPositionString@newHorizontalPosition+1)& (0+255),b
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;main.c: 218: sprintf(tmp, "%d", newHorizontalPosition);
  1763  00048E  0EF3               	movlw	low FillServoPositionString@tmp
  1764  000490  6FDE               	movwf	sprintf@sp& (0+255),b
  1765  000492  0E00               	movlw	high FillServoPositionString@tmp
  1766  000494  6FDF               	movwf	(sprintf@sp+1)& (0+255),b
  1767  000496  0E23               	movlw	low STR_3
  1768  000498  6FE0               	movwf	sprintf@f& (0+255),b
  1769  00049A  0E03               	movlw	high STR_3
  1770  00049C  6FE1               	movwf	(sprintf@f+1)& (0+255),b
  1771  00049E  C0ED  F0E2         	movff	FillServoPositionString@newHorizontalPosition,?_sprintf+4
  1772  0004A2  C0EE  F0E3         	movff	FillServoPositionString@newHorizontalPosition+1,?_sprintf+5
  1773  0004A6  ECD7  F004         	call	_sprintf	;wreg free
  1774                           
  1775                           ;main.c: 219: strcat(movementString, tmp);
  1776  0004AA  0E00               	movlw	low _movementString
  1777  0004AC  6E2E               	movwf	strcat@to,c
  1778  0004AE  0E01               	movlw	high _movementString
  1779  0004B0  6E2F               	movwf	strcat@to+1,c
  1780  0004B2  0EF3               	movlw	low FillServoPositionString@tmp
  1781  0004B4  6E30               	movwf	strcat@from,c
  1782  0004B6  0E00               	movlw	high FillServoPositionString@tmp
  1783  0004B8  6E31               	movwf	strcat@from+1,c
  1784  0004BA  EC59  F006         	call	_strcat	;wreg free
  1785                           
  1786                           ;main.c: 220: strcat(movementString, "#");
  1787  0004BE  0E00               	movlw	low _movementString
  1788  0004C0  6E2E               	movwf	strcat@to,c
  1789  0004C2  0E01               	movlw	high _movementString
  1790  0004C4  6E2F               	movwf	strcat@to+1,c
  1791  0004C6  0E26               	movlw	low STR_1
  1792  0004C8  6E30               	movwf	strcat@from,c
  1793  0004CA  0E03               	movlw	high STR_1
  1794  0004CC  6E31               	movwf	strcat@from+1,c
  1795  0004CE  EC59  F006         	call	_strcat	;wreg free
  1796                           
  1797                           ;main.c: 221: strcat(movementString, servosets[i].upperVerticalServo);
  1798  0004D2  0E00               	movlw	low _movementString
  1799  0004D4  6E2E               	movwf	strcat@to,c
  1800  0004D6  0E01               	movlw	high _movementString
  1801  0004D8  6E2F               	movwf	strcat@to+1,c
  1802  0004DA  C0FC  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1803  0004DE  C0FD  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1804  0004E2  0E00               	movlw	0
  1805  0004E4  6E2B               	movwf	___wmul@multiplicand+1,c
  1806  0004E6  0E15               	movlw	21
  1807  0004E8  6E2A               	movwf	___wmul@multiplicand,c
  1808  0004EA  EC65  F007         	call	___wmul	;wreg free
  1809  0004EE  0E05               	movlw	5
  1810  0004F0  2628               	addwf	?___wmul,f,c
  1811  0004F2  0E00               	movlw	0
  1812  0004F4  2229               	addwfc	?___wmul+1,f,c
  1813  0004F6  0E60               	movlw	low _servosets
  1814  0004F8  2428               	addwf	?___wmul,w,c
  1815  0004FA  6E30               	movwf	strcat@from,c
  1816  0004FC  0E00               	movlw	high _servosets
  1817  0004FE  2029               	addwfc	?___wmul+1,w,c
  1818  000500  6E31               	movwf	strcat@from+1,c
  1819  000502  EC59  F006         	call	_strcat	;wreg free
  1820                           
  1821                           ;main.c: 222: strcat(movementString, "P");
  1822  000506  0E00               	movlw	low _movementString
  1823  000508  6E2E               	movwf	strcat@to,c
  1824  00050A  0E01               	movlw	high _movementString
  1825  00050C  6E2F               	movwf	strcat@to+1,c
  1826  00050E  0E28               	movlw	low STR_2
  1827  000510  6E30               	movwf	strcat@from,c
  1828  000512  0E03               	movlw	high STR_2
  1829  000514  6E31               	movwf	strcat@from+1,c
  1830  000516  EC59  F006         	call	_strcat	;wreg free
  1831                           
  1832                           ;main.c: 223: int deltaVertical = positions.verticalMovement[servosets[i].currentServoPo
      +                          sition] * servosets[i].multiplierVertical;
  1833  00051A  C0FC  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1834  00051E  C0FD  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1835  000522  0E00               	movlw	0
  1836  000524  6E2B               	movwf	___wmul@multiplicand+1,c
  1837  000526  0E15               	movlw	21
  1838  000528  6E2A               	movwf	___wmul@multiplicand,c
  1839  00052A  EC65  F007         	call	___wmul	;wreg free
  1840  00052E  0E13               	movlw	19
  1841  000530  2628               	addwf	?___wmul,f,c
  1842  000532  0E00               	movlw	0
  1843  000534  2229               	addwfc	?___wmul+1,f,c
  1844  000536  0E60               	movlw	low _servosets
  1845  000538  2428               	addwf	?___wmul,w,c
  1846  00053A  6ED9               	movwf	fsr2l,c
  1847  00053C  0E00               	movlw	high _servosets
  1848  00053E  2029               	addwfc	?___wmul+1,w,c
  1849  000540  6EDA               	movwf	fsr2h,c
  1850  000542  CFDE F0F8          	movff	postinc2,_FillServoPositionString$1046
  1851  000546  CFDD F0F9          	movff	postdec2,_FillServoPositionString$1046+1
  1852                           
  1853                           ;main.c: 223: int deltaVertical = positions.verticalMovement[servosets[i].currentServoPo
      +                          sition] * servosets[i].multiplierVertical;
  1854  00054A  C0FC  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1855  00054E  C0FD  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1856  000552  0E00               	movlw	0
  1857  000554  6E2B               	movwf	___wmul@multiplicand+1,c
  1858  000556  0E15               	movlw	21
  1859  000558  6E2A               	movwf	___wmul@multiplicand,c
  1860  00055A  EC65  F007         	call	___wmul	;wreg free
  1861  00055E  0E60               	movlw	low _servosets
  1862  000560  2428               	addwf	?___wmul,w,c
  1863  000562  6ED9               	movwf	fsr2l,c
  1864  000564  0E00               	movlw	high _servosets
  1865  000566  2029               	addwfc	?___wmul+1,w,c
  1866  000568  6EDA               	movwf	fsr2h,c
  1867  00056A  CFDE F035          	movff	postinc2,??_FillServoPositionString
  1868  00056E  CFDD F036          	movff	postdec2,??_FillServoPositionString+1
  1869  000572  90D8               	bcf	status,0,c
  1870  000574  3635               	rlcf	??_FillServoPositionString,f,c
  1871  000576  3636               	rlcf	??_FillServoPositionString+1,f,c
  1872  000578  0E01               	movlw	low _positions
  1873  00057A  2435               	addwf	??_FillServoPositionString,w,c
  1874  00057C  6EF6               	movwf	tblptrl,c
  1875  00057E  0E03               	movlw	high _positions
  1876  000580  2036               	addwfc	??_FillServoPositionString+1,w,c
  1877  000582  6EF7               	movwf	tblptrh,c
  1878  000584                     	if	0	;There are less than 3 active tblptr bytes
  1879  000584                     	endif
  1880  000584  0009               	tblrd		*+
  1881  000586  CFF5 F0FA          	movff	tablat,_FillServoPositionString$1047
  1882  00058A  000A               	tblrd		*-
  1883  00058C  CFF5 F0FB          	movff	tablat,_FillServoPositionString$1047+1
  1884                           
  1885                           ;main.c: 223: int deltaVertical = positions.verticalMovement[servosets[i].currentServoPo
      +                          sition] * servosets[i].multiplierVertical;
  1886  000590  C0F8  F028         	movff	_FillServoPositionString$1046,___wmul@multiplier
  1887  000594  C0F9  F029         	movff	_FillServoPositionString$1046+1,___wmul@multiplier+1
  1888  000598  C0FA  F02A         	movff	_FillServoPositionString$1047,___wmul@multiplicand
  1889  00059C  C0FB  F02B         	movff	_FillServoPositionString$1047+1,___wmul@multiplicand+1
  1890  0005A0  EC65  F007         	call	___wmul	;wreg free
  1891  0005A4  C028  F0EF         	movff	?___wmul,FillServoPositionString@deltaVertical
  1892  0005A8  C029  F0F0         	movff	?___wmul+1,FillServoPositionString@deltaVertical+1
  1893                           
  1894                           ;main.c: 224: int newVerticalPosition = servosets[i].verticalUpperMediumPosition + delta
      +                          Vertical;
  1895  0005AC  C0FC  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1896  0005B0  C0FD  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1897  0005B4  0E00               	movlw	0
  1898  0005B6  6E2B               	movwf	___wmul@multiplicand+1,c
  1899  0005B8  0E15               	movlw	21
  1900  0005BA  6E2A               	movwf	___wmul@multiplicand,c
  1901  0005BC  EC65  F007         	call	___wmul	;wreg free
  1902  0005C0  0E0D               	movlw	13
  1903  0005C2  2628               	addwf	?___wmul,f,c
  1904  0005C4  0E00               	movlw	0
  1905  0005C6  2229               	addwfc	?___wmul+1,f,c
  1906  0005C8  0E60               	movlw	low _servosets
  1907  0005CA  2428               	addwf	?___wmul,w,c
  1908  0005CC  6ED9               	movwf	fsr2l,c
  1909  0005CE  0E00               	movlw	high _servosets
  1910  0005D0  2029               	addwfc	?___wmul+1,w,c
  1911  0005D2  6EDA               	movwf	fsr2h,c
  1912  0005D4  CFDE F035          	movff	postinc2,??_FillServoPositionString
  1913  0005D8  CFDD F036          	movff	postdec2,??_FillServoPositionString+1
  1914  0005DC  0100               	movlb	0	; () banked
  1915  0005DE  51EF               	movf	FillServoPositionString@deltaVertical& (0+255),w,b
  1916  0005E0  2435               	addwf	??_FillServoPositionString,w,c
  1917  0005E2  6FF1               	movwf	FillServoPositionString@newVerticalPosition& (0+255),b
  1918  0005E4  51F0               	movf	(FillServoPositionString@deltaVertical+1)& (0+255),w,b
  1919  0005E6  2036               	addwfc	??_FillServoPositionString+1,w,c
  1920  0005E8  6FF2               	movwf	(FillServoPositionString@newVerticalPosition+1)& (0+255),b
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;main.c: 225: sprintf(tmp, "%d", newVerticalPosition);
  1924  0005EA  0EF3               	movlw	low FillServoPositionString@tmp
  1925  0005EC  6FDE               	movwf	sprintf@sp& (0+255),b
  1926  0005EE  0E00               	movlw	high FillServoPositionString@tmp
  1927  0005F0  6FDF               	movwf	(sprintf@sp+1)& (0+255),b
  1928  0005F2  0E23               	movlw	low STR_3
  1929  0005F4  6FE0               	movwf	sprintf@f& (0+255),b
  1930  0005F6  0E03               	movlw	high STR_3
  1931  0005F8  6FE1               	movwf	(sprintf@f+1)& (0+255),b
  1932  0005FA  C0F1  F0E2         	movff	FillServoPositionString@newVerticalPosition,?_sprintf+4
  1933  0005FE  C0F2  F0E3         	movff	FillServoPositionString@newVerticalPosition+1,?_sprintf+5
  1934  000602  ECD7  F004         	call	_sprintf	;wreg free
  1935                           
  1936                           ;main.c: 226: strcat(movementString, tmp);
  1937  000606  0E00               	movlw	low _movementString
  1938  000608  6E2E               	movwf	strcat@to,c
  1939  00060A  0E01               	movlw	high _movementString
  1940  00060C  6E2F               	movwf	strcat@to+1,c
  1941  00060E  0EF3               	movlw	low FillServoPositionString@tmp
  1942  000610  6E30               	movwf	strcat@from,c
  1943  000612  0E00               	movlw	high FillServoPositionString@tmp
  1944  000614  6E31               	movwf	strcat@from+1,c
  1945  000616  EC59  F006         	call	_strcat	;wreg free
  1946                           
  1947                           ;main.c: 227: strcat(movementString, "#");
  1948  00061A  0E00               	movlw	low _movementString
  1949  00061C  6E2E               	movwf	strcat@to,c
  1950  00061E  0E01               	movlw	high _movementString
  1951  000620  6E2F               	movwf	strcat@to+1,c
  1952  000622  0E26               	movlw	low STR_1
  1953  000624  6E30               	movwf	strcat@from,c
  1954  000626  0E03               	movlw	high STR_1
  1955  000628  6E31               	movwf	strcat@from+1,c
  1956  00062A  EC59  F006         	call	_strcat	;wreg free
  1957                           
  1958                           ;main.c: 228: strcat(movementString, servosets[i].lowerVerticalServo);
  1959  00062E  0E00               	movlw	low _movementString
  1960  000630  6E2E               	movwf	strcat@to,c
  1961  000632  0E01               	movlw	high _movementString
  1962  000634  6E2F               	movwf	strcat@to+1,c
  1963  000636  C0FC  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1964  00063A  C0FD  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1965  00063E  0E00               	movlw	0
  1966  000640  6E2B               	movwf	___wmul@multiplicand+1,c
  1967  000642  0E15               	movlw	21
  1968  000644  6E2A               	movwf	___wmul@multiplicand,c
  1969  000646  EC65  F007         	call	___wmul	;wreg free
  1970  00064A  0E08               	movlw	8
  1971  00064C  2628               	addwf	?___wmul,f,c
  1972  00064E  0E00               	movlw	0
  1973  000650  2229               	addwfc	?___wmul+1,f,c
  1974  000652  0E60               	movlw	low _servosets
  1975  000654  2428               	addwf	?___wmul,w,c
  1976  000656  6E30               	movwf	strcat@from,c
  1977  000658  0E00               	movlw	high _servosets
  1978  00065A  2029               	addwfc	?___wmul+1,w,c
  1979  00065C  6E31               	movwf	strcat@from+1,c
  1980  00065E  EC59  F006         	call	_strcat	;wreg free
  1981                           
  1982                           ;main.c: 229: strcat(movementString, "P");
  1983  000662  0E00               	movlw	low _movementString
  1984  000664  6E2E               	movwf	strcat@to,c
  1985  000666  0E01               	movlw	high _movementString
  1986  000668  6E2F               	movwf	strcat@to+1,c
  1987  00066A  0E28               	movlw	low STR_2
  1988  00066C  6E30               	movwf	strcat@from,c
  1989  00066E  0E03               	movlw	high STR_2
  1990  000670  6E31               	movwf	strcat@from+1,c
  1991  000672  EC59  F006         	call	_strcat	;wreg free
  1992                           
  1993                           ;main.c: 230: sprintf(tmp, "%d", servosets[i].verticalLowerMediumPosition);
  1994  000676  0EF3               	movlw	low FillServoPositionString@tmp
  1995  000678  0100               	movlb	0	; () banked
  1996  00067A  6FDE               	movwf	sprintf@sp& (0+255),b
  1997  00067C  0E00               	movlw	high FillServoPositionString@tmp
  1998  00067E  6FDF               	movwf	(sprintf@sp+1)& (0+255),b
  1999  000680  0E23               	movlw	low STR_3
  2000  000682  6FE0               	movwf	sprintf@f& (0+255),b
  2001  000684  0E03               	movlw	high STR_3
  2002  000686  6FE1               	movwf	(sprintf@f+1)& (0+255),b
  2003  000688  C0FC  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  2004  00068C  C0FD  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  2005  000690  0E00               	movlw	0
  2006  000692  6E2B               	movwf	___wmul@multiplicand+1,c
  2007  000694  0E15               	movlw	21
  2008  000696  6E2A               	movwf	___wmul@multiplicand,c
  2009  000698  EC65  F007         	call	___wmul	;wreg free
  2010  00069C  0E0F               	movlw	15
  2011  00069E  2628               	addwf	?___wmul,f,c
  2012  0006A0  0E00               	movlw	0
  2013  0006A2  2229               	addwfc	?___wmul+1,f,c
  2014  0006A4  0E60               	movlw	low _servosets
  2015  0006A6  2428               	addwf	?___wmul,w,c
  2016  0006A8  6ED9               	movwf	fsr2l,c
  2017  0006AA  0E00               	movlw	high _servosets
  2018  0006AC  2029               	addwfc	?___wmul+1,w,c
  2019  0006AE  6EDA               	movwf	fsr2h,c
  2020  0006B0  CFDE F0E2          	movff	postinc2,?_sprintf+4
  2021  0006B4  CFDD F0E3          	movff	postdec2,?_sprintf+5
  2022  0006B8  ECD7  F004         	call	_sprintf	;wreg free
  2023                           
  2024                           ;main.c: 231: strcat(movementString, tmp);
  2025  0006BC  0E00               	movlw	low _movementString
  2026  0006BE  6E2E               	movwf	strcat@to,c
  2027  0006C0  0E01               	movlw	high _movementString
  2028  0006C2  6E2F               	movwf	strcat@to+1,c
  2029  0006C4  0EF3               	movlw	low FillServoPositionString@tmp
  2030  0006C6  6E30               	movwf	strcat@from,c
  2031  0006C8  0E00               	movlw	high FillServoPositionString@tmp
  2032  0006CA  6E31               	movwf	strcat@from+1,c
  2033  0006CC  EC59  F006         	call	_strcat	;wreg free
  2034  0006D0  0100               	movlb	0	; () banked
  2035  0006D2  4BFC               	infsnz	FillServoPositionString@i& (0+255),f,b
  2036  0006D4  2BFD               	incf	(FillServoPositionString@i+1)& (0+255),f,b
  2037  0006D6  D635               	goto	l1313
  2038  0006D8                     u550:
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;main.c: 232: }
  2042                           ;main.c: 233: strcat(movementString, "T400\r");
  2043                           
  2044                           ; BSR set to: 0
  2045  0006D8  0E00               	movlw	low _movementString
  2046  0006DA  6E2E               	movwf	strcat@to,c
  2047  0006DC  0E01               	movlw	high _movementString
  2048  0006DE  6E2F               	movwf	strcat@to+1,c
  2049  0006E0  0E1D               	movlw	low STR_10
  2050  0006E2  6E30               	movwf	strcat@from,c
  2051  0006E4  0E03               	movlw	high STR_10
  2052  0006E6  6E31               	movwf	strcat@from+1,c
  2053  0006E8  EC59  F006         	call	_strcat	;wreg free
  2054  0006EC  0012               	return		;funcret
  2055  0006EE                     __end_of_FillServoPositionString:
  2056                           	opt stack 0
  2057                           tblptru	equ	0xFF8
  2058                           tblptrh	equ	0xFF7
  2059                           tblptrl	equ	0xFF6
  2060                           tablat	equ	0xFF5
  2061                           postinc0	equ	0xFEE
  2062                           wreg	equ	0xFE8
  2063                           postdec1	equ	0xFE5
  2064                           fsr1h	equ	0xFE2
  2065                           fsr1l	equ	0xFE1
  2066                           indf2	equ	0xFDF
  2067                           postinc2	equ	0xFDE
  2068                           postdec2	equ	0xFDD
  2069                           plusw2	equ	0xFDB
  2070                           fsr2h	equ	0xFDA
  2071                           fsr2l	equ	0xFD9
  2072                           status	equ	0xFD8
  2073                           
  2074 ;; *************** function _strcat *****************
  2075 ;; Defined at:
  2076 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcat.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;  to              2   45[COMRAM] PTR unsigned char 
  2079 ;;		 -> movementString(256), 
  2080 ;;  from            2   47[COMRAM] PTR const unsigned char 
  2081 ;;		 -> STR_22(2), STR_20(2), STR_19(2), STR_18(2), 
  2082 ;;		 -> STR_16(2), STR_15(2), STR_14(2), InitServos@tmp(5), 
  2083 ;;		 -> STR_12(2), STR_11(2), STR_10(6), STR_8(2), 
  2084 ;;		 -> STR_7(2), STR_5(2), STR_4(2), FillServoPositionString@tmp(5), 
  2085 ;;		 -> STR_2(2), STR_1(2), servosets.lowerVerticalServo(3), servosets.upperVerticalServo(3), 
  2086 ;;		 -> servosets.horizontalServo(3), servosets(126), 
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;  cp              2   49[COMRAM] PTR unsigned char 
  2089 ;;		 -> movementString(256), 
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  2   45[COMRAM] PTR unsigned char 
  2092 ;; Registers used:
  2093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2099 ;;      Params:         4       0       0       0
  2100 ;;      Locals:         2       0       0       0
  2101 ;;      Temps:          0       0       0       0
  2102 ;;      Totals:         6       0       0       0
  2103 ;;Total ram usage:        6 bytes
  2104 ;; Hardware stack levels used:    1
  2105 ;; Hardware stack levels required when called:    2
  2106 ;; This function calls:
  2107 ;;		Nothing
  2108 ;; This function is called by:
  2109 ;;		_FillServoPositionString
  2110 ;;		_InitServos
  2111 ;; This function uses a non-reentrant model
  2112 ;;
  2113                           
  2114                           	psect	text8
  2115  000CB2                     __ptext8:
  2116                           	opt stack 0
  2117  000CB2                     _strcat:
  2118                           	opt stack 27
  2119                           
  2120                           ;incstack = 0
  2121  000CB2  C02E  F032         	movff	strcat@to,strcat@cp
  2122  000CB6  C02F  F033         	movff	strcat@to+1,strcat@cp+1
  2123  000CBA  D002               	goto	l696
  2124  000CBC  4A32               	infsnz	strcat@cp,f,c
  2125  000CBE  2A33               	incf	strcat@cp+1,f,c
  2126  000CC0                     l696:
  2127  000CC0  C032  FFD9         	movff	strcat@cp,fsr2l
  2128  000CC4  C033  FFDA         	movff	strcat@cp+1,fsr2h
  2129  000CC8  50DF               	movf	indf2,w,c
  2130  000CCA  B4D8               	btfsc	status,2,c
  2131  000CCC  D005               	goto	l699
  2132  000CCE  D7F6               	goto	l697
  2133  000CD0  4A32               	infsnz	strcat@cp,f,c
  2134  000CD2  2A33               	incf	strcat@cp+1,f,c
  2135  000CD4  4A30               	infsnz	strcat@from,f,c
  2136  000CD6  2A31               	incf	strcat@from+1,f,c
  2137  000CD8                     l699:
  2138  000CD8  C030  FFF6         	movff	strcat@from,tblptrl
  2139  000CDC  C031  FFF7         	movff	strcat@from+1,tblptrh
  2140  000CE0  6AF8               	clrf	tblptru,c
  2141  000CE2  C032  FFD9         	movff	strcat@cp,fsr2l
  2142  000CE6  C033  FFDA         	movff	strcat@cp+1,fsr2h
  2143  000CEA  0E02               	movlw	(high __ramtop+-1)
  2144  000CEC  64F7               	cpfsgt	tblptrh,c
  2145  000CEE  D003               	bra	u427
  2146  000CF0  0008               	tblrd		*
  2147  000CF2  50F5               	movf	tablat,w,c
  2148  000CF4  D005               	bra	u420
  2149  000CF6                     u427:
  2150  000CF6  CFF6 FFE1          	movff	tblptrl,fsr1l
  2151  000CFA  CFF7 FFE2          	movff	tblptrh,fsr1h
  2152  000CFE  50E7               	movf	indf1,w,c
  2153  000D00                     u420:
  2154  000D00  6EDF               	movwf	indf2,c
  2155  000D02  50DF               	movf	indf2,w,c
  2156  000D04  B4D8               	btfsc	status,2,c
  2157  000D06  0012               	return	
  2158  000D08  D7E3               	goto	l700
  2159  000D0A                     __end_of_strcat:
  2160                           	opt stack 0
  2161                           tblptru	equ	0xFF8
  2162                           tblptrh	equ	0xFF7
  2163                           tblptrl	equ	0xFF6
  2164                           tablat	equ	0xFF5
  2165                           postinc0	equ	0xFEE
  2166                           wreg	equ	0xFE8
  2167                           indf1	equ	0xFE7
  2168                           postdec1	equ	0xFE5
  2169                           fsr1h	equ	0xFE2
  2170                           fsr1l	equ	0xFE1
  2171                           indf2	equ	0xFDF
  2172                           postinc2	equ	0xFDE
  2173                           postdec2	equ	0xFDD
  2174                           plusw2	equ	0xFDB
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function _sprintf *****************
  2180 ;; Defined at:
  2181 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  2184 ;;		 -> InitServos@tmp(5), FillServoPositionString@tmp(5), 
  2185 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  2186 ;;		 -> STR_21(3), STR_17(3), STR_13(3), STR_9(3), 
  2187 ;;		 -> STR_6(3), STR_3(3), 
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  tmpval          4    0        struct .
  2190 ;;  cp              3    0        PTR const unsigned char 
  2191 ;;  val             2   10[BANK0 ] unsigned int 
  2192 ;;  ap              2    6[BANK0 ] PTR void [1]
  2193 ;;		 -> ?_sprintf(2), 
  2194 ;;  len             2    0        unsigned int 
  2195 ;;  c               1   12[BANK0 ] char 
  2196 ;;  prec            1    9[BANK0 ] char 
  2197 ;;  flag            1    8[BANK0 ] unsigned char 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  2    0[BANK0 ] int 
  2200 ;; Registers used:
  2201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2207 ;;      Params:         0       6       0       0
  2208 ;;      Locals:         0       7       0       0
  2209 ;;      Temps:          1       0       0       0
  2210 ;;      Totals:         1      13       0       0
  2211 ;;Total ram usage:       14 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    3
  2214 ;; This function calls:
  2215 ;;		___lwdiv
  2216 ;;		___lwmod
  2217 ;; This function is called by:
  2218 ;;		_FillServoPositionString
  2219 ;;		_InitServos
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text9
  2224  0009AE                     __ptext9:
  2225                           	opt stack 0
  2226  0009AE                     _sprintf:
  2227                           	opt stack 26
  2228                           
  2229                           ;doprnt.c: 494: va_list ap;
  2230                           ;doprnt.c: 499: signed char c;
  2231                           ;doprnt.c: 506: signed char prec;
  2232                           ;doprnt.c: 508: unsigned char flag;
  2233                           ;doprnt.c: 523: union {
  2234                           ;doprnt.c: 524: unsigned long vd;
  2235                           ;doprnt.c: 525: double integ;
  2236                           ;doprnt.c: 526: } tmpval;
  2237                           ;doprnt.c: 528: unsigned int val;
  2238                           ;doprnt.c: 529: unsigned len;
  2239                           ;doprnt.c: 530: const char * cp;
  2240                           ;doprnt.c: 533: *ap = __va_start();
  2241                           
  2242                           ;incstack = 0
  2243  0009AE  0EE2               	movlw	low (?_sprintf+4)
  2244  0009B0  0100               	movlb	0	; () banked
  2245  0009B2  6FE4               	movwf	sprintf@ap& (0+255),b
  2246  0009B4  0E00               	movlw	high (?_sprintf+4)
  2247  0009B6  6FE5               	movwf	(sprintf@ap+1)& (0+255),b
  2248                           
  2249                           ;doprnt.c: 536: while(c = *f++) {
  2250  0009B8  D08D               	goto	u500
  2251  0009BA                     
  2252                           ; BSR set to: 0
  2253                           ;doprnt.c: 538: if(c != '%')
  2254                           
  2255                           ; BSR set to: 0
  2256  0009BA  0E25               	movlw	37
  2257  0009BC  19EA               	xorwf	sprintf@c& (0+255),w,b
  2258  0009BE  B4D8               	btfsc	status,2,c
  2259  0009C0  D009               	goto	l125
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;doprnt.c: 540: {
  2263                           ;doprnt.c: 541: ((*sp++ = (c)));
  2264  0009C2  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  2265  0009C6  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  2266  0009CA  C0EA  FFDF         	movff	sprintf@c,indf2
  2267                           
  2268                           ; BSR set to: 0
  2269  0009CE  4BDE               	infsnz	sprintf@sp& (0+255),f,b
  2270  0009D0  2BDF               	incf	(sprintf@sp+1)& (0+255),f,b
  2271                           
  2272                           ;doprnt.c: 542: continue;
  2273  0009D2  D080               	goto	u500
  2274  0009D4                     l125:
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;doprnt.c: 543: }
  2278                           ;doprnt.c: 548: flag = 0;
  2279                           
  2280                           ; BSR set to: 0
  2281  0009D4  0E00               	movlw	0
  2282  0009D6  6FE6               	movwf	sprintf@flag& (0+255),b
  2283                           
  2284                           ; BSR set to: 0
  2285                           
  2286                           ; BSR set to: 0
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;doprnt.c: 822: }
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;doprnt.c: 813: continue;
  2293                           
  2294                           ;doprnt.c: 802: default:
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;doprnt.c: 698: case 'i':
  2298                           ;doprnt.c: 699: break;
  2299                           
  2300                           ; BSR set to: 0
  2301                           
  2302                           ;doprnt.c: 697: case 'd':
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;doprnt.c: 638: goto alldone;
  2306                           
  2307                           ;doprnt.c: 637: case 0:
  2308                           
  2309                           ;doprnt.c: 635: switch(c = *f++) {
  2310  0009D8  C0E0  FFF6         	movff	sprintf@f,tblptrl
  2311  0009DC  C0E1  FFF7         	movff	sprintf@f+1,tblptrh
  2312  0009E0  4BE0               	infsnz	sprintf@f& (0+255),f,b
  2313  0009E2  2BE1               	incf	(sprintf@f+1)& (0+255),f,b
  2314  0009E4                     	if	0	;tblptru may be non-zero
  2315  0009E4                     	endif
  2316  0009E4                     	if	0	;tblptru may be non-zero
  2317  0009E4                     	endif
  2318  0009E4  0008               	tblrd		*
  2319  0009E6  CFF5 F0EA          	movff	tablat,sprintf@c
  2320  0009EA  51EA               	movf	sprintf@c& (0+255),w,b
  2321                           
  2322                           ; Switch size 1, requested type "space"
  2323                           ; Number of cases is 3, Range of values is 0 to 105
  2324                           ; switch strategies available:
  2325                           ; Name         Instructions Cycles
  2326                           ; simple_byte           10     6 (average)
  2327                           ;	Chosen strategy is simple_byte
  2328  0009EC  0A00               	xorlw	0	; case 0
  2329  0009EE  B4D8               	btfsc	status,2,c
  2330  0009F0  D07D               	goto	u510
  2331  0009F2  0A64               	xorlw	100	; case 100
  2332  0009F4  B4D8               	btfsc	status,2,c
  2333  0009F6  D003               	goto	l131
  2334  0009F8  0A0D               	xorlw	13	; case 105
  2335  0009FA  A4D8               	btfss	status,2,c
  2336  0009FC  D06B               	goto	u500
  2337  0009FE                     l131:
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;doprnt.c: 1253: {
  2341                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2342                           
  2343                           ; BSR set to: 0
  2344  0009FE  C0E4  FFD9         	movff	sprintf@ap,fsr2l
  2345  000A02  C0E5  FFDA         	movff	sprintf@ap+1,fsr2h
  2346  000A06  CFDE F0E8          	movff	postinc2,sprintf@val
  2347  000A0A  CFDD F0E9          	movff	postdec2,sprintf@val+1
  2348                           
  2349                           ; BSR set to: 0
  2350  000A0E  0E02               	movlw	2
  2351  000A10  27E4               	addwf	sprintf@ap& (0+255),f,b
  2352  000A12  0E00               	movlw	0
  2353  000A14  23E5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;doprnt.c: 1261: if((int)val < 0) {
  2357  000A16  AFE9               	btfss	(sprintf@val+1)& (0+255),7,b
  2358  000A18  D006               	goto	l133
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;doprnt.c: 1262: flag |= 0x03;
  2362  000A1A  0E03               	movlw	3
  2363  000A1C  13E6               	iorwf	sprintf@flag& (0+255),f,b
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;doprnt.c: 1263: val = -val;
  2367  000A1E  6DE8               	negf	sprintf@val& (0+255),b
  2368  000A20  1FE9               	comf	(sprintf@val+1)& (0+255),f,b
  2369  000A22  B0D8               	btfsc	status,0,c
  2370  000A24  2BE9               	incf	(sprintf@val+1)& (0+255),f,b
  2371  000A26                     l133:
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;doprnt.c: 1264: }
  2375                           ;doprnt.c: 1266: }
  2376                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2377                           
  2378                           ; BSR set to: 0
  2379  000A26  0E01               	movlw	1
  2380  000A28  6FEA               	movwf	sprintf@c& (0+255),b
  2381  000A2A                     l1213:
  2382                           
  2383                           ; BSR set to: 0
  2384  000A2A  0E05               	movlw	5
  2385  000A2C  19EA               	xorwf	sprintf@c& (0+255),w,b
  2386  000A2E  B4D8               	btfsc	status,2,c
  2387  000A30  D012               	goto	u480
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;doprnt.c: 1306: if(val < dpowers[c])
  2391                           
  2392                           ; BSR set to: 0
  2393                           
  2394                           ; BSR set to: 0
  2395  000A32  51EA               	movf	sprintf@c& (0+255),w,b
  2396  000A34  0D02               	mullw	2
  2397  000A36  0E11               	movlw	low _dpowers
  2398  000A38  24F3               	addwf	prodl,w,c
  2399  000A3A  6EF6               	movwf	tblptrl,c
  2400  000A3C  0E03               	movlw	high _dpowers
  2401  000A3E  20F4               	addwfc	prodh,w,c
  2402  000A40  6EF7               	movwf	tblptrh,c
  2403  000A42                     	if	0	;There are less than 3 active tblptr bytes
  2404  000A42                     	endif
  2405  000A42  0009               	tblrd		*+
  2406  000A44  50F5               	movf	tablat,w,c
  2407  000A46  5DE8               	subwf	sprintf@val& (0+255),w,b
  2408  000A48  0009               	tblrd		*+
  2409  000A4A  50F5               	movf	tablat,w,c
  2410  000A4C  59E9               	subwfb	(sprintf@val+1)& (0+255),w,b
  2411  000A4E  A0D8               	btfss	status,0,c
  2412  000A50  D002               	goto	u480
  2413                           
  2414                           ; BSR set to: 0
  2415                           
  2416                           ; BSR set to: 0
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;doprnt.c: 1307: break;
  2420  000A52  2BEA               	incf	sprintf@c& (0+255),f,b
  2421  000A54  D7EA               	goto	l1213
  2422  000A56                     u480:
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;doprnt.c: 1422: {
  2426                           ;doprnt.c: 1438: if(flag & 0x03)
  2427                           
  2428                           ; BSR set to: 0
  2429  000A56  C0E6  F034         	movff	sprintf@flag,??_sprintf
  2430  000A5A  0E03               	movlw	3
  2431  000A5C  1634               	andwf	??_sprintf,f,c
  2432  000A5E  B4D8               	btfsc	status,2,c
  2433  000A60  D008               	goto	l137
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2437  000A62  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  2438  000A66  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  2439  000A6A  0E2D               	movlw	45
  2440  000A6C  6EDF               	movwf	indf2,c
  2441                           
  2442                           ; BSR set to: 0
  2443  000A6E  4BDE               	infsnz	sprintf@sp& (0+255),f,b
  2444  000A70  2BDF               	incf	(sprintf@sp+1)& (0+255),f,b
  2445  000A72                     l137:
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;doprnt.c: 1469: }
  2449                           ;doprnt.c: 1472: prec = c;
  2450                           
  2451                           ; BSR set to: 0
  2452  000A72  C0EA  F0E7         	movff	sprintf@c,sprintf@prec
  2453                           
  2454                           ;doprnt.c: 1474: while(prec--) {
  2455  000A76  D02A               	goto	l138
  2456  000A78                     
  2457                           ; BSR set to: 0
  2458                           ;doprnt.c: 1478: {
  2459                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2460                           
  2461                           ; BSR set to: 0
  2462  000A78  51E7               	movf	sprintf@prec& (0+255),w,b
  2463  000A7A  0D02               	mullw	2
  2464  000A7C  0E11               	movlw	low _dpowers
  2465  000A7E  24F3               	addwf	prodl,w,c
  2466  000A80  6EF6               	movwf	tblptrl,c
  2467  000A82  0E03               	movlw	high _dpowers
  2468  000A84  20F4               	addwfc	prodh,w,c
  2469  000A86  6EF7               	movwf	tblptrh,c
  2470  000A88                     	if	0	;There are less than 3 active tblptr bytes
  2471  000A88                     	endif
  2472  000A88  0009               	tblrd		*+
  2473  000A8A  CFF5 F02A          	movff	tablat,___lwdiv@divisor
  2474  000A8E  000A               	tblrd		*-
  2475  000A90  CFF5 F02B          	movff	tablat,___lwdiv@divisor+1
  2476  000A94  C0E8  F028         	movff	sprintf@val,___lwdiv@dividend
  2477  000A98  C0E9  F029         	movff	sprintf@val+1,___lwdiv@dividend+1
  2478  000A9C  ECB0  F006         	call	___lwdiv	;wreg free
  2479  000AA0  C028  F02F         	movff	?___lwdiv,___lwmod@dividend
  2480  000AA4  C029  F030         	movff	?___lwdiv+1,___lwmod@dividend+1
  2481  000AA8  0E00               	movlw	0
  2482  000AAA  6E32               	movwf	___lwmod@divisor+1,c
  2483  000AAC  0E0A               	movlw	10
  2484  000AAE  6E31               	movwf	___lwmod@divisor,c
  2485  000AB0  ECFA  F006         	call	___lwmod	;wreg free
  2486  000AB4  502F               	movf	?___lwmod,w,c
  2487  000AB6  0F30               	addlw	48
  2488  000AB8  0100               	movlb	0	; () banked
  2489  000ABA  6FEA               	movwf	sprintf@c& (0+255),b
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;doprnt.c: 1523: }
  2493                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2494  000ABC  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  2495  000AC0  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  2496  000AC4  C0EA  FFDF         	movff	sprintf@c,indf2
  2497                           
  2498                           ; BSR set to: 0
  2499  000AC8  4BDE               	infsnz	sprintf@sp& (0+255),f,b
  2500  000ACA  2BDF               	incf	(sprintf@sp+1)& (0+255),f,b
  2501  000ACC                     l138:
  2502                           
  2503                           ; BSR set to: 0
  2504                           
  2505                           ; BSR set to: 0
  2506  000ACC  07E7               	decf	sprintf@prec& (0+255),f,b
  2507  000ACE  29E7               	incf	sprintf@prec& (0+255),w,b
  2508  000AD0  A4D8               	btfss	status,2,c
  2509  000AD2  D7D2               	goto	l139
  2510  000AD4                     u500:
  2511                           
  2512                           ; BSR set to: 0
  2513                           
  2514                           ; BSR set to: 0
  2515                           
  2516                           ; BSR set to: 0
  2517  000AD4  C0E0  FFF6         	movff	sprintf@f,tblptrl
  2518  000AD8  C0E1  FFF7         	movff	sprintf@f+1,tblptrh
  2519  000ADC  4BE0               	infsnz	sprintf@f& (0+255),f,b
  2520  000ADE  2BE1               	incf	(sprintf@f+1)& (0+255),f,b
  2521  000AE0                     	if	0	;tblptru may be non-zero
  2522  000AE0                     	endif
  2523  000AE0                     	if	0	;tblptru may be non-zero
  2524  000AE0                     	endif
  2525  000AE0  0008               	tblrd		*
  2526  000AE2  CFF5 F0EA          	movff	tablat,sprintf@c
  2527  000AE6  51EA               	movf	sprintf@c& (0+255),w,b
  2528  000AE8  A4D8               	btfss	status,2,c
  2529  000AEA  D767               	goto	l124
  2530  000AEC                     u510:
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;doprnt.c: 1538: *sp = 0;
  2534                           
  2535                           ; BSR set to: 0
  2536                           
  2537                           ;doprnt.c: 1525: }
  2538                           ;doprnt.c: 1533: }
  2539                           ;doprnt.c: 1535: alldone:
  2540                           
  2541                           ; BSR set to: 0
  2542  000AEC  C0DE  FFD9         	movff	sprintf@sp,fsr2l
  2543  000AF0  C0DF  FFDA         	movff	sprintf@sp+1,fsr2h
  2544  000AF4  0E00               	movlw	0
  2545  000AF6  6EDF               	movwf	indf2,c
  2546  000AF8  0012               	return	
  2547  000AFA                     __end_of_sprintf:
  2548                           	opt stack 0
  2549                           tblptru	equ	0xFF8
  2550                           tblptrh	equ	0xFF7
  2551                           tblptrl	equ	0xFF6
  2552                           tablat	equ	0xFF5
  2553                           prodh	equ	0xFF4
  2554                           prodl	equ	0xFF3
  2555                           postinc0	equ	0xFEE
  2556                           wreg	equ	0xFE8
  2557                           indf1	equ	0xFE7
  2558                           postdec1	equ	0xFE5
  2559                           fsr1h	equ	0xFE2
  2560                           fsr1l	equ	0xFE1
  2561                           indf2	equ	0xFDF
  2562                           postinc2	equ	0xFDE
  2563                           postdec2	equ	0xFDD
  2564                           plusw2	equ	0xFDB
  2565                           fsr2h	equ	0xFDA
  2566                           fsr2l	equ	0xFD9
  2567                           status	equ	0xFD8
  2568                           
  2569 ;; *************** function ___lwmod *****************
  2570 ;; Defined at:
  2571 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  dividend        2   46[COMRAM] unsigned int 
  2574 ;;  divisor         2   48[COMRAM] unsigned int 
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;  counter         1   50[COMRAM] unsigned char 
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  2   46[COMRAM] unsigned int 
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2586 ;;      Params:         4       0       0       0
  2587 ;;      Locals:         1       0       0       0
  2588 ;;      Temps:          0       0       0       0
  2589 ;;      Totals:         5       0       0       0
  2590 ;;Total ram usage:        5 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    2
  2593 ;; This function calls:
  2594 ;;		Nothing
  2595 ;; This function is called by:
  2596 ;;		_sprintf
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	text10
  2601  000DF4                     __ptext10:
  2602                           	opt stack 0
  2603  000DF4                     ___lwmod:
  2604                           	opt stack 26
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;incstack = 0
  2608  000DF4  5031               	movf	___lwmod@divisor,w,c
  2609  000DF6  1032               	iorwf	___lwmod@divisor+1,w,c
  2610  000DF8  B4D8               	btfsc	status,2,c
  2611  000DFA  D018               	goto	l561
  2612  000DFC  0E01               	movlw	1
  2613  000DFE  6E33               	movwf	___lwmod@counter,c
  2614  000E00  D004               	goto	l556
  2615  000E02  90D8               	bcf	status,0,c
  2616  000E04  3631               	rlcf	___lwmod@divisor,f,c
  2617  000E06  3632               	rlcf	___lwmod@divisor+1,f,c
  2618  000E08  2A33               	incf	___lwmod@counter,f,c
  2619  000E0A                     l556:
  2620  000E0A  AE32               	btfss	___lwmod@divisor+1,7,c
  2621  000E0C  D7FA               	goto	l557
  2622  000E0E                     u370:
  2623  000E0E  5031               	movf	___lwmod@divisor,w,c
  2624  000E10  5C2F               	subwf	___lwmod@dividend,w,c
  2625  000E12  5032               	movf	___lwmod@divisor+1,w,c
  2626  000E14  5830               	subwfb	___lwmod@dividend+1,w,c
  2627  000E16  A0D8               	btfss	status,0,c
  2628  000E18  D004               	goto	l560
  2629  000E1A  5031               	movf	___lwmod@divisor,w,c
  2630  000E1C  5E2F               	subwf	___lwmod@dividend,f,c
  2631  000E1E  5032               	movf	___lwmod@divisor+1,w,c
  2632  000E20  5A30               	subwfb	___lwmod@dividend+1,f,c
  2633  000E22                     l560:
  2634  000E22  90D8               	bcf	status,0,c
  2635  000E24  3232               	rrcf	___lwmod@divisor+1,f,c
  2636  000E26  3231               	rrcf	___lwmod@divisor,f,c
  2637  000E28  2E33               	decfsz	___lwmod@counter,f,c
  2638  000E2A  D7F1               	goto	u370
  2639  000E2C                     l561:
  2640  000E2C  C02F  F02F         	movff	___lwmod@dividend,?___lwmod
  2641  000E30  C030  F030         	movff	___lwmod@dividend+1,?___lwmod+1
  2642  000E34  0012               	return		;funcret
  2643  000E36                     __end_of___lwmod:
  2644                           	opt stack 0
  2645                           tblptru	equ	0xFF8
  2646                           tblptrh	equ	0xFF7
  2647                           tblptrl	equ	0xFF6
  2648                           tablat	equ	0xFF5
  2649                           prodh	equ	0xFF4
  2650                           prodl	equ	0xFF3
  2651                           postinc0	equ	0xFEE
  2652                           wreg	equ	0xFE8
  2653                           indf1	equ	0xFE7
  2654                           postdec1	equ	0xFE5
  2655                           fsr1h	equ	0xFE2
  2656                           fsr1l	equ	0xFE1
  2657                           indf2	equ	0xFDF
  2658                           postinc2	equ	0xFDE
  2659                           postdec2	equ	0xFDD
  2660                           plusw2	equ	0xFDB
  2661                           fsr2h	equ	0xFDA
  2662                           fsr2l	equ	0xFD9
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function ___lwdiv *****************
  2666 ;; Defined at:
  2667 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  dividend        2   39[COMRAM] unsigned int 
  2670 ;;  divisor         2   41[COMRAM] unsigned int 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;  quotient        2   43[COMRAM] unsigned int 
  2673 ;;  counter         1   45[COMRAM] unsigned char 
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  2   39[COMRAM] unsigned int 
  2676 ;; Registers used:
  2677 ;;		wreg, status,2, status,0
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2683 ;;      Params:         4       0       0       0
  2684 ;;      Locals:         3       0       0       0
  2685 ;;      Temps:          0       0       0       0
  2686 ;;      Totals:         7       0       0       0
  2687 ;;Total ram usage:        7 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    2
  2690 ;; This function calls:
  2691 ;;		Nothing
  2692 ;; This function is called by:
  2693 ;;		_sprintf
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text11
  2698  000D60                     __ptext11:
  2699                           	opt stack 0
  2700  000D60                     ___lwdiv:
  2701                           	opt stack 26
  2702                           
  2703                           ;incstack = 0
  2704  000D60  0E00               	movlw	0
  2705  000D62  6E2D               	movwf	___lwdiv@quotient+1,c
  2706  000D64  0E00               	movlw	0
  2707  000D66  6E2C               	movwf	___lwdiv@quotient,c
  2708  000D68  502A               	movf	___lwdiv@divisor,w,c
  2709  000D6A  102B               	iorwf	___lwdiv@divisor+1,w,c
  2710  000D6C  B4D8               	btfsc	status,2,c
  2711  000D6E  D01C               	goto	l551
  2712  000D70  0E01               	movlw	1
  2713  000D72  6E2E               	movwf	___lwdiv@counter,c
  2714  000D74  D004               	goto	l546
  2715  000D76  90D8               	bcf	status,0,c
  2716  000D78  362A               	rlcf	___lwdiv@divisor,f,c
  2717  000D7A  362B               	rlcf	___lwdiv@divisor+1,f,c
  2718  000D7C  2A2E               	incf	___lwdiv@counter,f,c
  2719  000D7E                     l546:
  2720  000D7E  AE2B               	btfss	___lwdiv@divisor+1,7,c
  2721  000D80  D7FA               	goto	l547
  2722  000D82                     u340:
  2723  000D82  90D8               	bcf	status,0,c
  2724  000D84  362C               	rlcf	___lwdiv@quotient,f,c
  2725  000D86  362D               	rlcf	___lwdiv@quotient+1,f,c
  2726  000D88  502A               	movf	___lwdiv@divisor,w,c
  2727  000D8A  5C28               	subwf	___lwdiv@dividend,w,c
  2728  000D8C  502B               	movf	___lwdiv@divisor+1,w,c
  2729  000D8E  5829               	subwfb	___lwdiv@dividend+1,w,c
  2730  000D90  A0D8               	btfss	status,0,c
  2731  000D92  D005               	goto	l550
  2732  000D94  502A               	movf	___lwdiv@divisor,w,c
  2733  000D96  5E28               	subwf	___lwdiv@dividend,f,c
  2734  000D98  502B               	movf	___lwdiv@divisor+1,w,c
  2735  000D9A  5A29               	subwfb	___lwdiv@dividend+1,f,c
  2736  000D9C  802C               	bsf	___lwdiv@quotient,0,c
  2737  000D9E                     l550:
  2738  000D9E  90D8               	bcf	status,0,c
  2739  000DA0  322B               	rrcf	___lwdiv@divisor+1,f,c
  2740  000DA2  322A               	rrcf	___lwdiv@divisor,f,c
  2741  000DA4  2E2E               	decfsz	___lwdiv@counter,f,c
  2742  000DA6  D7ED               	goto	u340
  2743  000DA8                     l551:
  2744  000DA8  C02C  F028         	movff	___lwdiv@quotient,?___lwdiv
  2745  000DAC  C02D  F029         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2746  000DB0  0012               	return		;funcret
  2747  000DB2                     __end_of___lwdiv:
  2748                           	opt stack 0
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           prodh	equ	0xFF4
  2754                           prodl	equ	0xFF3
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           indf1	equ	0xFE7
  2758                           postdec1	equ	0xFE5
  2759                           fsr1h	equ	0xFE2
  2760                           fsr1l	equ	0xFE1
  2761                           indf2	equ	0xFDF
  2762                           postinc2	equ	0xFDE
  2763                           postdec2	equ	0xFDD
  2764                           plusw2	equ	0xFDB
  2765                           fsr2h	equ	0xFDA
  2766                           fsr2l	equ	0xFD9
  2767                           status	equ	0xFD8
  2768                           
  2769 ;; *************** function ___wmul *****************
  2770 ;; Defined at:
  2771 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;  multiplier      2   39[COMRAM] unsigned int 
  2774 ;;  multiplicand    2   41[COMRAM] unsigned int 
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;  product         2   43[COMRAM] unsigned int 
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  2   39[COMRAM] unsigned int 
  2779 ;; Registers used:
  2780 ;;		wreg, status,2, status,0, prodl, prodh
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2786 ;;      Params:         4       0       0       0
  2787 ;;      Locals:         2       0       0       0
  2788 ;;      Temps:          0       0       0       0
  2789 ;;      Totals:         6       0       0       0
  2790 ;;Total ram usage:        6 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    2
  2793 ;; This function calls:
  2794 ;;		Nothing
  2795 ;; This function is called by:
  2796 ;;		_FillServoPositionString
  2797 ;;		_InitServos
  2798 ;;		_RotatePositions
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801                           
  2802                           	psect	text12
  2803  000ECA                     __ptext12:
  2804                           	opt stack 0
  2805  000ECA                     ___wmul:
  2806                           	opt stack 27
  2807                           
  2808                           ;incstack = 0
  2809  000ECA  5028               	movf	___wmul@multiplier,w,c
  2810  000ECC  022A               	mulwf	___wmul@multiplicand,c
  2811  000ECE  CFF3 F02C          	movff	prodl,___wmul@product
  2812  000ED2  CFF4 F02D          	movff	prodh,___wmul@product+1
  2813  000ED6  5028               	movf	___wmul@multiplier,w,c
  2814  000ED8  022B               	mulwf	___wmul@multiplicand+1,c
  2815  000EDA  50F3               	movf	prodl,w,c
  2816  000EDC  262D               	addwf	___wmul@product+1,f,c
  2817  000EDE  5029               	movf	___wmul@multiplier+1,w,c
  2818  000EE0  022A               	mulwf	___wmul@multiplicand,c
  2819  000EE2  50F3               	movf	prodl,w,c
  2820  000EE4  262D               	addwf	___wmul@product+1,f,c
  2821  000EE6  C02C  F028         	movff	___wmul@product,?___wmul
  2822  000EEA  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  2823  000EEE  0012               	return	
  2824  000EF0                     __end_of___wmul:
  2825                           	opt stack 0
  2826                           tblptru	equ	0xFF8
  2827                           tblptrh	equ	0xFF7
  2828                           tblptrl	equ	0xFF6
  2829                           tablat	equ	0xFF5
  2830                           prodh	equ	0xFF4
  2831                           prodl	equ	0xFF3
  2832                           postinc0	equ	0xFEE
  2833                           wreg	equ	0xFE8
  2834                           indf1	equ	0xFE7
  2835                           postdec1	equ	0xFE5
  2836                           fsr1h	equ	0xFE2
  2837                           fsr1l	equ	0xFE1
  2838                           indf2	equ	0xFDF
  2839                           postinc2	equ	0xFDE
  2840                           postdec2	equ	0xFDD
  2841                           plusw2	equ	0xFDB
  2842                           fsr2h	equ	0xFDA
  2843                           fsr2l	equ	0xFD9
  2844                           status	equ	0xFD8
  2845                           
  2846 ;; *************** function _EmptyMovementString *****************
  2847 ;; Defined at:
  2848 ;;		line 237 in file "main.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;		None
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;		None
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2862 ;;      Params:         0       0       0       0
  2863 ;;      Locals:         0       0       0       0
  2864 ;;      Temps:          0       0       0       0
  2865 ;;      Totals:         0       0       0       0
  2866 ;;Total ram usage:        0 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    3
  2869 ;; This function calls:
  2870 ;;		_memset
  2871 ;; This function is called by:
  2872 ;;		_FillServoPositionString
  2873 ;;		_InitServos
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text13
  2878  000F12                     __ptext13:
  2879                           	opt stack 0
  2880  000F12                     _EmptyMovementString:
  2881                           	opt stack 26
  2882                           
  2883                           ;main.c: 238: memset(&movementString[0], 0, sizeof(movementString));
  2884                           
  2885                           ;incstack = 0
  2886  000F12  0E00               	movlw	low _movementString
  2887  000F14  6E28               	movwf	memset@p1,c
  2888  000F16  0E01               	movlw	high _movementString
  2889  000F18  6E29               	movwf	memset@p1+1,c
  2890  000F1A  0E00               	movlw	0
  2891  000F1C  6E2B               	movwf	memset@c+1,c
  2892  000F1E  0E00               	movlw	0
  2893  000F20  6E2A               	movwf	memset@c,c
  2894  000F22  0E01               	movlw	1
  2895  000F24  6E2D               	movwf	memset@n+1,c
  2896  000F26  0E00               	movlw	0
  2897  000F28  6E2C               	movwf	memset@n,c
  2898  000F2A  EC4F  F007         	call	_memset	;wreg free
  2899  000F2E  0012               	return		;funcret
  2900  000F30                     __end_of_EmptyMovementString:
  2901                           	opt stack 0
  2902                           tblptru	equ	0xFF8
  2903                           tblptrh	equ	0xFF7
  2904                           tblptrl	equ	0xFF6
  2905                           tablat	equ	0xFF5
  2906                           prodh	equ	0xFF4
  2907                           prodl	equ	0xFF3
  2908                           postinc0	equ	0xFEE
  2909                           wreg	equ	0xFE8
  2910                           indf1	equ	0xFE7
  2911                           postdec1	equ	0xFE5
  2912                           fsr1h	equ	0xFE2
  2913                           fsr1l	equ	0xFE1
  2914                           indf2	equ	0xFDF
  2915                           postinc2	equ	0xFDE
  2916                           postdec2	equ	0xFDD
  2917                           plusw2	equ	0xFDB
  2918                           fsr2h	equ	0xFDA
  2919                           fsr2l	equ	0xFD9
  2920                           status	equ	0xFD8
  2921                           
  2922 ;; *************** function _memset *****************
  2923 ;; Defined at:
  2924 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memset.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  p1              2   39[COMRAM] PTR void 
  2927 ;;		 -> movementString(256), 
  2928 ;;  c               2   41[COMRAM] int 
  2929 ;;  n               2   43[COMRAM] unsigned int 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  p               2   45[COMRAM] PTR unsigned char 
  2932 ;;		 -> movementString(256), 
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  2   39[COMRAM] PTR void 
  2935 ;; Registers used:
  2936 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2942 ;;      Params:         6       0       0       0
  2943 ;;      Locals:         2       0       0       0
  2944 ;;      Temps:          0       0       0       0
  2945 ;;      Totals:         8       0       0       0
  2946 ;;Total ram usage:        8 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    2
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		_EmptyMovementString
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text14
  2957  000E9E                     __ptext14:
  2958                           	opt stack 0
  2959  000E9E                     _memset:
  2960                           	opt stack 26
  2961                           
  2962                           ;incstack = 0
  2963  000E9E  C028  F02E         	movff	memset@p1,memset@p
  2964  000EA2  C029  F02F         	movff	memset@p1+1,memset@p+1
  2965  000EA6  D008               	goto	l570
  2966  000EA8                     l1115:
  2967  000EA8  C02E  FFD9         	movff	memset@p,fsr2l
  2968  000EAC  C02F  FFDA         	movff	memset@p+1,fsr2h
  2969  000EB0  C02A  FFDF         	movff	memset@c,indf2
  2970  000EB4  4A2E               	infsnz	memset@p,f,c
  2971  000EB6  2A2F               	incf	memset@p+1,f,c
  2972  000EB8                     l570:
  2973  000EB8  062C               	decf	memset@n,f,c
  2974  000EBA  A0D8               	btfss	status,0,c
  2975  000EBC  062D               	decf	memset@n+1,f,c
  2976  000EBE  282C               	incf	memset@n,w,c
  2977  000EC0  E1F3               	bnz	l1115
  2978  000EC2  282D               	incf	memset@n+1,w,c
  2979  000EC4  B4D8               	btfsc	status,2,c
  2980  000EC6  0012               	return	
  2981  000EC8  D7EF               	goto	l571
  2982  000ECA                     __end_of_memset:
  2983                           	opt stack 0
  2984                           tblptru	equ	0xFF8
  2985                           tblptrh	equ	0xFF7
  2986                           tblptrl	equ	0xFF6
  2987                           tablat	equ	0xFF5
  2988                           prodh	equ	0xFF4
  2989                           prodl	equ	0xFF3
  2990                           postinc0	equ	0xFEE
  2991                           wreg	equ	0xFE8
  2992                           indf1	equ	0xFE7
  2993                           postdec1	equ	0xFE5
  2994                           fsr1h	equ	0xFE2
  2995                           fsr1l	equ	0xFE1
  2996                           indf2	equ	0xFDF
  2997                           postinc2	equ	0xFDE
  2998                           postdec2	equ	0xFDD
  2999                           plusw2	equ	0xFDB
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function _ConfigureOscillator *****************
  3005 ;; Defined at:
  3006 ;;		line 23 in file "system.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;		None
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;		None
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      void 
  3013 ;; Registers used:
  3014 ;;		wreg, status,2
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3020 ;;      Params:         0       0       0       0
  3021 ;;      Locals:         0       0       0       0
  3022 ;;      Temps:          0       0       0       0
  3023 ;;      Totals:         0       0       0       0
  3024 ;;Total ram usage:        0 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    2
  3027 ;; This function calls:
  3028 ;;		Nothing
  3029 ;; This function is called by:
  3030 ;;		_main
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           	psect	text15
  3035  000F30                     __ptext15:
  3036                           	opt stack 0
  3037  000F30                     _ConfigureOscillator:
  3038                           	opt stack 28
  3039                           
  3040                           ;system.c: 25: OSCTUNEbits.INTSRC = 0b1;
  3041                           
  3042                           ;incstack = 0
  3043  000F30  8E9B               	bsf	3995,7,c	;volatile
  3044                           
  3045                           ;system.c: 26: OSCTUNEbits.PLLEN = 0b0;
  3046  000F32  9C9B               	bcf	3995,6,c	;volatile
  3047                           
  3048                           ;system.c: 27: OSCTUNEbits.TUN = 0b00000;
  3049  000F34  909B               	bcf	3995,0,c	;volatile
  3050  000F36  929B               	bcf	3995,1,c	;volatile
  3051  000F38  949B               	bcf	3995,2,c	;volatile
  3052  000F3A  969B               	bcf	3995,3,c	;volatile
  3053  000F3C  989B               	bcf	3995,4,c	;volatile
  3054                           
  3055                           ;system.c: 28: OSCCONbits.IDLEN = 0b0;
  3056  000F3E  9ED3               	bcf	4051,7,c	;volatile
  3057                           
  3058                           ;system.c: 29: OSCCONbits.IRCF = 0b101;
  3059  000F40  50D3               	movf	4051,w,c	;volatile
  3060  000F42  0B8F               	andlw	-113
  3061  000F44  0950               	iorlw	80
  3062  000F46  6ED3               	movwf	4051,c	;volatile
  3063  000F48  0012               	return		;funcret
  3064  000F4A                     __end_of_ConfigureOscillator:
  3065                           	opt stack 0
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           prodh	equ	0xFF4
  3071                           prodl	equ	0xFF3
  3072                           postinc0	equ	0xFEE
  3073                           wreg	equ	0xFE8
  3074                           indf1	equ	0xFE7
  3075                           postdec1	equ	0xFE5
  3076                           fsr1h	equ	0xFE2
  3077                           fsr1l	equ	0xFE1
  3078                           indf2	equ	0xFDF
  3079                           postinc2	equ	0xFDE
  3080                           postdec2	equ	0xFDD
  3081                           plusw2	equ	0xFDB
  3082                           fsr2h	equ	0xFDA
  3083                           fsr2l	equ	0xFD9
  3084                           status	equ	0xFD8
  3085                           
  3086 ;; *************** function _low_isr *****************
  3087 ;; Defined at:
  3088 ;;		line 67 in file "interrupts.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;		None
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;		None
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  1    wreg      void 
  3095 ;; Registers used:
  3096 ;;		None
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3102 ;;      Params:         0       0       0       0
  3103 ;;      Locals:         0       0       0       0
  3104 ;;      Temps:         21       0       0       0
  3105 ;;      Totals:        21       0       0       0
  3106 ;;Total ram usage:       21 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    1
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		Interrupt level 1
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	intcodelo
  3117  000018                     __pintcodelo:
  3118                           	opt stack 0
  3119  000018                     _low_isr:
  3120                           	opt stack 26
  3121                           
  3122                           ;incstack = 0
  3123  000018  8037               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3124  00001A  CFD8 F013          	movff	status,??_low_isr
  3125  00001E  CFE8 F014          	movff	wreg,??_low_isr+1
  3126  000022  CFE0 F015          	movff	bsr,??_low_isr+2
  3127  000026  CFFA F016          	movff	pclath,??_low_isr+3
  3128  00002A  CFFB F017          	movff	pclatu,??_low_isr+4
  3129  00002E  CFE9 F018          	movff	fsr0l,??_low_isr+5
  3130  000032  CFEA F019          	movff	fsr0h,??_low_isr+6
  3131  000036  CFE1 F01A          	movff	fsr1l,??_low_isr+7
  3132  00003A  CFE2 F01B          	movff	fsr1h,??_low_isr+8
  3133  00003E  CFD9 F01C          	movff	fsr2l,??_low_isr+9
  3134  000042  CFDA F01D          	movff	fsr2h,??_low_isr+10
  3135  000046  CFF3 F01E          	movff	prodl,??_low_isr+11
  3136  00004A  CFF4 F01F          	movff	prodh,??_low_isr+12
  3137  00004E  CFF6 F020          	movff	tblptrl,??_low_isr+13
  3138  000052  CFF7 F021          	movff	tblptrh,??_low_isr+14
  3139  000056  CFF8 F022          	movff	tblptru,??_low_isr+15
  3140  00005A  CFF5 F023          	movff	tablat,??_low_isr+16
  3141  00005E  C037  F024         	movff	btemp,??_low_isr+17
  3142  000062  C038  F025         	movff	btemp+1,??_low_isr+18
  3143  000066  C039  F026         	movff	btemp+2,??_low_isr+19
  3144  00006A  C03A  F027         	movff	btemp+3,??_low_isr+20
  3145  00006E  C027  F03A         	movff	??_low_isr+20,btemp+3
  3146  000072  C026  F039         	movff	??_low_isr+19,btemp+2
  3147  000076  C025  F038         	movff	??_low_isr+18,btemp+1
  3148  00007A  C024  F037         	movff	??_low_isr+17,btemp
  3149  00007E  C023  FFF5         	movff	??_low_isr+16,tablat
  3150  000082  C022  FFF8         	movff	??_low_isr+15,tblptru
  3151  000086  C021  FFF7         	movff	??_low_isr+14,tblptrh
  3152  00008A  C020  FFF6         	movff	??_low_isr+13,tblptrl
  3153  00008E  C01F  FFF4         	movff	??_low_isr+12,prodh
  3154  000092  C01E  FFF3         	movff	??_low_isr+11,prodl
  3155  000096  C01D  FFDA         	movff	??_low_isr+10,fsr2h
  3156  00009A  C01C  FFD9         	movff	??_low_isr+9,fsr2l
  3157  00009E  C01B  FFE2         	movff	??_low_isr+8,fsr1h
  3158  0000A2  C01A  FFE1         	movff	??_low_isr+7,fsr1l
  3159  0000A6  C019  FFEA         	movff	??_low_isr+6,fsr0h
  3160  0000AA  C018  FFE9         	movff	??_low_isr+5,fsr0l
  3161  0000AE  C017  FFFB         	movff	??_low_isr+4,pclatu
  3162  0000B2  C016  FFFA         	movff	??_low_isr+3,pclath
  3163  0000B6  C015  FFE0         	movff	??_low_isr+2,bsr
  3164  0000BA  C014  FFE8         	movff	??_low_isr+1,wreg
  3165  0000BE  C013  FFD8         	movff	??_low_isr,status
  3166  0000C2  9037               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3167  0000C4  0010               	retfie	
  3168  0000C6                     __end_of_low_isr:
  3169                           	opt stack 0
  3170                           pclatu	equ	0xFFB
  3171                           pclath	equ	0xFFA
  3172                           tblptru	equ	0xFF8
  3173                           tblptrh	equ	0xFF7
  3174                           tblptrl	equ	0xFF6
  3175                           tablat	equ	0xFF5
  3176                           prodh	equ	0xFF4
  3177                           prodl	equ	0xFF3
  3178                           postinc0	equ	0xFEE
  3179                           fsr0h	equ	0xFEA
  3180                           fsr0l	equ	0xFE9
  3181                           wreg	equ	0xFE8
  3182                           indf1	equ	0xFE7
  3183                           postdec1	equ	0xFE5
  3184                           fsr1h	equ	0xFE2
  3185                           fsr1l	equ	0xFE1
  3186                           bsr	equ	0xFE0
  3187                           indf2	equ	0xFDF
  3188                           postinc2	equ	0xFDE
  3189                           postdec2	equ	0xFDD
  3190                           plusw2	equ	0xFDB
  3191                           fsr2h	equ	0xFDA
  3192                           fsr2l	equ	0xFD9
  3193                           status	equ	0xFD8
  3194                           
  3195 ;; *************** function _high_isr *****************
  3196 ;; Defined at:
  3197 ;;		line 27 in file "interrupts.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;		None
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;		None
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      void 
  3204 ;; Registers used:
  3205 ;;		None
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3211 ;;      Params:         0       0       0       0
  3212 ;;      Locals:         0       0       0       0
  3213 ;;      Temps:         18       0       0       0
  3214 ;;      Totals:        18       0       0       0
  3215 ;;Total ram usage:       18 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		Interrupt level 2
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	intcode
  3225  000008                     __pintcode:
  3226                           	opt stack 0
  3227  000008                     _high_isr:
  3228                           	opt stack 26
  3229                           
  3230                           ;incstack = 0
  3231  000008  8237               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3232  00000A  EDCF  F005         	call	int_func,f	;refresh shadow registers
  3233                           pclatu	equ	0xFFB
  3234                           pclath	equ	0xFFA
  3235                           tblptru	equ	0xFF8
  3236                           tblptrh	equ	0xFF7
  3237                           tblptrl	equ	0xFF6
  3238                           tablat	equ	0xFF5
  3239                           prodh	equ	0xFF4
  3240                           prodl	equ	0xFF3
  3241                           postinc0	equ	0xFEE
  3242                           fsr0h	equ	0xFEA
  3243                           fsr0l	equ	0xFE9
  3244                           wreg	equ	0xFE8
  3245                           indf1	equ	0xFE7
  3246                           postdec1	equ	0xFE5
  3247                           fsr1h	equ	0xFE2
  3248                           fsr1l	equ	0xFE1
  3249                           bsr	equ	0xFE0
  3250                           indf2	equ	0xFDF
  3251                           postinc2	equ	0xFDE
  3252                           postdec2	equ	0xFDD
  3253                           plusw2	equ	0xFDB
  3254                           fsr2h	equ	0xFDA
  3255                           fsr2l	equ	0xFD9
  3256                           status	equ	0xFD8
  3257                           
  3258                           	psect	intcode_body
  3259  000B9E                     __pintcode_body:
  3260                           	opt stack 26
  3261  000B9E                     int_func:
  3262                           	opt stack 26
  3263  000B9E  0006               	pop		; remove dummy address from shadow register refresh
  3264  000BA0  CFFA F001          	movff	pclath,??_high_isr
  3265  000BA4  CFFB F002          	movff	pclatu,??_high_isr+1
  3266  000BA8  CFE9 F003          	movff	fsr0l,??_high_isr+2
  3267  000BAC  CFEA F004          	movff	fsr0h,??_high_isr+3
  3268  000BB0  CFE1 F005          	movff	fsr1l,??_high_isr+4
  3269  000BB4  CFE2 F006          	movff	fsr1h,??_high_isr+5
  3270  000BB8  CFD9 F007          	movff	fsr2l,??_high_isr+6
  3271  000BBC  CFDA F008          	movff	fsr2h,??_high_isr+7
  3272  000BC0  CFF3 F009          	movff	prodl,??_high_isr+8
  3273  000BC4  CFF4 F00A          	movff	prodh,??_high_isr+9
  3274  000BC8  CFF6 F00B          	movff	tblptrl,??_high_isr+10
  3275  000BCC  CFF7 F00C          	movff	tblptrh,??_high_isr+11
  3276  000BD0  CFF8 F00D          	movff	tblptru,??_high_isr+12
  3277  000BD4  CFF5 F00E          	movff	tablat,??_high_isr+13
  3278  000BD8  C037  F00F         	movff	btemp,??_high_isr+14
  3279  000BDC  C038  F010         	movff	btemp+1,??_high_isr+15
  3280  000BE0  C039  F011         	movff	btemp+2,??_high_isr+16
  3281  000BE4  C03A  F012         	movff	btemp+3,??_high_isr+17
  3282  000BE8  C012  F03A         	movff	??_high_isr+17,btemp+3
  3283  000BEC  C011  F039         	movff	??_high_isr+16,btemp+2
  3284  000BF0  C010  F038         	movff	??_high_isr+15,btemp+1
  3285  000BF4  C00F  F037         	movff	??_high_isr+14,btemp
  3286  000BF8  C00E  FFF5         	movff	??_high_isr+13,tablat
  3287  000BFC  C00D  FFF8         	movff	??_high_isr+12,tblptru
  3288  000C00  C00C  FFF7         	movff	??_high_isr+11,tblptrh
  3289  000C04  C00B  FFF6         	movff	??_high_isr+10,tblptrl
  3290  000C08  C00A  FFF4         	movff	??_high_isr+9,prodh
  3291  000C0C  C009  FFF3         	movff	??_high_isr+8,prodl
  3292  000C10  C008  FFDA         	movff	??_high_isr+7,fsr2h
  3293  000C14  C007  FFD9         	movff	??_high_isr+6,fsr2l
  3294  000C18  C006  FFE2         	movff	??_high_isr+5,fsr1h
  3295  000C1C  C005  FFE1         	movff	??_high_isr+4,fsr1l
  3296  000C20  C004  FFEA         	movff	??_high_isr+3,fsr0h
  3297  000C24  C003  FFE9         	movff	??_high_isr+2,fsr0l
  3298  000C28  C002  FFFB         	movff	??_high_isr+1,pclatu
  3299  000C2C  C001  FFFA         	movff	??_high_isr,pclath
  3300  000C30  9237               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3301  000C32  0011               	retfie		f
  3302  000C34                     __end_of_high_isr:
  3303                           	opt stack 0
  3304                           pclatu	equ	0xFFB
  3305                           pclath	equ	0xFFA
  3306                           tblptru	equ	0xFF8
  3307                           tblptrh	equ	0xFF7
  3308                           tblptrl	equ	0xFF6
  3309                           tablat	equ	0xFF5
  3310                           prodh	equ	0xFF4
  3311                           prodl	equ	0xFF3
  3312                           postinc0	equ	0xFEE
  3313                           fsr0h	equ	0xFEA
  3314                           fsr0l	equ	0xFE9
  3315                           wreg	equ	0xFE8
  3316                           indf1	equ	0xFE7
  3317                           postdec1	equ	0xFE5
  3318                           fsr1h	equ	0xFE2
  3319                           fsr1l	equ	0xFE1
  3320                           bsr	equ	0xFE0
  3321                           indf2	equ	0xFDF
  3322                           postinc2	equ	0xFDE
  3323                           postdec2	equ	0xFDD
  3324                           plusw2	equ	0xFDB
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           pclatu	equ	0xFFB
  3329                           pclath	equ	0xFFA
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           prodh	equ	0xFF4
  3335                           prodl	equ	0xFF3
  3336                           postinc0	equ	0xFEE
  3337                           fsr0h	equ	0xFEA
  3338                           fsr0l	equ	0xFE9
  3339                           wreg	equ	0xFE8
  3340                           indf1	equ	0xFE7
  3341                           postdec1	equ	0xFE5
  3342                           fsr1h	equ	0xFE2
  3343                           fsr1l	equ	0xFE1
  3344                           bsr	equ	0xFE0
  3345                           indf2	equ	0xFDF
  3346                           postinc2	equ	0xFDE
  3347                           postdec2	equ	0xFDD
  3348                           plusw2	equ	0xFDB
  3349                           fsr2h	equ	0xFDA
  3350                           fsr2l	equ	0xFD9
  3351                           status	equ	0xFD8
  3352                           
  3353                           	psect	rparam
  3354  0000                     pclatu	equ	0xFFB
  3355                           pclath	equ	0xFFA
  3356                           tblptru	equ	0xFF8
  3357                           tblptrh	equ	0xFF7
  3358                           tblptrl	equ	0xFF6
  3359                           tablat	equ	0xFF5
  3360                           prodh	equ	0xFF4
  3361                           prodl	equ	0xFF3
  3362                           postinc0	equ	0xFEE
  3363                           fsr0h	equ	0xFEA
  3364                           fsr0l	equ	0xFE9
  3365                           wreg	equ	0xFE8
  3366                           indf1	equ	0xFE7
  3367                           postdec1	equ	0xFE5
  3368                           fsr1h	equ	0xFE2
  3369                           fsr1l	equ	0xFE1
  3370                           bsr	equ	0xFE0
  3371                           indf2	equ	0xFDF
  3372                           postinc2	equ	0xFDE
  3373                           postdec2	equ	0xFDD
  3374                           plusw2	equ	0xFDB
  3375                           fsr2h	equ	0xFDA
  3376                           fsr2l	equ	0xFD9
  3377                           status	equ	0xFD8
  3378                           
  3379                           	psect	temp
  3380  000037                     btemp:
  3381                           	opt stack 0
  3382  000037                     	ds	1
  3383  0000                     int$flags	set	btemp
  3384  0000                     wtemp6	set	btemp+1
  3385                           pclatu	equ	0xFFB
  3386                           pclath	equ	0xFFA
  3387                           tblptru	equ	0xFF8
  3388                           tblptrh	equ	0xFF7
  3389                           tblptrl	equ	0xFF6
  3390                           tablat	equ	0xFF5
  3391                           prodh	equ	0xFF4
  3392                           prodl	equ	0xFF3
  3393                           postinc0	equ	0xFEE
  3394                           fsr0h	equ	0xFEA
  3395                           fsr0l	equ	0xFE9
  3396                           wreg	equ	0xFE8
  3397                           indf1	equ	0xFE7
  3398                           postdec1	equ	0xFE5
  3399                           fsr1h	equ	0xFE2
  3400                           fsr1l	equ	0xFE1
  3401                           bsr	equ	0xFE0
  3402                           indf2	equ	0xFDF
  3403                           postinc2	equ	0xFDE
  3404                           postdec2	equ	0xFDD
  3405                           plusw2	equ	0xFDB
  3406                           fsr2h	equ	0xFDA
  3407                           fsr2l	equ	0xFD9
  3408                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    28
    Data        126
    BSS         256
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      54
    BANK0           160     32     158
    BANK1           256      0     256
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 126
		 -> STR_22(CODE[2]), STR_20(CODE[2]), STR_19(CODE[2]), STR_18(CODE[2]), 
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), InitServos@tmp(BANK0[5]), 
		 -> STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[6]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), FillServoPositionString@tmp(BANK0[5]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), servosets.lowerVerticalServo(BANK0[3]), servosets.upperVerticalServo(BANK0[3]), 
		 -> servosets.horizontalServo(BANK0[3]), servosets(BANK0[126]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    memset@p1	PTR void  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    memset@p	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_21(CODE[3]), STR_17(CODE[3]), STR_13(CODE[3]), STR_9(CODE[3]), 
		 -> STR_6(CODE[3]), STR_3(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 5
		 -> InitServos@tmp(BANK0[5]), FillServoPositionString@tmp(BANK0[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 

    UART_Write_String@str	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK1[256]), 


Critical Paths under _main in COMRAM

    _main->_FillServoPositionString
    _RotatePositions->___wmul
    _InitServos->_UART_Write_String
    _UART_Write_String->_strlen
    _FillServoPositionString->_sprintf
    _strcat->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _EmptyMovementString->_memset

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_FillServoPositionString
    _InitServos->_sprintf
    _FillServoPositionString->_sprintf

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   25761
                _ConfigureOscillator
            _FillServoPositionString
                         _InitServos
                    _RotatePositions
                          _UART_Init
                  _UART_Write_String
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            2     2      0       0
                                             39 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RotatePositions                                      4     4      0    3463
                                             45 COMRAM     4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _InitServos                                           7     7      0   11013
                                             13 BANK0      7     7      0
                _EmptyMovementString
                  _UART_Write_String
                             ___wmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (1) _UART_Write_String                                    8     6      2     650
                                             45 COMRAM     8     6      2
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     166
                                             39 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _FillServoPositionString                             21    21      0   10635
                                             52 COMRAM     2     2      0
                                             13 BANK0     19    19      0
                _EmptyMovementString
                             ___wmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4    4354
                                             45 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    2014
                                             51 COMRAM     1     1      0
                                              0 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                             46 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             39 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3351
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _EmptyMovementString                                  0     0      0     324
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     324
                                             39 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             21    21      0       0
                                             18 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _FillServoPositionString
     _EmptyMovementString
       _memset
     ___wmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
     _strcat
       ___wmul (ARG)
   _InitServos
     _EmptyMovementString
       _memset
     _UART_Write_String
       _UART_Write
       _strlen
     ___wmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
     _strcat
       ___wmul (ARG)
   _RotatePositions
     ___wmul
   _UART_Init
   _UART_Write_String
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0     100       6      100.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     20      9E       4       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      36       1       57.4%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1D4       9        0.0%
DATA                 0      0     1D4      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed Oct 04 22:16:49 2017

                                          l65 0EFC                                            l74 0D4A  
                                          l75 0D28                                            bsr 000FE0  
                         ___wmul@multiplicand 002A                                   __CFG_BORV$3 000000  
                  __size_of_UART_Write_String 0056                                  __CFG_CP0$OFF 000000  
                                __CFG_CP1$OFF 000000                                           l102 0B70  
                                         l103 0B98                                           l131 09FE  
                                         l124 09BA                                           l133 0A26  
                                         l125 09D4                                           l137 0A72  
                                         l138 0ACC                                           l139 0A78  
                                         l700 0CD0                                           l550 0D9E  
                                         l551 0DA8                                           l560 0E22  
                                         l561 0E2C                                           l705 0E44  
                                         l570 0EB8                                           l546 0D7E  
                                         l706 0E40                                           l571 0EA8  
                                         l547 0D76                                           l556 0E0A  
                                         l557 0E02                                           l696 0CC0  
                                         l697 0CBC                                           l699 0CD8  
                                __CFG_CPB$OFF 000000                                           u340 0D82  
                                         u500 0AD4                                           u420 0D00  
                                         u510 0AEC                                           u370 0E0E  
                                __CFG_CPD$OFF 000000                                           u427 0CF6  
                                         u550 06D8                                           u480 0A56  
                                         u597 0E90                              RotatePositions@i 0030  
                                         wreg 000FE8                                  __CFG_IESO$ON 000000  
                       ??_EmptyMovementString 0030                                  __CFG_LVP$OFF 000000  
                                __CFG_WDT$OFF 000000                                          l1115 0EA8  
                                        l1213 0A2A                                          l1109 0F4C  
                                        l1313 0342                                          l1255 0700  
                                        l1375 0B70                                          l1367 0B02  
                                        STR_1 0326                                          STR_2 0328  
                                        STR_3 0323                                          STR_4 0326  
                                        STR_5 0328                                          STR_6 0323  
                                        STR_7 0326                                          STR_8 0328  
                                        STR_9 0323                                          _TRMT 007D61  
                                        _main 0EF0                                          fsr0h 000FEA  
                                        fsr1h 000FE2                                          fsr2h 000FDA  
                                        fsr0l 000FE9                                          indf1 000FE7  
                                        indf2 000FDF                                          fsr1l 000FE1  
                                        fsr2l 000FD9                                          btemp 0037  
                                        prodh 000FF4                                          prodl 000FF3  
                                        start 00C6  FillServoPositionString@newHorizontalPosition 00ED  
                               __CFG_MCLRE$ON 000000                                  ___param_bank 000000  
                    __size_of_RotatePositions 00A4                                         ?_main 0001  
                                       STR_10 031D                                         STR_11 0326  
                                       STR_20 0328                                         STR_12 0328  
                                       STR_21 0323                                         STR_13 0323  
                                       STR_22 0321                                         STR_14 0321  
                                       STR_15 0326                                         STR_16 0328  
                                       STR_17 0323                                         STR_18 0321  
                                       STR_19 0326                               __end_of___lwdiv 0DB2  
                             __end_of___lwmod 0E36              __size_of_FillServoPositionString 03C2  
                                       _SPBRG 000FAF                                         _TXREG 000FAD  
                         _ConfigureOscillator 0F30                                 __CFG_PWRT$OFF 000000  
                               __CFG_WRT0$OFF 000000                                 __CFG_WRT1$OFF 000000  
                              __CFG_EBTR0$OFF 000000                                __CFG_FCMEN$OFF 000000  
                              __CFG_EBTR1$OFF 000000                                   ?_UART_Write 0001  
                          __size_of_UART_Init 002E                                 __CFG_WRTB$OFF 000000  
                               __CFG_WRTC$OFF 000000                                 __CFG_WRTD$OFF 000000  
                              __CFG_EBTRB$OFF 000000                               __end_of_dpowers 031B  
                             __end_of_low_isr 00C6                                         pclath 000FFA  
                                       tablat 000FF5                                   InitServos@i 00F0  
                                       plusw2 000FDB                                         status 000FD8  
                                       wtemp6 0038                               __end_of_sprintf 0AFA  
                              __CFG_PBADEN$ON 000000                          ?_ConfigureOscillator 0001  
                             __initialization 0DB2                                    _InitServos 06EE  
                                __end_of_main 0F12        FillServoPositionString@deltaHorizontal 00EB  
                                      ??_main 0037                                 __activetblptr 000002  
                             __CFG_BBSIZ$1024 000000                                        _SPBRGH 000FB0  
                       ??_ConfigureOscillator 0028                             __end_of_SERVOSETS 031D  
                              __CFG_XINST$OFF 000000                             __end_of_UART_Init 0E9E  
                            __end_of_high_isr 0C34                           __size_of_UART_Write 000C  
                                      ___wmul 0ECA                                __CFG_STVREN$ON 000000  
                                   ??___lwdiv 002C                                     ??___lwmod 0033  
                                      _memset 0E9E                                        clear_0 0DDA  
                                      _strcat 0CB2                                        _strlen 0E36  
                           ??_RotatePositions 002E                               __CFG_BOREN$BOHW 000000  
                                __mediumconst 0000                                     ??_low_isr 0013  
                                      tblptrh 000FF7                                        tblptrl 000FF6  
                                      tblptru 000FF8                                     ??_sprintf 0034  
                                  __accesstop 0060                       __end_of__initialization 0DE6  
                  FillServoPositionString@tmp 00F3                                 ___rparam_used 000001  
                              __pcstackCOMRAM 0001                      FillServoPositionString@i 00FC  
                                 ?_InitServos 0001                                  __pidataBANK0 0C34  
                     _FillServoPositionString 032C                               __CFG_OSC$IRCIO7 000000  
                                  __pbssBANK1 0100                  UART_Write_String@arrayLength 0031  
                                     ?___wmul 0028                                       ?_memset 0028  
                                     ?_strcat 002E                                       ?_strlen 0028  
                 __end_of_EmptyMovementString 0F30                                  ??_UART_Write 0028  
                         __size_of_InitServos 02C0                                     ?_high_isr 0001  
                                     __Hparam 0000                                       __Lparam 0000  
                             __size_of___wmul 0026                            __end_of_UART_Write 0F56  
                   ??_FillServoPositionString 0035                                       ___lwdiv 0D60  
                                     ___lwmod 0DF4                                  __psmallconst 0300  
                                     __pcinit 0DB2                               __size_of_memset 002C  
                                     __ramtop 0300                                       __ptext0 0EF0  
                                     __ptext1 0E70                                       __ptext2 0AFA  
                                     __ptext3 06EE                                       __ptext4 0D0A  
                                     __ptext5 0E36                                       __ptext6 0F4A  
                                     __ptext7 032C                                       __ptext8 0CB2  
                                     __ptext9 09AE                               __size_of_strcat 0058  
                             __size_of_strlen 003A                                       _dpowers 0311  
                                     _low_isr 0018                                       _sprintf 09AE  
                                  ??_high_isr 0001                                __pintcode_body 0B9E  
                        end_of_initialization 0DE6                                       memset@c 002A  
                                     memset@n 002C                                       memset@p 002E  
                               __Lmediumconst 0000                                       int_func 0B9E  
                               InitServos@tmp 00EB                               _RotatePositions 0AFA  
                                   _RCSTAbits 000FAB                             __end_of_positions 0311  
                                     postdec1 000FE5                                       postdec2 000FDD  
                                     postinc0 000FEE                                       postinc2 000FDE  
                                   _SERVOSETS 031B                                       strlen@s 0028  
                                   _UART_Init 0E70                                UART_Write@data 0028  
                                   _TRISCbits 000F94                   __end_of_ConfigureOscillator 0F4A  
                              _movementString 0100                                     _TXSTAbits 000FAC  
                                ??_InitServos 0036                                __end_of___wmul 0EF0  
                                 _BAUDCONbits 000FB8                                    ?_UART_Init 0001  
                              __end_of_memset 0ECA                                __end_of_strcat 0D0A  
                              __end_of_strlen 0E70                           start_initialization 0DB2  
                          __end_of_InitServos 09AE                       __end_of_RotatePositions 0B9E  
                                    ??___wmul 002C                                   __pdataBANK0 0060  
                            __CFG_LPT1OSC$OFF 000000                                      ??_memset 002E  
                _FillServoPositionString$1046 00F8                  _FillServoPositionString$1047 00FA  
                                    ??_strcat 0032                                      ??_strlen 002A  
                               __pcstackBANK0 00DE                             __size_of_high_isr 0C2C  
                                 sprintf@flag 00E6    FillServoPositionString@newVerticalPosition 00F1  
                                 sprintf@prec 00E7                              ___lwdiv@dividend 0028  
                                   __pintcode 0008                                      ?___lwdiv 0028  
                                    ?___lwmod 002F                                   __pintcodelo 0018  
                                 ??_UART_Init 0028                                   __smallconst 0300  
                                    ?_low_isr 0001                              ___lwdiv@quotient 002C  
                __size_of_EmptyMovementString 001E                                      ?_sprintf 00DE  
                            ?_RotatePositions 0001                                ___wmul@product 002C  
                            __CFG_WDTPS$32768 000000                                     _servosets 0060  
                                   _positions 0301                          UART_Write_String@str 002E  
                           ___wmul@multiplier 0028          FillServoPositionString@deltaVertical 00EF  
                                   copy_data0 0DC6                                      __Hrparam 0000  
                    ?_FillServoPositionString 0001                                      __Lrparam 0000  
                            __size_of___lwdiv 0052                              __size_of___lwmod 0042  
                           _UART_Write_String 0D0A                                    sprintf@val 00E8  
                                  strcat@from 0030                            ?_UART_Write_String 002E  
                             ___lwdiv@divisor 002A                               ___lwdiv@counter 002E  
                            __size_of_low_isr 00AE                                      __ptext10 0DF4  
                                    __ptext11 0D60                                      __ptext12 0ECA  
                                    __ptext13 0F12                                      __ptext14 0E9E  
                                    __ptext15 0F30                                      _high_isr 0008  
                            __size_of_sprintf 014C                           ??_UART_Write_String 0030  
                               __size_of_main 0022                  __size_of_ConfigureOscillator 001A  
                                    int$flags 0037                     __end_of_UART_Write_String 0D60  
                                 _OSCTUNEbits 000F9B                                      memset@p1 0028  
                                    intlevel1 0000                                      intlevel2 0000  
                                   sprintf@ap 00E4                                     sprintf@sp 00DE  
             __end_of_FillServoPositionString 06EE                              ___lwmod@dividend 002F  
                                  _OSCCONbits 000FD3                            UART_Write_String@a 0035  
                          UART_Write_String@i 0033                           _EmptyMovementString 0F12  
                                    sprintf@c 00EA                                      sprintf@f 00E0  
                                    strcat@cp 0032                                      strcat@to 002E  
                             ___lwmod@divisor 0031                                      strlen@cp 002C  
                             ___lwmod@counter 0033                                    _UART_Write 0F4A  
                        ?_EmptyMovementString 0001  
