

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Oct 07 01:06:10 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           ; Version 1.44
    37                           ; Generated 14/09/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F2480 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	idataBANK1
    72  000C9E                     __pidataBANK1:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _servosets
    76  000C9E  0000               	dw	0
    77  000CA0  31                 	db	49
    78  000CA1  32                 	db	50
    79  000CA2  00                 	db	0
    80  000CA3  31                 	db	49
    81  000CA4  00                 	db	0
    82  000CA5  00                 	db	0
    83  000CA6  32                 	db	50
    84  000CA7  00                 	db	0
    85  000CA8  00                 	db	0
    86  000CA9  06A4               	dw	1700
    87  000CAB  0898               	dw	2200
    88  000CAD  0708               	dw	1800
    89  000CAF  0001               	dw	1
    90  000CB1  0001               	dw	1
    91  000CB3  0002               	dw	2
    92  000CB5  34                 	db	52
    93  000CB6  00                 	db	0
    94  000CB7  00                 	db	0
    95  000CB8  35                 	db	53
    96  000CB9  00                 	db	0
    97  000CBA  00                 	db	0
    98  000CBB  36                 	db	54
    99  000CBC  00                 	db	0
   100  000CBD  00                 	db	0
   101  000CBE  0546               	dw	1350
   102  000CC0  0640               	dw	1600
   103  000CC2  06A4               	dw	1700
   104  000CC4  0001               	dw	1
   105  000CC6  0001               	dw	1
   106  000CC8  0000               	dw	0
   107  000CCA  38                 	db	56
   108  000CCB  00                 	db	0
   109  000CCC  00                 	db	0
   110  000CCD  39                 	db	57
   111  000CCE  00                 	db	0
   112  000CCF  00                 	db	0
   113  000CD0  31                 	db	49
   114  000CD1  30                 	db	48
   115  000CD2  00                 	db	0
   116  000CD3  03E8               	dw	1000
   117  000CD5  0640               	dw	1600
   118  000CD7  0708               	dw	1800
   119  000CD9  0001               	dw	1
   120  000CDB  0001               	dw	1
   121  000CDD  0002               	dw	2
   122  000CDF  31                 	db	49
   123  000CE0  36                 	db	54
   124  000CE1  00                 	db	0
   125  000CE2  31                 	db	49
   126  000CE3  37                 	db	55
   127  000CE4  00                 	db	0
   128  000CE5  31                 	db	49
   129  000CE6  38                 	db	56
   130  000CE7  00                 	db	0
   131  000CE8  0640               	dw	1600
   132  000CEA  04B0               	dw	1200
   133  000CEC  05DC               	dw	1500
   134  000CEE  FFFF               	dw	65535
   135  000CF0  FFFF               	dw	65535
   136  000CF2  0000               	dw	0
   137  000CF4  32                 	db	50
   138  000CF5  30                 	db	48
   139  000CF6  00                 	db	0
   140  000CF7  32                 	db	50
   141  000CF8  31                 	db	49
   142  000CF9  00                 	db	0
   143  000CFA  32                 	db	50
   144  000CFB  32                 	db	50
   145  000CFC  00                 	db	0
   146  000CFD  0834               	dw	2100
   147  000CFF  0514               	dw	1300
   148  000D01  03E8               	dw	1000
   149  000D03  FFFF               	dw	65535
   150  000D05  FFFF               	dw	65535
   151  000D07  0002               	dw	2
   152  000D09  32                 	db	50
   153  000D0A  34                 	db	52
   154  000D0B  00                 	db	0
   155  000D0C  32                 	db	50
   156  000D0D  35                 	db	53
   157  000D0E  00                 	db	0
   158  000D0F  32                 	db	50
   159  000D10  36                 	db	54
   160  000D11  00                 	db	0
   161  000D12  076C               	dw	1900
   162  000D14  0578               	dw	1400
   163  000D16  03E8               	dw	1000
   164  000D18  FFFF               	dw	65535
   165  000D1A  FFFF               	dw	65535
   166                           
   167                           	psect	smallconst
   168  000300                     __psmallconst:
   169                           	opt stack 0
   170  000300  00                 	db	0
   171  000301                     _positions:
   172                           	opt stack 0
   173  000301  0000               	dw	0
   174  000303  0000               	dw	0
   175  000305  00C8               	dw	200
   176  000307  0000               	dw	0
   177  000309  0000               	dw	0
   178  00030B  00C8               	dw	200
   179  00030D  0000               	dw	0
   180  00030F  FF38               	dw	65336
   181  000311                     __end_of_positions:
   182                           	opt stack 0
   183  000311                     _dpowers:
   184                           	opt stack 0
   185  000311  0001               	dw	1
   186  000313  000A               	dw	10
   187  000315  0064               	dw	100
   188  000317  03E8               	dw	1000
   189  000319  2710               	dw	10000
   190  00031B                     __end_of_dpowers:
   191                           	opt stack 0
   192  00031B                     _turns:
   193                           	opt stack 0
   194  00031B  FFFF               	dw	65535
   195  00031D  FFFF               	dw	65535
   196  00031F  FFFF               	dw	65535
   197  000321  0001               	dw	1
   198  000323  0001               	dw	1
   199  000325  0001               	dw	1
   200  000327  0001               	dw	1
   201  000329  0001               	dw	1
   202  00032B  0001               	dw	1
   203  00032D  FFFF               	dw	65535
   204  00032F  FFFF               	dw	65535
   205  000331  FFFF               	dw	65535
   206  000333  0001               	dw	1
   207  000335  0001               	dw	1
   208  000337  0001               	dw	1
   209  000339  0001               	dw	1
   210  00033B  0001               	dw	1
   211  00033D  0001               	dw	1
   212  00033F  FFFF               	dw	65535
   213  000341  FFFF               	dw	65535
   214  000343  FFFF               	dw	65535
   215  000345  FFFF               	dw	65535
   216  000347  FFFF               	dw	65535
   217  000349  FFFF               	dw	65535
   218  00034B                     __end_of_turns:
   219                           	opt stack 0
   220  00034B                     STR_10:
   221  00034B  54                 	db	84	;'T'
   222  00034C  34                 	db	52	;'4'
   223  00034D  30                 	db	48	;'0'
   224  00034E  30                 	db	48	;'0'
   225  00034F  0D                 	db	13
   226  000350  00                 	db	0
   227  000351                     STR_3:
   228  000351  25                 	db	37
   229  000352  64                 	db	100	;'d'
   230  000353  00                 	db	0
   231  000354                     STR_1:
   232  000354  23                 	db	35
   233  000355  00                 	db	0
   234  000356                     STR_2:
   235  000356  50                 	db	80	;'P'
   236  000357  00                 	db	0
   237  0000                     
   238                           ; #config settings
   239  000358  00                 	db	0	; dummy byte at the end
   240  0000                     
   241                           	psect	nvBANK0
   242  000086                     __pnvBANK0:
   243                           	opt stack 0
   244  000086                     _currentDirection:
   245                           	opt stack 0
   246  000086                     	ds	2
   247  0000                     _OSCCONbits	set	4051
   248  0000                     _OSCTUNEbits	set	3995
   249  0000                     _TXREG	set	4013
   250  0000                     _TRISCbits	set	3988
   251  0000                     _RCSTAbits	set	4011
   252  0000                     _SPBRGH	set	4016
   253  0000                     _SPBRG	set	4015
   254  0000                     _TXSTAbits	set	4012
   255  0000                     _BAUDCONbits	set	4024
   256  0000                     _TRMT	set	32097
   257                           
   258                           	psect	cinit
   259  000E1C                     __pcinit:
   260                           	opt stack 0
   261  000E1C                     start_initialization:
   262                           	opt stack 0
   263  000E1C                     __initialization:
   264                           	opt stack 0
   265                           
   266                           ; Initialize objects allocated to BANK1 (126 bytes)
   267                           ; load TBLPTR registers with __pidataBANK1
   268  000E1C  0E9E               	movlw	low __pidataBANK1
   269  000E1E  6EF6               	movwf	tblptrl,c
   270  000E20  0E0C               	movlw	high __pidataBANK1
   271  000E22  6EF7               	movwf	tblptrh,c
   272  000E24  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   273  000E26  6EF8               	movwf	tblptru,c
   274  000E28  EE01  F000         	lfsr	0,__pdataBANK1
   275  000E2C  EE10 F07E          	lfsr	1,126
   276  000E30                     copy_data0:
   277  000E30  0009               	tblrd		*+
   278  000E32  CFF5 FFEE          	movff	tablat,postinc0
   279  000E36  50E5               	movf	postdec1,w,c
   280  000E38  50E1               	movf	fsr1l,w,c
   281  000E3A  E1FA               	bnz	copy_data0
   282                           
   283                           ; Clear objects allocated to BANK2 (256 bytes)
   284  000E3C  EE02  F000         	lfsr	0,__pbssBANK2
   285  000E40  EE11 F000          	lfsr	1,256
   286  000E44                     clear_0:
   287  000E44  6AEE               	clrf	postinc0,c
   288  000E46  50E5               	movf	postdec1,w,c
   289  000E48  50E1               	movf	fsr1l,w,c
   290  000E4A  E1FC               	bnz	clear_0
   291  000E4C  50E2               	movf	fsr1h,w,c
   292  000E4E  E1FA               	bnz	clear_0
   293  000E50                     end_of_initialization:
   294                           	opt stack 0
   295  000E50                     __end_of__initialization:
   296                           	opt stack 0
   297  000E50  9036               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   298  000E52  9236               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   299  000E54  0E00               	movlw	low (__Lmediumconst shr (0+16))
   300  000E56  6EF8               	movwf	tblptru,c
   301  000E58  0100               	movlb	0
   302  000E5A  EF84  F007         	goto	_main	;jump to C main() function
   303                           tblptru	equ	0xFF8
   304                           tblptrh	equ	0xFF7
   305                           tblptrl	equ	0xFF6
   306                           tablat	equ	0xFF5
   307                           postinc0	equ	0xFEE
   308                           postdec1	equ	0xFE5
   309                           fsr1h	equ	0xFE2
   310                           fsr1l	equ	0xFE1
   311                           
   312                           	psect	dataBANK1
   313  000100                     __pdataBANK1:
   314                           	opt stack 0
   315  000100                     _servosets:
   316                           	opt stack 0
   317  000100                     	ds	126
   318                           tblptru	equ	0xFF8
   319                           tblptrh	equ	0xFF7
   320                           tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           postinc0	equ	0xFEE
   323                           postdec1	equ	0xFE5
   324                           fsr1h	equ	0xFE2
   325                           fsr1l	equ	0xFE1
   326                           
   327                           	psect	bssBANK2
   328  000200                     __pbssBANK2:
   329                           	opt stack 0
   330  000200                     _movementString:
   331                           	opt stack 0
   332  000200                     	ds	256
   333                           tblptru	equ	0xFF8
   334                           tblptrh	equ	0xFF7
   335                           tblptrl	equ	0xFF6
   336                           tablat	equ	0xFF5
   337                           postinc0	equ	0xFEE
   338                           postdec1	equ	0xFE5
   339                           fsr1h	equ	0xFE2
   340                           fsr1l	equ	0xFE1
   341                           
   342                           	psect	cstackBANK0
   343  000060                     __pcstackBANK0:
   344                           	opt stack 0
   345  000060                     ?_sprintf:
   346                           	opt stack 0
   347  000060                     sprintf@sp:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x0
   351  000060                     	ds	2
   352  000062                     sprintf@f:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x2
   356  000062                     	ds	4
   357  000066                     sprintf@ap:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x6
   361  000066                     	ds	2
   362  000068                     sprintf@flag:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0x8
   366  000068                     	ds	1
   367  000069                     sprintf@prec:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x9
   371  000069                     	ds	1
   372  00006A                     sprintf@val:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0xA
   376  00006A                     	ds	2
   377  00006C                     sprintf@c:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0xC
   381  00006C                     	ds	1
   382  00006D                     ??_FillServoPositionString:
   383  00006D                     InitServos@tmp:
   384                           	opt stack 0
   385                           
   386                           ; 5 bytes @ 0xD
   387  00006D                     	ds	4
   388  000071                     FillServoPositionString@deltaHorizontal:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x11
   392  000071                     	ds	1
   393  000072                     InitServos@i:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x12
   397  000072                     	ds	1
   398  000073                     FillServoPositionString@newHorizontalPosition:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x13
   402  000073                     	ds	2
   403  000075                     FillServoPositionString@deltaVertical:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x15
   407  000075                     	ds	2
   408  000077                     FillServoPositionString@newVerticalPosition:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x17
   412  000077                     	ds	2
   413  000079                     _FillServoPositionString$1059:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x19
   417  000079                     	ds	2
   418  00007B                     FillServoPositionString@tmp:
   419                           	opt stack 0
   420                           
   421                           ; 5 bytes @ 0x1B
   422  00007B                     	ds	5
   423  000080                     _FillServoPositionString$1057:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x20
   427  000080                     	ds	2
   428  000082                     _FillServoPositionString$1058:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x22
   432  000082                     	ds	2
   433  000084                     FillServoPositionString@i:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x24
   437  000084                     	ds	2
   438                           tblptru	equ	0xFF8
   439                           tblptrh	equ	0xFF7
   440                           tblptrl	equ	0xFF6
   441                           tablat	equ	0xFF5
   442                           postinc0	equ	0xFEE
   443                           postdec1	equ	0xFE5
   444                           fsr1h	equ	0xFE2
   445                           fsr1l	equ	0xFE1
   446                           
   447                           	psect	cstackCOMRAM
   448  000001                     __pcstackCOMRAM:
   449                           	opt stack 0
   450  000001                     ??_high_isr:
   451  000001                     
   452                           ; 1 bytes @ 0x0
   453  000001                     	ds	18
   454  000013                     ??_low_isr:
   455                           
   456                           ; 1 bytes @ 0x12
   457  000013                     	ds	21
   458  000028                     ??_UART_Init:
   459  000028                     ?_strlen:
   460                           	opt stack 0
   461  000028                     ?___wmul:
   462                           	opt stack 0
   463  000028                     ?___lwdiv:
   464                           	opt stack 0
   465  000028                     UART_Write@data:
   466                           	opt stack 0
   467  000028                     ___wmul@multiplier:
   468                           	opt stack 0
   469  000028                     ___lwdiv@dividend:
   470                           	opt stack 0
   471  000028                     memset@p1:
   472                           	opt stack 0
   473  000028                     strlen@s:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x27
   477  000028                     	ds	2
   478  00002A                     ??_strlen:
   479  00002A                     ___wmul@multiplicand:
   480                           	opt stack 0
   481  00002A                     ___lwdiv@divisor:
   482                           	opt stack 0
   483  00002A                     memset@c:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x29
   487  00002A                     	ds	2
   488  00002C                     ___wmul@product:
   489                           	opt stack 0
   490  00002C                     ___lwdiv@quotient:
   491                           	opt stack 0
   492  00002C                     memset@n:
   493                           	opt stack 0
   494  00002C                     strlen@cp:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x2B
   498  00002C                     	ds	2
   499  00002E                     ___lwdiv@counter:
   500                           	opt stack 0
   501  00002E                     UART_Write_String@str:
   502                           	opt stack 0
   503  00002E                     memset@p:
   504                           	opt stack 0
   505  00002E                     strcat@to:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x2D
   509  00002E                     	ds	1
   510  00002F                     ?___lwmod:
   511                           	opt stack 0
   512  00002F                     ___lwmod@dividend:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x2E
   516  00002F                     	ds	1
   517  000030                     ??_UART_Write_String:
   518  000030                     RotatePositions@i:
   519                           	opt stack 0
   520  000030                     strcat@from:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x2F
   524  000030                     	ds	1
   525  000031                     UART_Write_String@arrayLength:
   526                           	opt stack 0
   527  000031                     ___lwmod@divisor:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x30
   531  000031                     	ds	1
   532  000032                     strcat@cp:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x31
   536  000032                     	ds	1
   537  000033                     ___lwmod@counter:
   538                           	opt stack 0
   539  000033                     UART_Write_String@i:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x32
   543  000033                     	ds	1
   544  000034                     ??_sprintf:
   545                           
   546                           ; 1 bytes @ 0x33
   547  000034                     	ds	1
   548  000035                     UART_Write_String@a:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x34
   552  000035                     	ds	1
   553  000036                     tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           postdec1	equ	0xFE5
   559                           fsr1h	equ	0xFE2
   560                           fsr1l	equ	0xFE1
   561                           
   562                           ; 1 bytes @ 0x35
   563 ;;
   564 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   565 ;;
   566 ;; *************** function _main *****************
   567 ;; Defined at:
   568 ;;		line 159 in file "main.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;		None
   571 ;; Auto vars:     Size  Location     Type
   572 ;;		None
   573 ;; Return value:  Size  Location     Type
   574 ;;                  1    wreg      void 
   575 ;; Registers used:
   576 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   582 ;;      Params:         0       0       0       0
   583 ;;      Locals:         0       0       0       0
   584 ;;      Temps:          0       0       0       0
   585 ;;      Totals:         0       0       0       0
   586 ;;Total ram usage:        0 bytes
   587 ;; Hardware stack levels required when called:    5
   588 ;; This function calls:
   589 ;;		_ConfigureOscillator
   590 ;;		_FillServoPositionString
   591 ;;		_InitServos
   592 ;;		_RotatePositions
   593 ;;		_UART_Init
   594 ;;		_UART_Write_String
   595 ;; This function is called by:
   596 ;;		Startup code after reset
   597 ;; This function uses a non-reentrant model
   598 ;;
   599                           
   600                           	psect	text0
   601  000F08                     __ptext0:
   602                           	opt stack 0
   603  000F08                     _main:
   604                           	opt stack 26
   605                           
   606                           ;main.c: 163: currentDirection = turns.left;
   607                           
   608                           ;incstack = 0
   609  000F08  0E27               	movlw	low (_turns+12)
   610  000F0A  0100               	movlb	0	; () banked
   611  000F0C  6F86               	movwf	_currentDirection& (0+255),b
   612  000F0E  0E03               	movlw	high (_turns+12)
   613  000F10  6F87               	movwf	(_currentDirection+1)& (0+255),b
   614                           
   615                           ; BSR set to: 0
   616                           ;main.c: 167: ConfigureOscillator();
   617  000F12  ECD2  F007         	call	_ConfigureOscillator	;wreg free
   618                           
   619                           ;main.c: 171: UART_Init();
   620  000F16  EC6D  F007         	call	_UART_Init	;wreg free
   621                           
   622                           ;main.c: 175: InitServos();
   623  000F1A  ECB2  F003         	call	_InitServos	;wreg free
   624  000F1E                     
   625                           ;main.c: 183: FillServoPositionString();
   626  000F1E  ECAD  F001         	call	_FillServoPositionString	;wreg free
   627                           
   628                           ;main.c: 187: UART_Write_String(movementString);
   629  000F22  0E00               	movlw	low _movementString
   630  000F24  6E2E               	movwf	UART_Write_String@str,c
   631  000F26  0E02               	movlw	high _movementString
   632  000F28  6E2F               	movwf	UART_Write_String@str+1,c
   633  000F2A  ECBA  F006         	call	_UART_Write_String	;wreg free
   634                           
   635                           ;main.c: 191: RotatePositions();
   636  000F2E  ECB7  F005         	call	_RotatePositions	;wreg free
   637  000F32  D7F5               	goto	l67
   638  000F34                     __end_of_main:
   639                           	opt stack 0
   640                           tblptru	equ	0xFF8
   641                           tblptrh	equ	0xFF7
   642                           tblptrl	equ	0xFF6
   643                           tablat	equ	0xFF5
   644                           postinc0	equ	0xFEE
   645                           postdec1	equ	0xFE5
   646                           fsr1h	equ	0xFE2
   647                           fsr1l	equ	0xFE1
   648                           
   649 ;; *************** function _UART_Init *****************
   650 ;; Defined at:
   651 ;;		line 197 in file "main.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;		None
   654 ;; Auto vars:     Size  Location     Type
   655 ;;		None
   656 ;; Return value:  Size  Location     Type
   657 ;;                  1    wreg      unsigned char 
   658 ;; Registers used:
   659 ;;		wreg, status,2
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   665 ;;      Params:         0       0       0       0
   666 ;;      Locals:         0       0       0       0
   667 ;;      Temps:          2       0       0       0
   668 ;;      Totals:         2       0       0       0
   669 ;;Total ram usage:        2 bytes
   670 ;; Hardware stack levels used:    1
   671 ;; Hardware stack levels required when called:    2
   672 ;; This function calls:
   673 ;;		Nothing
   674 ;; This function is called by:
   675 ;;		_main
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           	psect	text1
   680  000EDA                     __ptext1:
   681                           	opt stack 0
   682  000EDA                     _UART_Init:
   683                           	opt stack 28
   684                           
   685                           ;main.c: 198: BAUDCONbits.BRG16 = 0b1;
   686                           
   687                           ;incstack = 0
   688  000EDA  86B8               	bsf	4024,3,c	;volatile
   689                           
   690                           ;main.c: 199: TXSTAbits.BRGH = 0b1;
   691  000EDC  84AC               	bsf	4012,2,c	;volatile
   692                           
   693                           ;main.c: 200: SPBRG = 51;
   694  000EDE  0E33               	movlw	51
   695  000EE0  6EAF               	movwf	4015,c	;volatile
   696                           
   697                           ;main.c: 201: SPBRGH = 0;
   698  000EE2  0E00               	movlw	0
   699  000EE4  6EB0               	movwf	4016,c	;volatile
   700                           
   701                           ;main.c: 202: TXSTAbits.SYNC = 0b0;
   702  000EE6  98AC               	bcf	4012,4,c	;volatile
   703                           
   704                           ;main.c: 203: RCSTAbits.SPEN = 0b1;
   705  000EE8  8EAB               	bsf	4011,7,c	;volatile
   706                           
   707                           ;main.c: 204: TXSTAbits.TXEN = 0b1;
   708  000EEA  8AAC               	bsf	4012,5,c	;volatile
   709                           
   710                           ;main.c: 206: TRISCbits.TRISC6 = 0b0;
   711  000EEC  9C94               	bcf	3988,6,c	;volatile
   712                           
   713                           ;main.c: 207: TRISCbits.TRISC7 = 0b1;
   714  000EEE  8E94               	bsf	3988,7,c	;volatile
   715                           
   716                           ;main.c: 209: _delay((unsigned long)((1000)*(2000000/4000.0)));
   717  000EF0  0E03               	movlw	3
   718  000EF2  6E29               	movwf	(??_UART_Init+1)& (0+255),c
   719  000EF4  0E8A               	movlw	138
   720  000EF6  6E28               	movwf	??_UART_Init& (0+255),c
   721  000EF8  0E56               	movlw	86
   722  000EFA                     u597:
   723  000EFA  2EE8               	decfsz	wreg,f,c
   724  000EFC  D7FE               	bra	u597
   725  000EFE  2E28               	decfsz	??_UART_Init& (0+255),f,c
   726  000F00  D7FC               	bra	u597
   727  000F02  2E29               	decfsz	(??_UART_Init+1)& (0+255),f,c
   728  000F04  D7FA               	bra	u597
   729  000F06  0012               	return	
   730  000F08                     __end_of_UART_Init:
   731                           	opt stack 0
   732                           tblptru	equ	0xFF8
   733                           tblptrh	equ	0xFF7
   734                           tblptrl	equ	0xFF6
   735                           tablat	equ	0xFF5
   736                           postinc0	equ	0xFEE
   737                           wreg	equ	0xFE8
   738                           postdec1	equ	0xFE5
   739                           fsr1h	equ	0xFE2
   740                           fsr1l	equ	0xFE1
   741                           
   742 ;; *************** function _RotatePositions *****************
   743 ;; Defined at:
   744 ;;		line 297 in file "main.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;		None
   747 ;; Auto vars:     Size  Location     Type
   748 ;;  i               2   47[COMRAM] unsigned int 
   749 ;; Return value:  Size  Location     Type
   750 ;;                  1    wreg      void 
   751 ;; Registers used:
   752 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   753 ;; Tracked objects:
   754 ;;		On entry : 0/0
   755 ;;		On exit  : 0/0
   756 ;;		Unchanged: 0/0
   757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   758 ;;      Params:         0       0       0       0
   759 ;;      Locals:         2       0       0       0
   760 ;;      Temps:          2       0       0       0
   761 ;;      Totals:         4       0       0       0
   762 ;;Total ram usage:        4 bytes
   763 ;; Hardware stack levels used:    1
   764 ;; Hardware stack levels required when called:    3
   765 ;; This function calls:
   766 ;;		___wmul
   767 ;; This function is called by:
   768 ;;		_main
   769 ;; This function uses a non-reentrant model
   770 ;;
   771                           
   772                           	psect	text2
   773  000B6E                     __ptext2:
   774                           	opt stack 0
   775  000B6E                     _RotatePositions:
   776                           	opt stack 27
   777                           
   778                           ;main.c: 298: for (unsigned int i = 0; i < 6; i++) {
   779                           
   780                           ;incstack = 0
   781  000B6E  0E00               	movlw	0
   782  000B70  6E31               	movwf	RotatePositions@i+1,c
   783  000B72  0E00               	movlw	0
   784  000B74  6E30               	movwf	RotatePositions@i,c
   785  000B76                     l1407:
   786  000B76  5031               	movf	RotatePositions@i+1,w,c
   787  000B78  E146               	bnz	l106
   788  000B7A  0E06               	movlw	6
   789  000B7C  5C30               	subwf	RotatePositions@i,w,c
   790  000B7E  B0D8               	btfsc	status,0,c
   791  000B80  0012               	return	
   792                           
   793                           ;main.c: 299: if (servosets[i].currentServoPosition < (4 - 1)) {
   794  000B82  C030  F028         	movff	RotatePositions@i,___wmul@multiplier
   795  000B86  C031  F029         	movff	RotatePositions@i+1,___wmul@multiplier+1
   796  000B8A  0E00               	movlw	0
   797  000B8C  6E2B               	movwf	___wmul@multiplicand+1,c
   798  000B8E  0E15               	movlw	21
   799  000B90  6E2A               	movwf	___wmul@multiplicand,c
   800  000B92  ECB0  F007         	call	___wmul	;wreg free
   801  000B96  0E00               	movlw	low _servosets
   802  000B98  2428               	addwf	?___wmul,w,c
   803  000B9A  6ED9               	movwf	fsr2l,c
   804  000B9C  0E01               	movlw	high _servosets
   805  000B9E  2029               	addwfc	?___wmul+1,w,c
   806  000BA0  6EDA               	movwf	fsr2h,c
   807  000BA2  0E01               	movlw	1
   808  000BA4  50DB               	movf	plusw2,w,c
   809  000BA6  E118               	bnz	l1415
   810  000BA8  0E03               	movlw	3
   811  000BAA  5CDE               	subwf	postinc2,w,c
   812  000BAC  B0D8               	btfsc	status,0,c
   813  000BAE  D014               	goto	l104
   814                           
   815                           ;main.c: 300: servosets[i].currentServoPosition += 1;
   816  000BB0  C030  F028         	movff	RotatePositions@i,___wmul@multiplier
   817  000BB4  C031  F029         	movff	RotatePositions@i+1,___wmul@multiplier+1
   818  000BB8  0E00               	movlw	0
   819  000BBA  6E2B               	movwf	___wmul@multiplicand+1,c
   820  000BBC  0E15               	movlw	21
   821  000BBE  6E2A               	movwf	___wmul@multiplicand,c
   822  000BC0  ECB0  F007         	call	___wmul	;wreg free
   823  000BC4  0E00               	movlw	low _servosets
   824  000BC6  2428               	addwf	?___wmul,w,c
   825  000BC8  6ED9               	movwf	fsr2l,c
   826  000BCA  0E01               	movlw	high _servosets
   827  000BCC  2029               	addwfc	?___wmul+1,w,c
   828  000BCE  6EDA               	movwf	fsr2h,c
   829  000BD0  2ADE               	incf	postinc2,f,c
   830  000BD2  0E00               	movlw	0
   831  000BD4  22DD               	addwfc	postdec2,f,c
   832                           
   833                           ;main.c: 301: } else {
   834  000BD6  D014               	goto	l105
   835  000BD8                     l104:
   836  000BD8                     l1415:
   837                           
   838                           ;main.c: 302: servosets[i].currentServoPosition = 0;
   839  000BD8  C030  F028         	movff	RotatePositions@i,___wmul@multiplier
   840  000BDC  C031  F029         	movff	RotatePositions@i+1,___wmul@multiplier+1
   841  000BE0  0E00               	movlw	0
   842  000BE2  6E2B               	movwf	___wmul@multiplicand+1,c
   843  000BE4  0E15               	movlw	21
   844  000BE6  6E2A               	movwf	___wmul@multiplicand,c
   845  000BE8  ECB0  F007         	call	___wmul	;wreg free
   846  000BEC  0E00               	movlw	low _servosets
   847  000BEE  2428               	addwf	?___wmul,w,c
   848  000BF0  6ED9               	movwf	fsr2l,c
   849  000BF2  0E01               	movlw	high _servosets
   850  000BF4  2029               	addwfc	?___wmul+1,w,c
   851  000BF6  6EDA               	movwf	fsr2h,c
   852  000BF8  0E00               	movlw	0
   853  000BFA  6EDE               	movwf	postinc2,c
   854  000BFC  0E00               	movlw	0
   855  000BFE  6EDD               	movwf	postdec2,c
   856  000C00                     l105:
   857  000C00  4A30               	infsnz	RotatePositions@i,f,c
   858  000C02  2A31               	incf	RotatePositions@i+1,f,c
   859  000C04  D7B8               	goto	l1407
   860  000C06                     l106:
   861  000C06  0012               	return		;funcret
   862  000C08                     __end_of_RotatePositions:
   863                           	opt stack 0
   864                           tblptru	equ	0xFF8
   865                           tblptrh	equ	0xFF7
   866                           tblptrl	equ	0xFF6
   867                           tablat	equ	0xFF5
   868                           postinc0	equ	0xFEE
   869                           wreg	equ	0xFE8
   870                           postdec1	equ	0xFE5
   871                           fsr1h	equ	0xFE2
   872                           fsr1l	equ	0xFE1
   873                           postinc2	equ	0xFDE
   874                           postdec2	equ	0xFDD
   875                           plusw2	equ	0xFDB
   876                           fsr2h	equ	0xFDA
   877                           fsr2l	equ	0xFD9
   878                           status	equ	0xFD8
   879                           
   880 ;; *************** function _InitServos *****************
   881 ;; Defined at:
   882 ;;		line 266 in file "main.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;		None
   885 ;; Auto vars:     Size  Location     Type
   886 ;;  tmp             5   13[BANK0 ] unsigned char [5]
   887 ;;  i               2   18[BANK0 ] unsigned int 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   897 ;;      Params:         0       0       0       0
   898 ;;      Locals:         0       7       0       0
   899 ;;      Temps:          0       0       0       0
   900 ;;      Totals:         0       7       0       0
   901 ;;Total ram usage:        7 bytes
   902 ;; Hardware stack levels used:    1
   903 ;; Hardware stack levels required when called:    4
   904 ;; This function calls:
   905 ;;		_EmptyMovementString
   906 ;;		_UART_Write_String
   907 ;;		___wmul
   908 ;;		_sprintf
   909 ;;		_strcat
   910 ;; This function is called by:
   911 ;;		_main
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           	psect	text3
   916  000764                     __ptext3:
   917                           	opt stack 0
   918  000764                     _InitServos:
   919                           	opt stack 26
   920                           
   921                           ;main.c: 267: char tmp[5];
   922                           ;main.c: 268: unsigned int i = 0;
   923                           
   924                           ;incstack = 0
   925  000764  0E00               	movlw	0
   926  000766  0100               	movlb	0	; () banked
   927  000768  6F73               	movwf	(InitServos@i+1)& (0+255),b
   928  00076A  0E00               	movlw	0
   929  00076C  6F72               	movwf	InitServos@i& (0+255),b
   930                           
   931                           ;main.c: 269: for(i = 0; i < 6; i++){
   932  00076E  0E00               	movlw	0
   933  000770  6F73               	movwf	(InitServos@i+1)& (0+255),b
   934  000772  0E00               	movlw	0
   935  000774  6F72               	movwf	InitServos@i& (0+255),b
   936                           
   937                           ; BSR set to: 0
   938  000776  5173               	movf	(InitServos@i+1)& (0+255),w,b
   939  000778  E105               	bnz	u520
   940  00077A  0E06               	movlw	6
   941  00077C  5D72               	subwf	InitServos@i& (0+255),w,b
   942  00077E  B0D8               	btfsc	status,0,c
   943  000780  0012               	return	
   944  000782  D001               	goto	l97
   945  000784                     u520:
   946                           
   947                           ; BSR set to: 0
   948  000784  0012               	return	
   949  000786                     l97:
   950                           
   951                           ; BSR set to: 0
   952                           ;main.c: 270: EmptyMovementString();
   953                           
   954                           ; BSR set to: 0
   955  000786  ECC3  F007         	call	_EmptyMovementString	;wreg free
   956                           
   957                           ;main.c: 271: strcat(movementString, "#");
   958  00078A  0E00               	movlw	low _movementString
   959  00078C  6E2E               	movwf	strcat@to,c
   960  00078E  0E02               	movlw	high _movementString
   961  000790  6E2F               	movwf	strcat@to+1,c
   962  000792  0E54               	movlw	low STR_1
   963  000794  6E30               	movwf	strcat@from,c
   964  000796  0E03               	movlw	high STR_1
   965  000798  6E31               	movwf	strcat@from+1,c
   966  00079A  EC8E  F006         	call	_strcat	;wreg free
   967                           
   968                           ;main.c: 272: strcat(movementString, servosets[i].horizontalServo);
   969  00079E  0E00               	movlw	low _movementString
   970  0007A0  6E2E               	movwf	strcat@to,c
   971  0007A2  0E02               	movlw	high _movementString
   972  0007A4  6E2F               	movwf	strcat@to+1,c
   973  0007A6  C072  F028         	movff	InitServos@i,___wmul@multiplier
   974  0007AA  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
   975  0007AE  0E00               	movlw	0
   976  0007B0  6E2B               	movwf	___wmul@multiplicand+1,c
   977  0007B2  0E15               	movlw	21
   978  0007B4  6E2A               	movwf	___wmul@multiplicand,c
   979  0007B6  ECB0  F007         	call	___wmul	;wreg free
   980  0007BA  0E02               	movlw	2
   981  0007BC  2628               	addwf	?___wmul,f,c
   982  0007BE  0E00               	movlw	0
   983  0007C0  2229               	addwfc	?___wmul+1,f,c
   984  0007C2  0E00               	movlw	low _servosets
   985  0007C4  2428               	addwf	?___wmul,w,c
   986  0007C6  6E30               	movwf	strcat@from,c
   987  0007C8  0E01               	movlw	high _servosets
   988  0007CA  2029               	addwfc	?___wmul+1,w,c
   989  0007CC  6E31               	movwf	strcat@from+1,c
   990  0007CE  EC8E  F006         	call	_strcat	;wreg free
   991                           
   992                           ;main.c: 273: strcat(movementString, "P");
   993  0007D2  0E00               	movlw	low _movementString
   994  0007D4  6E2E               	movwf	strcat@to,c
   995  0007D6  0E02               	movlw	high _movementString
   996  0007D8  6E2F               	movwf	strcat@to+1,c
   997  0007DA  0E56               	movlw	low STR_2
   998  0007DC  6E30               	movwf	strcat@from,c
   999  0007DE  0E03               	movlw	high STR_2
  1000  0007E0  6E31               	movwf	strcat@from+1,c
  1001  0007E2  EC8E  F006         	call	_strcat	;wreg free
  1002                           
  1003                           ;main.c: 274: sprintf(tmp, "%d", servosets[i].horizontalMediumPosition);
  1004  0007E6  0E6D               	movlw	low InitServos@tmp
  1005  0007E8  0100               	movlb	0	; () banked
  1006  0007EA  6F60               	movwf	sprintf@sp& (0+255),b
  1007  0007EC  0E00               	movlw	high InitServos@tmp
  1008  0007EE  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1009  0007F0  0E51               	movlw	low STR_3
  1010  0007F2  6F62               	movwf	sprintf@f& (0+255),b
  1011  0007F4  0E03               	movlw	high STR_3
  1012  0007F6  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1013  0007F8  C072  F028         	movff	InitServos@i,___wmul@multiplier
  1014  0007FC  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  1015  000800  0E00               	movlw	0
  1016  000802  6E2B               	movwf	___wmul@multiplicand+1,c
  1017  000804  0E15               	movlw	21
  1018  000806  6E2A               	movwf	___wmul@multiplicand,c
  1019  000808  ECB0  F007         	call	___wmul	;wreg free
  1020  00080C  0E0B               	movlw	11
  1021  00080E  2628               	addwf	?___wmul,f,c
  1022  000810  0E00               	movlw	0
  1023  000812  2229               	addwfc	?___wmul+1,f,c
  1024  000814  0E00               	movlw	low _servosets
  1025  000816  2428               	addwf	?___wmul,w,c
  1026  000818  6ED9               	movwf	fsr2l,c
  1027  00081A  0E01               	movlw	high _servosets
  1028  00081C  2029               	addwfc	?___wmul+1,w,c
  1029  00081E  6EDA               	movwf	fsr2h,c
  1030  000820  CFDE F064          	movff	postinc2,?_sprintf+4
  1031  000824  CFDD F065          	movff	postdec2,?_sprintf+5
  1032  000828  EC11  F005         	call	_sprintf	;wreg free
  1033                           
  1034                           ;main.c: 275: strcat(movementString, tmp);
  1035  00082C  0E00               	movlw	low _movementString
  1036  00082E  6E2E               	movwf	strcat@to,c
  1037  000830  0E02               	movlw	high _movementString
  1038  000832  6E2F               	movwf	strcat@to+1,c
  1039  000834  0E6D               	movlw	low InitServos@tmp
  1040  000836  6E30               	movwf	strcat@from,c
  1041  000838  0E00               	movlw	high InitServos@tmp
  1042  00083A  6E31               	movwf	strcat@from+1,c
  1043  00083C  EC8E  F006         	call	_strcat	;wreg free
  1044                           
  1045                           ;main.c: 276: strcat(movementString, "\r");
  1046  000840  0E00               	movlw	low _movementString
  1047  000842  6E2E               	movwf	strcat@to,c
  1048  000844  0E02               	movlw	high _movementString
  1049  000846  6E2F               	movwf	strcat@to+1,c
  1050  000848  0E4F               	movlw	low (STR_10+4)
  1051  00084A  6E30               	movwf	strcat@from,c
  1052  00084C  0E03               	movlw	high (STR_10+4)
  1053  00084E  6E31               	movwf	strcat@from+1,c
  1054  000850  EC8E  F006         	call	_strcat	;wreg free
  1055                           
  1056                           ;main.c: 277: UART_Write_String(movementString);
  1057  000854  0E00               	movlw	low _movementString
  1058  000856  6E2E               	movwf	UART_Write_String@str,c
  1059  000858  0E02               	movlw	high _movementString
  1060  00085A  6E2F               	movwf	UART_Write_String@str+1,c
  1061  00085C  ECBA  F006         	call	_UART_Write_String	;wreg free
  1062                           
  1063                           ;main.c: 278: EmptyMovementString();
  1064  000860  ECC3  F007         	call	_EmptyMovementString	;wreg free
  1065                           
  1066                           ;main.c: 279: strcat(movementString, "#");
  1067  000864  0E00               	movlw	low _movementString
  1068  000866  6E2E               	movwf	strcat@to,c
  1069  000868  0E02               	movlw	high _movementString
  1070  00086A  6E2F               	movwf	strcat@to+1,c
  1071  00086C  0E54               	movlw	low STR_1
  1072  00086E  6E30               	movwf	strcat@from,c
  1073  000870  0E03               	movlw	high STR_1
  1074  000872  6E31               	movwf	strcat@from+1,c
  1075  000874  EC8E  F006         	call	_strcat	;wreg free
  1076                           
  1077                           ;main.c: 280: strcat(movementString, servosets[i].upperVerticalServo);
  1078  000878  0E00               	movlw	low _movementString
  1079  00087A  6E2E               	movwf	strcat@to,c
  1080  00087C  0E02               	movlw	high _movementString
  1081  00087E  6E2F               	movwf	strcat@to+1,c
  1082  000880  C072  F028         	movff	InitServos@i,___wmul@multiplier
  1083  000884  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  1084  000888  0E00               	movlw	0
  1085  00088A  6E2B               	movwf	___wmul@multiplicand+1,c
  1086  00088C  0E15               	movlw	21
  1087  00088E  6E2A               	movwf	___wmul@multiplicand,c
  1088  000890  ECB0  F007         	call	___wmul	;wreg free
  1089  000894  0E05               	movlw	5
  1090  000896  2628               	addwf	?___wmul,f,c
  1091  000898  0E00               	movlw	0
  1092  00089A  2229               	addwfc	?___wmul+1,f,c
  1093  00089C  0E00               	movlw	low _servosets
  1094  00089E  2428               	addwf	?___wmul,w,c
  1095  0008A0  6E30               	movwf	strcat@from,c
  1096  0008A2  0E01               	movlw	high _servosets
  1097  0008A4  2029               	addwfc	?___wmul+1,w,c
  1098  0008A6  6E31               	movwf	strcat@from+1,c
  1099  0008A8  EC8E  F006         	call	_strcat	;wreg free
  1100                           
  1101                           ;main.c: 281: strcat(movementString, "P");
  1102  0008AC  0E00               	movlw	low _movementString
  1103  0008AE  6E2E               	movwf	strcat@to,c
  1104  0008B0  0E02               	movlw	high _movementString
  1105  0008B2  6E2F               	movwf	strcat@to+1,c
  1106  0008B4  0E56               	movlw	low STR_2
  1107  0008B6  6E30               	movwf	strcat@from,c
  1108  0008B8  0E03               	movlw	high STR_2
  1109  0008BA  6E31               	movwf	strcat@from+1,c
  1110  0008BC  EC8E  F006         	call	_strcat	;wreg free
  1111                           
  1112                           ;main.c: 282: sprintf(tmp, "%d", servosets[i].verticalUpperMediumPosition);
  1113  0008C0  0E6D               	movlw	low InitServos@tmp
  1114  0008C2  0100               	movlb	0	; () banked
  1115  0008C4  6F60               	movwf	sprintf@sp& (0+255),b
  1116  0008C6  0E00               	movlw	high InitServos@tmp
  1117  0008C8  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1118  0008CA  0E51               	movlw	low STR_3
  1119  0008CC  6F62               	movwf	sprintf@f& (0+255),b
  1120  0008CE  0E03               	movlw	high STR_3
  1121  0008D0  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1122  0008D2  C072  F028         	movff	InitServos@i,___wmul@multiplier
  1123  0008D6  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  1124  0008DA  0E00               	movlw	0
  1125  0008DC  6E2B               	movwf	___wmul@multiplicand+1,c
  1126  0008DE  0E15               	movlw	21
  1127  0008E0  6E2A               	movwf	___wmul@multiplicand,c
  1128  0008E2  ECB0  F007         	call	___wmul	;wreg free
  1129  0008E6  0E0D               	movlw	13
  1130  0008E8  2628               	addwf	?___wmul,f,c
  1131  0008EA  0E00               	movlw	0
  1132  0008EC  2229               	addwfc	?___wmul+1,f,c
  1133  0008EE  0E00               	movlw	low _servosets
  1134  0008F0  2428               	addwf	?___wmul,w,c
  1135  0008F2  6ED9               	movwf	fsr2l,c
  1136  0008F4  0E01               	movlw	high _servosets
  1137  0008F6  2029               	addwfc	?___wmul+1,w,c
  1138  0008F8  6EDA               	movwf	fsr2h,c
  1139  0008FA  CFDE F064          	movff	postinc2,?_sprintf+4
  1140  0008FE  CFDD F065          	movff	postdec2,?_sprintf+5
  1141  000902  EC11  F005         	call	_sprintf	;wreg free
  1142                           
  1143                           ;main.c: 283: strcat(movementString, tmp);
  1144  000906  0E00               	movlw	low _movementString
  1145  000908  6E2E               	movwf	strcat@to,c
  1146  00090A  0E02               	movlw	high _movementString
  1147  00090C  6E2F               	movwf	strcat@to+1,c
  1148  00090E  0E6D               	movlw	low InitServos@tmp
  1149  000910  6E30               	movwf	strcat@from,c
  1150  000912  0E00               	movlw	high InitServos@tmp
  1151  000914  6E31               	movwf	strcat@from+1,c
  1152  000916  EC8E  F006         	call	_strcat	;wreg free
  1153                           
  1154                           ;main.c: 284: strcat(movementString, "\r");
  1155  00091A  0E00               	movlw	low _movementString
  1156  00091C  6E2E               	movwf	strcat@to,c
  1157  00091E  0E02               	movlw	high _movementString
  1158  000920  6E2F               	movwf	strcat@to+1,c
  1159  000922  0E4F               	movlw	low (STR_10+4)
  1160  000924  6E30               	movwf	strcat@from,c
  1161  000926  0E03               	movlw	high (STR_10+4)
  1162  000928  6E31               	movwf	strcat@from+1,c
  1163  00092A  EC8E  F006         	call	_strcat	;wreg free
  1164                           
  1165                           ;main.c: 285: UART_Write_String(movementString);
  1166  00092E  0E00               	movlw	low _movementString
  1167  000930  6E2E               	movwf	UART_Write_String@str,c
  1168  000932  0E02               	movlw	high _movementString
  1169  000934  6E2F               	movwf	UART_Write_String@str+1,c
  1170  000936  ECBA  F006         	call	_UART_Write_String	;wreg free
  1171                           
  1172                           ;main.c: 286: EmptyMovementString();
  1173  00093A  ECC3  F007         	call	_EmptyMovementString	;wreg free
  1174                           
  1175                           ;main.c: 287: strcat(movementString, "#");
  1176  00093E  0E00               	movlw	low _movementString
  1177  000940  6E2E               	movwf	strcat@to,c
  1178  000942  0E02               	movlw	high _movementString
  1179  000944  6E2F               	movwf	strcat@to+1,c
  1180  000946  0E54               	movlw	low STR_1
  1181  000948  6E30               	movwf	strcat@from,c
  1182  00094A  0E03               	movlw	high STR_1
  1183  00094C  6E31               	movwf	strcat@from+1,c
  1184  00094E  EC8E  F006         	call	_strcat	;wreg free
  1185                           
  1186                           ;main.c: 288: strcat(movementString, servosets[i].lowerVerticalServo);
  1187  000952  0E00               	movlw	low _movementString
  1188  000954  6E2E               	movwf	strcat@to,c
  1189  000956  0E02               	movlw	high _movementString
  1190  000958  6E2F               	movwf	strcat@to+1,c
  1191  00095A  C072  F028         	movff	InitServos@i,___wmul@multiplier
  1192  00095E  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  1193  000962  0E00               	movlw	0
  1194  000964  6E2B               	movwf	___wmul@multiplicand+1,c
  1195  000966  0E15               	movlw	21
  1196  000968  6E2A               	movwf	___wmul@multiplicand,c
  1197  00096A  ECB0  F007         	call	___wmul	;wreg free
  1198  00096E  0E08               	movlw	8
  1199  000970  2628               	addwf	?___wmul,f,c
  1200  000972  0E00               	movlw	0
  1201  000974  2229               	addwfc	?___wmul+1,f,c
  1202  000976  0E00               	movlw	low _servosets
  1203  000978  2428               	addwf	?___wmul,w,c
  1204  00097A  6E30               	movwf	strcat@from,c
  1205  00097C  0E01               	movlw	high _servosets
  1206  00097E  2029               	addwfc	?___wmul+1,w,c
  1207  000980  6E31               	movwf	strcat@from+1,c
  1208  000982  EC8E  F006         	call	_strcat	;wreg free
  1209                           
  1210                           ;main.c: 289: strcat(movementString, "P");
  1211  000986  0E00               	movlw	low _movementString
  1212  000988  6E2E               	movwf	strcat@to,c
  1213  00098A  0E02               	movlw	high _movementString
  1214  00098C  6E2F               	movwf	strcat@to+1,c
  1215  00098E  0E56               	movlw	low STR_2
  1216  000990  6E30               	movwf	strcat@from,c
  1217  000992  0E03               	movlw	high STR_2
  1218  000994  6E31               	movwf	strcat@from+1,c
  1219  000996  EC8E  F006         	call	_strcat	;wreg free
  1220                           
  1221                           ;main.c: 290: sprintf(tmp, "%d", servosets[i].verticalLowerMediumPosition);
  1222  00099A  0E6D               	movlw	low InitServos@tmp
  1223  00099C  0100               	movlb	0	; () banked
  1224  00099E  6F60               	movwf	sprintf@sp& (0+255),b
  1225  0009A0  0E00               	movlw	high InitServos@tmp
  1226  0009A2  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1227  0009A4  0E51               	movlw	low STR_3
  1228  0009A6  6F62               	movwf	sprintf@f& (0+255),b
  1229  0009A8  0E03               	movlw	high STR_3
  1230  0009AA  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1231  0009AC  C072  F028         	movff	InitServos@i,___wmul@multiplier
  1232  0009B0  C073  F029         	movff	InitServos@i+1,___wmul@multiplier+1
  1233  0009B4  0E00               	movlw	0
  1234  0009B6  6E2B               	movwf	___wmul@multiplicand+1,c
  1235  0009B8  0E15               	movlw	21
  1236  0009BA  6E2A               	movwf	___wmul@multiplicand,c
  1237  0009BC  ECB0  F007         	call	___wmul	;wreg free
  1238  0009C0  0E0F               	movlw	15
  1239  0009C2  2628               	addwf	?___wmul,f,c
  1240  0009C4  0E00               	movlw	0
  1241  0009C6  2229               	addwfc	?___wmul+1,f,c
  1242  0009C8  0E00               	movlw	low _servosets
  1243  0009CA  2428               	addwf	?___wmul,w,c
  1244  0009CC  6ED9               	movwf	fsr2l,c
  1245  0009CE  0E01               	movlw	high _servosets
  1246  0009D0  2029               	addwfc	?___wmul+1,w,c
  1247  0009D2  6EDA               	movwf	fsr2h,c
  1248  0009D4  CFDE F064          	movff	postinc2,?_sprintf+4
  1249  0009D8  CFDD F065          	movff	postdec2,?_sprintf+5
  1250  0009DC  EC11  F005         	call	_sprintf	;wreg free
  1251                           
  1252                           ;main.c: 291: strcat(movementString, tmp);
  1253  0009E0  0E00               	movlw	low _movementString
  1254  0009E2  6E2E               	movwf	strcat@to,c
  1255  0009E4  0E02               	movlw	high _movementString
  1256  0009E6  6E2F               	movwf	strcat@to+1,c
  1257  0009E8  0E6D               	movlw	low InitServos@tmp
  1258  0009EA  6E30               	movwf	strcat@from,c
  1259  0009EC  0E00               	movlw	high InitServos@tmp
  1260  0009EE  6E31               	movwf	strcat@from+1,c
  1261  0009F0  EC8E  F006         	call	_strcat	;wreg free
  1262                           
  1263                           ;main.c: 292: strcat(movementString, "\r");
  1264  0009F4  0E00               	movlw	low _movementString
  1265  0009F6  6E2E               	movwf	strcat@to,c
  1266  0009F8  0E02               	movlw	high _movementString
  1267  0009FA  6E2F               	movwf	strcat@to+1,c
  1268  0009FC  0E4F               	movlw	low (STR_10+4)
  1269  0009FE  6E30               	movwf	strcat@from,c
  1270  000A00  0E03               	movlw	high (STR_10+4)
  1271  000A02  6E31               	movwf	strcat@from+1,c
  1272  000A04  EC8E  F006         	call	_strcat	;wreg free
  1273                           
  1274                           ;main.c: 293: UART_Write_String(movementString);
  1275  000A08  0E00               	movlw	low _movementString
  1276  000A0A  6E2E               	movwf	UART_Write_String@str,c
  1277  000A0C  0E02               	movlw	high _movementString
  1278  000A0E  6E2F               	movwf	UART_Write_String@str+1,c
  1279  000A10  ECBA  F006         	call	_UART_Write_String	;wreg free
  1280  000A14  0100               	movlb	0	; () banked
  1281  000A16  4B72               	infsnz	InitServos@i& (0+255),f,b
  1282  000A18  2B73               	incf	(InitServos@i+1)& (0+255),f,b
  1283                           
  1284                           ; BSR set to: 0
  1285  000A1A  5173               	movf	(InitServos@i+1)& (0+255),w,b
  1286  000A1C  E101               	bnz	l99
  1287  000A1E  D6AD               	goto	L1
  1288  000A20                     l99:
  1289                           
  1290                           ; BSR set to: 0
  1291  000A20  0012               	return		;funcret
  1292  000A22                     __end_of_InitServos:
  1293                           	opt stack 0
  1294                           tblptru	equ	0xFF8
  1295                           tblptrh	equ	0xFF7
  1296                           tblptrl	equ	0xFF6
  1297                           tablat	equ	0xFF5
  1298                           postinc0	equ	0xFEE
  1299                           wreg	equ	0xFE8
  1300                           postdec1	equ	0xFE5
  1301                           fsr1h	equ	0xFE2
  1302                           fsr1l	equ	0xFE1
  1303                           postinc2	equ	0xFDE
  1304                           postdec2	equ	0xFDD
  1305                           plusw2	equ	0xFDB
  1306                           fsr2h	equ	0xFDA
  1307                           fsr2l	equ	0xFD9
  1308                           status	equ	0xFD8
  1309                           
  1310 ;; *************** function _UART_Write_String *****************
  1311 ;; Defined at:
  1312 ;;		line 214 in file "main.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;  str             2   45[COMRAM] PTR const unsigned char 
  1315 ;;		 -> movementString(256), 
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;  a               1   52[COMRAM] unsigned char 
  1318 ;;  i               2   50[COMRAM] int 
  1319 ;;  arrayLength     2   48[COMRAM] int 
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  1    wreg      void 
  1322 ;; Registers used:
  1323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1329 ;;      Params:         2       0       0       0
  1330 ;;      Locals:         5       0       0       0
  1331 ;;      Temps:          1       0       0       0
  1332 ;;      Totals:         8       0       0       0
  1333 ;;Total ram usage:        8 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    3
  1336 ;; This function calls:
  1337 ;;		_UART_Write
  1338 ;;		_strlen
  1339 ;; This function is called by:
  1340 ;;		_main
  1341 ;;		_InitServos
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text4
  1346  000D74                     __ptext4:
  1347                           	opt stack 0
  1348  000D74                     _UART_Write_String:
  1349                           	opt stack 27
  1350                           
  1351                           ;main.c: 215: int arrayLength = strlen(str);
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;incstack = 0
  1355  000D74  C02E  F028         	movff	UART_Write_String@str,strlen@s
  1356  000D78  C02F  F029         	movff	UART_Write_String@str+1,strlen@s+1
  1357  000D7C  EC50  F007         	call	_strlen	;wreg free
  1358  000D80  C028  F031         	movff	?_strlen,UART_Write_String@arrayLength
  1359  000D84  C029  F032         	movff	?_strlen+1,UART_Write_String@arrayLength+1
  1360                           
  1361                           ;main.c: 216: for (int i = 0; i<arrayLength; i++) {
  1362  000D88  0E00               	movlw	0
  1363  000D8A  6E34               	movwf	UART_Write_String@i+1,c
  1364  000D8C  0E00               	movlw	0
  1365  000D8E  6E33               	movwf	UART_Write_String@i,c
  1366  000D90  D011               	goto	l76
  1367  000D92                     
  1368                           ;main.c: 217: char a = str[i];
  1369  000D92  5033               	movf	UART_Write_String@i,w,c
  1370  000D94  242E               	addwf	UART_Write_String@str,w,c
  1371  000D96  6ED9               	movwf	fsr2l,c
  1372  000D98  5034               	movf	UART_Write_String@i+1,w,c
  1373  000D9A  202F               	addwfc	UART_Write_String@str+1,w,c
  1374  000D9C  6EDA               	movwf	fsr2h,c
  1375  000D9E  50DF               	movf	indf2,w,c
  1376  000DA0  6E35               	movwf	UART_Write_String@a,c
  1377                           
  1378                           ;main.c: 218: UART_Write(a);
  1379  000DA2  5035               	movf	UART_Write_String@a,w,c
  1380  000DA4  ECDF  F007         	call	_UART_Write
  1381                           
  1382                           ;main.c: 219: if (a == '\r') {
  1383  000DA8  0E0D               	movlw	13
  1384  000DAA  1835               	xorwf	UART_Write_String@a,w,c
  1385  000DAC  B4D8               	btfsc	status,2,c
  1386  000DAE  0012               	return	
  1387                           
  1388                           ;main.c: 220: return;
  1389  000DB0  4A33               	infsnz	UART_Write_String@i,f,c
  1390  000DB2  2A34               	incf	UART_Write_String@i+1,f,c
  1391  000DB4                     l76:
  1392  000DB4  5031               	movf	UART_Write_String@arrayLength,w,c
  1393  000DB6  5C33               	subwf	UART_Write_String@i,w,c
  1394  000DB8  5034               	movf	UART_Write_String@i+1,w,c
  1395  000DBA  0A80               	xorlw	128
  1396  000DBC  6E30               	movwf	??_UART_Write_String& (0+255),c
  1397  000DBE  5032               	movf	UART_Write_String@arrayLength+1,w,c
  1398  000DC0  0A80               	xorlw	128
  1399  000DC2  5830               	subwfb	??_UART_Write_String& (0+255),w,c
  1400  000DC4  B0D8               	btfsc	status,0,c
  1401  000DC6  0012               	return	
  1402  000DC8  D7E4               	goto	l77
  1403  000DCA                     __end_of_UART_Write_String:
  1404                           	opt stack 0
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1h	equ	0xFE2
  1413                           fsr1l	equ	0xFE1
  1414                           indf2	equ	0xFDF
  1415                           postinc2	equ	0xFDE
  1416                           postdec2	equ	0xFDD
  1417                           plusw2	equ	0xFDB
  1418                           fsr2h	equ	0xFDA
  1419                           fsr2l	equ	0xFD9
  1420                           status	equ	0xFD8
  1421                           
  1422 ;; *************** function _strlen *****************
  1423 ;; Defined at:
  1424 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strlen.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;  s               2   39[COMRAM] PTR const unsigned char 
  1427 ;;		 -> movementString(256), 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  cp              2   43[COMRAM] PTR const unsigned char 
  1430 ;;		 -> movementString(256), 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  2   39[COMRAM] unsigned int 
  1433 ;; Registers used:
  1434 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1440 ;;      Params:         2       0       0       0
  1441 ;;      Locals:         2       0       0       0
  1442 ;;      Temps:          2       0       0       0
  1443 ;;      Totals:         6       0       0       0
  1444 ;;Total ram usage:        6 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    2
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_UART_Write_String
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text5
  1455  000EA0                     __ptext5:
  1456                           	opt stack 0
  1457  000EA0                     _strlen:
  1458                           	opt stack 27
  1459                           
  1460                           ;incstack = 0
  1461  000EA0  C028  F02C         	movff	strlen@s,strlen@cp
  1462  000EA4  C029  F02D         	movff	strlen@s+1,strlen@cp+1
  1463  000EA8  D002               	goto	l707
  1464  000EAA  4A2C               	infsnz	strlen@cp,f,c
  1465  000EAC  2A2D               	incf	strlen@cp+1,f,c
  1466  000EAE                     l707:
  1467  000EAE  C02C  FFD9         	movff	strlen@cp,fsr2l
  1468  000EB2  C02D  FFDA         	movff	strlen@cp+1,fsr2h
  1469  000EB6  50DF               	movf	indf2,w,c
  1470  000EB8  A4D8               	btfss	status,2,c
  1471  000EBA  D7F7               	goto	l708
  1472  000EBC  C028  F02A         	movff	strlen@s,??_strlen
  1473  000EC0  C029  F02B         	movff	strlen@s+1,??_strlen+1
  1474  000EC4  1E2A               	comf	??_strlen,f,c
  1475  000EC6  1E2B               	comf	??_strlen+1,f,c
  1476  000EC8  4A2A               	infsnz	??_strlen,f,c
  1477  000ECA  2A2B               	incf	??_strlen+1,f,c
  1478  000ECC  502C               	movf	strlen@cp,w,c
  1479  000ECE  242A               	addwf	??_strlen,w,c
  1480  000ED0  6E28               	movwf	?_strlen,c
  1481  000ED2  502D               	movf	strlen@cp+1,w,c
  1482  000ED4  202B               	addwfc	??_strlen+1,w,c
  1483  000ED6  6E29               	movwf	?_strlen+1,c
  1484  000ED8  0012               	return	
  1485  000EDA                     __end_of_strlen:
  1486                           	opt stack 0
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           postdec1	equ	0xFE5
  1494                           fsr1h	equ	0xFE2
  1495                           fsr1l	equ	0xFE1
  1496                           indf2	equ	0xFDF
  1497                           postinc2	equ	0xFDE
  1498                           postdec2	equ	0xFDD
  1499                           plusw2	equ	0xFDB
  1500                           fsr2h	equ	0xFDA
  1501                           fsr2l	equ	0xFD9
  1502                           status	equ	0xFD8
  1503                           
  1504 ;; *************** function _UART_Write *****************
  1505 ;; Defined at:
  1506 ;;		line 225 in file "main.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  data            1    wreg     unsigned char 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  data            1   39[COMRAM] unsigned char 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		wreg
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1520 ;;      Params:         0       0       0       0
  1521 ;;      Locals:         1       0       0       0
  1522 ;;      Temps:          0       0       0       0
  1523 ;;      Totals:         1       0       0       0
  1524 ;;Total ram usage:        1 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    2
  1527 ;; This function calls:
  1528 ;;		Nothing
  1529 ;; This function is called by:
  1530 ;;		_UART_Write_String
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text6
  1535  000FBE                     __ptext6:
  1536                           	opt stack 0
  1537  000FBE                     _UART_Write:
  1538                           	opt stack 27
  1539                           
  1540                           ;incstack = 0
  1541                           ;UART_Write@data stored from wreg
  1542  000FBE  6E28               	movwf	UART_Write@data,c
  1543  000FC0                     
  1544                           ;main.c: 226: while(!TRMT);
  1545  000FC0  A2AC               	btfss	4012,1,c	;volatile
  1546  000FC2  D7FE               	goto	l1121
  1547                           
  1548                           ;main.c: 227: TXREG = data;
  1549  000FC4  C028  FFAD         	movff	UART_Write@data,4013	;volatile
  1550  000FC8  0012               	return		;funcret
  1551  000FCA                     __end_of_UART_Write:
  1552                           	opt stack 0
  1553                           tblptru	equ	0xFF8
  1554                           tblptrh	equ	0xFF7
  1555                           tblptrl	equ	0xFF6
  1556                           tablat	equ	0xFF5
  1557                           postinc0	equ	0xFEE
  1558                           wreg	equ	0xFE8
  1559                           postdec1	equ	0xFE5
  1560                           fsr1h	equ	0xFE2
  1561                           fsr1l	equ	0xFE1
  1562                           indf2	equ	0xFDF
  1563                           postinc2	equ	0xFDE
  1564                           postdec2	equ	0xFDD
  1565                           plusw2	equ	0xFDB
  1566                           fsr2h	equ	0xFDA
  1567                           fsr2l	equ	0xFD9
  1568                           status	equ	0xFD8
  1569                           
  1570 ;; *************** function _FillServoPositionString *****************
  1571 ;; Defined at:
  1572 ;;		line 233 in file "main.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;		None
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  newVerticalP    2   23[BANK0 ] int 
  1577 ;;  deltaVertica    2   21[BANK0 ] int 
  1578 ;;  newHorizonta    2   19[BANK0 ] int 
  1579 ;;  deltaHorizon    2   17[BANK0 ] int 
  1580 ;;  tmp             5   27[BANK0 ] unsigned char [5]
  1581 ;;  i               2   36[BANK0 ] unsigned int 
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  1    wreg      void 
  1584 ;; Registers used:
  1585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1591 ;;      Params:         0       0       0       0
  1592 ;;      Locals:         0      21       0       0
  1593 ;;      Temps:          0       4       0       0
  1594 ;;      Totals:         0      25       0       0
  1595 ;;Total ram usage:       25 bytes
  1596 ;; Hardware stack levels used:    1
  1597 ;; Hardware stack levels required when called:    4
  1598 ;; This function calls:
  1599 ;;		_EmptyMovementString
  1600 ;;		___wmul
  1601 ;;		_sprintf
  1602 ;;		_strcat
  1603 ;; This function is called by:
  1604 ;;		_main
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           	psect	text7
  1609  00035A                     __ptext7:
  1610                           	opt stack 0
  1611  00035A                     _FillServoPositionString:
  1612                           	opt stack 26
  1613                           
  1614                           ;main.c: 234: EmptyMovementString();
  1615                           
  1616                           ;incstack = 0
  1617  00035A  ECC3  F007         	call	_EmptyMovementString	;wreg free
  1618                           
  1619                           ;main.c: 235: char tmp[5];
  1620                           ;main.c: 236: unsigned int i = 0;
  1621  00035E  0E00               	movlw	0
  1622  000360  0100               	movlb	0	; () banked
  1623  000362  6F85               	movwf	(FillServoPositionString@i+1)& (0+255),b
  1624  000364  0E00               	movlw	0
  1625  000366  6F84               	movwf	FillServoPositionString@i& (0+255),b
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;main.c: 237: for(i = 0; i < 6; i++){
  1629  000368  0E00               	movlw	0
  1630  00036A  6F85               	movwf	(FillServoPositionString@i+1)& (0+255),b
  1631  00036C  0E00               	movlw	0
  1632  00036E  6F84               	movwf	FillServoPositionString@i& (0+255),b
  1633                           
  1634                           ; BSR set to: 0
  1635  000370  5185               	movf	(FillServoPositionString@i+1)& (0+255),w,b
  1636  000372  E105               	bnz	u540
  1637  000374  0E06               	movlw	6
  1638  000376  5D84               	subwf	FillServoPositionString@i& (0+255),w,b
  1639  000378  B0D8               	btfsc	status,0,c
  1640  00037A  D1E9               	goto	u550
  1641  00037C  D001               	goto	l89
  1642  00037E                     u540:
  1643                           
  1644                           ; BSR set to: 0
  1645  00037E  D1E7               	goto	u550
  1646  000380                     l89:
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;main.c: 238: strcat(movementString, "#");
  1650                           
  1651                           ; BSR set to: 0
  1652  000380  0E00               	movlw	low _movementString
  1653  000382  6E2E               	movwf	strcat@to,c
  1654  000384  0E02               	movlw	high _movementString
  1655  000386  6E2F               	movwf	strcat@to+1,c
  1656  000388  0E54               	movlw	low STR_1
  1657  00038A  6E30               	movwf	strcat@from,c
  1658  00038C  0E03               	movlw	high STR_1
  1659  00038E  6E31               	movwf	strcat@from+1,c
  1660  000390  EC8E  F006         	call	_strcat	;wreg free
  1661                           
  1662                           ;main.c: 239: strcat(movementString, servosets[i].horizontalServo);
  1663  000394  0E00               	movlw	low _movementString
  1664  000396  6E2E               	movwf	strcat@to,c
  1665  000398  0E02               	movlw	high _movementString
  1666  00039A  6E2F               	movwf	strcat@to+1,c
  1667  00039C  C084  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1668  0003A0  C085  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1669  0003A4  0E00               	movlw	0
  1670  0003A6  6E2B               	movwf	___wmul@multiplicand+1,c
  1671  0003A8  0E15               	movlw	21
  1672  0003AA  6E2A               	movwf	___wmul@multiplicand,c
  1673  0003AC  ECB0  F007         	call	___wmul	;wreg free
  1674  0003B0  0E02               	movlw	2
  1675  0003B2  2628               	addwf	?___wmul,f,c
  1676  0003B4  0E00               	movlw	0
  1677  0003B6  2229               	addwfc	?___wmul+1,f,c
  1678  0003B8  0E00               	movlw	low _servosets
  1679  0003BA  2428               	addwf	?___wmul,w,c
  1680  0003BC  6E30               	movwf	strcat@from,c
  1681  0003BE  0E01               	movlw	high _servosets
  1682  0003C0  2029               	addwfc	?___wmul+1,w,c
  1683  0003C2  6E31               	movwf	strcat@from+1,c
  1684  0003C4  EC8E  F006         	call	_strcat	;wreg free
  1685                           
  1686                           ;main.c: 240: strcat(movementString, "P");
  1687  0003C8  0E00               	movlw	low _movementString
  1688  0003CA  6E2E               	movwf	strcat@to,c
  1689  0003CC  0E02               	movlw	high _movementString
  1690  0003CE  6E2F               	movwf	strcat@to+1,c
  1691  0003D0  0E56               	movlw	low STR_2
  1692  0003D2  6E30               	movwf	strcat@from,c
  1693  0003D4  0E03               	movlw	high STR_2
  1694  0003D6  6E31               	movwf	strcat@from+1,c
  1695  0003D8  EC8E  F006         	call	_strcat	;wreg free
  1696                           
  1697                           ;main.c: 241: int deltaHorizontal = positions.horizontalMovement[servosets[i].currentSer
      +                          voPosition] * servosets[i].multiplierHorizontal * currentDirection[i];
  1698  0003DC  C084  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1699  0003E0  C085  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1700  0003E4  0E00               	movlw	0
  1701  0003E6  6E2B               	movwf	___wmul@multiplicand+1,c
  1702  0003E8  0E15               	movlw	21
  1703  0003EA  6E2A               	movwf	___wmul@multiplicand,c
  1704  0003EC  ECB0  F007         	call	___wmul	;wreg free
  1705  0003F0  0E11               	movlw	17
  1706  0003F2  2628               	addwf	?___wmul,f,c
  1707  0003F4  0E00               	movlw	0
  1708  0003F6  2229               	addwfc	?___wmul+1,f,c
  1709  0003F8  0E00               	movlw	low _servosets
  1710  0003FA  2428               	addwf	?___wmul,w,c
  1711  0003FC  6ED9               	movwf	fsr2l,c
  1712  0003FE  0E01               	movlw	high _servosets
  1713  000400  2029               	addwfc	?___wmul+1,w,c
  1714  000402  6EDA               	movwf	fsr2h,c
  1715  000404  CFDE F080          	movff	postinc2,_FillServoPositionString$1057
  1716  000408  CFDD F081          	movff	postdec2,_FillServoPositionString$1057+1
  1717                           
  1718                           ;main.c: 241: int deltaHorizontal = positions.horizontalMovement[servosets[i].currentSer
      +                          voPosition] * servosets[i].multiplierHorizontal * currentDirection[i];
  1719  00040C  C084  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1720  000410  C085  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1721  000414  0E00               	movlw	0
  1722  000416  6E2B               	movwf	___wmul@multiplicand+1,c
  1723  000418  0E15               	movlw	21
  1724  00041A  6E2A               	movwf	___wmul@multiplicand,c
  1725  00041C  ECB0  F007         	call	___wmul	;wreg free
  1726  000420  0E00               	movlw	low _servosets
  1727  000422  2428               	addwf	?___wmul,w,c
  1728  000424  6ED9               	movwf	fsr2l,c
  1729  000426  0E01               	movlw	high _servosets
  1730  000428  2029               	addwfc	?___wmul+1,w,c
  1731  00042A  6EDA               	movwf	fsr2h,c
  1732  00042C  CFDE F06D          	movff	postinc2,??_FillServoPositionString
  1733  000430  CFDD F06E          	movff	postdec2,??_FillServoPositionString+1
  1734  000434  90D8               	bcf	status,0,c
  1735  000436  0100               	movlb	0	; () banked
  1736  000438  376D               	rlcf	??_FillServoPositionString& (0+255),f,b
  1737  00043A  376E               	rlcf	(??_FillServoPositionString+1)& (0+255),f,b
  1738  00043C  0E08               	movlw	8
  1739  00043E  276D               	addwf	??_FillServoPositionString& (0+255),f,b
  1740  000440  0E00               	movlw	0
  1741  000442  236E               	addwfc	(??_FillServoPositionString+1)& (0+255),f,b
  1742  000444  0E01               	movlw	low _positions
  1743  000446  256D               	addwf	??_FillServoPositionString& (0+255),w,b
  1744  000448  6EF6               	movwf	tblptrl,c
  1745  00044A  0E03               	movlw	high _positions
  1746  00044C  216E               	addwfc	(??_FillServoPositionString+1)& (0+255),w,b
  1747  00044E  6EF7               	movwf	tblptrh,c
  1748  000450                     	if	0	;There are less than 3 active tblptr bytes
  1749  000450                     	endif
  1750  000450  0009               	tblrd		*+
  1751  000452  CFF5 F082          	movff	tablat,_FillServoPositionString$1058
  1752  000456  000A               	tblrd		*-
  1753  000458  CFF5 F083          	movff	tablat,_FillServoPositionString$1058+1
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 241: int deltaHorizontal = positions.horizontalMovement[servosets[i].currentSer
      +                          voPosition] * servosets[i].multiplierHorizontal * currentDirection[i];
  1757  00045C  C080  F028         	movff	_FillServoPositionString$1057,___wmul@multiplier
  1758  000460  C081  F029         	movff	_FillServoPositionString$1057+1,___wmul@multiplier+1
  1759  000464  C082  F02A         	movff	_FillServoPositionString$1058,___wmul@multiplicand
  1760  000468  C083  F02B         	movff	_FillServoPositionString$1058+1,___wmul@multiplicand+1
  1761  00046C  ECB0  F007         	call	___wmul	;wreg free
  1762  000470  C028  F079         	movff	?___wmul,_FillServoPositionString$1059
  1763  000474  C029  F07A         	movff	?___wmul+1,_FillServoPositionString$1059+1
  1764                           
  1765                           ;main.c: 241: int deltaHorizontal = positions.horizontalMovement[servosets[i].currentSer
      +                          voPosition] * servosets[i].multiplierHorizontal * currentDirection[i];
  1766  000478  C079  F028         	movff	_FillServoPositionString$1059,___wmul@multiplier
  1767  00047C  C07A  F029         	movff	_FillServoPositionString$1059+1,___wmul@multiplier+1
  1768  000480  C084  F06D         	movff	FillServoPositionString@i,??_FillServoPositionString
  1769  000484  C085  F06E         	movff	FillServoPositionString@i+1,??_FillServoPositionString+1
  1770  000488  90D8               	bcf	status,0,c
  1771  00048A  0100               	movlb	0	; () banked
  1772  00048C  376D               	rlcf	??_FillServoPositionString& (0+255),f,b
  1773  00048E  376E               	rlcf	(??_FillServoPositionString+1)& (0+255),f,b
  1774  000490  C086  F06F         	movff	_currentDirection,??_FillServoPositionString+2
  1775  000494  C087  F070         	movff	_currentDirection+1,??_FillServoPositionString+3
  1776  000498  516D               	movf	??_FillServoPositionString& (0+255),w,b
  1777  00049A  276F               	addwf	(??_FillServoPositionString+2)& (0+255),f,b
  1778  00049C  516E               	movf	(??_FillServoPositionString+1)& (0+255),w,b
  1779  00049E  2370               	addwfc	(??_FillServoPositionString+3)& (0+255),f,b
  1780  0004A0  C06F  FFF6         	movff	??_FillServoPositionString+2,tblptrl
  1781  0004A4  C070  FFF7         	movff	??_FillServoPositionString+3,tblptrh
  1782  0004A8                     	if	0	;tblptru may be non-zero
  1783  0004A8                     	endif
  1784  0004A8                     	if	0	;tblptru may be non-zero
  1785  0004A8                     	endif
  1786  0004A8  0009               	tblrd		*+
  1787  0004AA  CFF5 F02A          	movff	tablat,___wmul@multiplicand
  1788  0004AE  000A               	tblrd		*-
  1789  0004B0  CFF5 F02B          	movff	tablat,___wmul@multiplicand+1
  1790  0004B4  ECB0  F007         	call	___wmul	;wreg free
  1791  0004B8  C028  F071         	movff	?___wmul,FillServoPositionString@deltaHorizontal
  1792  0004BC  C029  F072         	movff	?___wmul+1,FillServoPositionString@deltaHorizontal+1
  1793                           
  1794                           ;main.c: 242: int newHorizontalPosition = servosets[i].horizontalMediumPosition + deltaH
      +                          orizontal;
  1795  0004C0  C084  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1796  0004C4  C085  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1797  0004C8  0E00               	movlw	0
  1798  0004CA  6E2B               	movwf	___wmul@multiplicand+1,c
  1799  0004CC  0E15               	movlw	21
  1800  0004CE  6E2A               	movwf	___wmul@multiplicand,c
  1801  0004D0  ECB0  F007         	call	___wmul	;wreg free
  1802  0004D4  0E0B               	movlw	11
  1803  0004D6  2628               	addwf	?___wmul,f,c
  1804  0004D8  0E00               	movlw	0
  1805  0004DA  2229               	addwfc	?___wmul+1,f,c
  1806  0004DC  0E00               	movlw	low _servosets
  1807  0004DE  2428               	addwf	?___wmul,w,c
  1808  0004E0  6ED9               	movwf	fsr2l,c
  1809  0004E2  0E01               	movlw	high _servosets
  1810  0004E4  2029               	addwfc	?___wmul+1,w,c
  1811  0004E6  6EDA               	movwf	fsr2h,c
  1812  0004E8  CFDE F06D          	movff	postinc2,??_FillServoPositionString
  1813  0004EC  CFDD F06E          	movff	postdec2,??_FillServoPositionString+1
  1814  0004F0  0100               	movlb	0	; () banked
  1815  0004F2  5171               	movf	FillServoPositionString@deltaHorizontal& (0+255),w,b
  1816  0004F4  256D               	addwf	??_FillServoPositionString& (0+255),w,b
  1817  0004F6  6F73               	movwf	FillServoPositionString@newHorizontalPosition& (0+255),b
  1818  0004F8  5172               	movf	(FillServoPositionString@deltaHorizontal+1)& (0+255),w,b
  1819  0004FA  216E               	addwfc	(??_FillServoPositionString+1)& (0+255),w,b
  1820  0004FC  6F74               	movwf	(FillServoPositionString@newHorizontalPosition+1)& (0+255),b
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;main.c: 243: sprintf(tmp, "%d", newHorizontalPosition);
  1824  0004FE  0E7B               	movlw	low FillServoPositionString@tmp
  1825  000500  6F60               	movwf	sprintf@sp& (0+255),b
  1826  000502  0E00               	movlw	high FillServoPositionString@tmp
  1827  000504  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1828  000506  0E51               	movlw	low STR_3
  1829  000508  6F62               	movwf	sprintf@f& (0+255),b
  1830  00050A  0E03               	movlw	high STR_3
  1831  00050C  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1832  00050E  C073  F064         	movff	FillServoPositionString@newHorizontalPosition,?_sprintf+4
  1833  000512  C074  F065         	movff	FillServoPositionString@newHorizontalPosition+1,?_sprintf+5
  1834  000516  EC11  F005         	call	_sprintf	;wreg free
  1835                           
  1836                           ;main.c: 244: strcat(movementString, tmp);
  1837  00051A  0E00               	movlw	low _movementString
  1838  00051C  6E2E               	movwf	strcat@to,c
  1839  00051E  0E02               	movlw	high _movementString
  1840  000520  6E2F               	movwf	strcat@to+1,c
  1841  000522  0E7B               	movlw	low FillServoPositionString@tmp
  1842  000524  6E30               	movwf	strcat@from,c
  1843  000526  0E00               	movlw	high FillServoPositionString@tmp
  1844  000528  6E31               	movwf	strcat@from+1,c
  1845  00052A  EC8E  F006         	call	_strcat	;wreg free
  1846                           
  1847                           ;main.c: 245: strcat(movementString, "#");
  1848  00052E  0E00               	movlw	low _movementString
  1849  000530  6E2E               	movwf	strcat@to,c
  1850  000532  0E02               	movlw	high _movementString
  1851  000534  6E2F               	movwf	strcat@to+1,c
  1852  000536  0E54               	movlw	low STR_1
  1853  000538  6E30               	movwf	strcat@from,c
  1854  00053A  0E03               	movlw	high STR_1
  1855  00053C  6E31               	movwf	strcat@from+1,c
  1856  00053E  EC8E  F006         	call	_strcat	;wreg free
  1857                           
  1858                           ;main.c: 246: strcat(movementString, servosets[i].upperVerticalServo);
  1859  000542  0E00               	movlw	low _movementString
  1860  000544  6E2E               	movwf	strcat@to,c
  1861  000546  0E02               	movlw	high _movementString
  1862  000548  6E2F               	movwf	strcat@to+1,c
  1863  00054A  C084  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1864  00054E  C085  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1865  000552  0E00               	movlw	0
  1866  000554  6E2B               	movwf	___wmul@multiplicand+1,c
  1867  000556  0E15               	movlw	21
  1868  000558  6E2A               	movwf	___wmul@multiplicand,c
  1869  00055A  ECB0  F007         	call	___wmul	;wreg free
  1870  00055E  0E05               	movlw	5
  1871  000560  2628               	addwf	?___wmul,f,c
  1872  000562  0E00               	movlw	0
  1873  000564  2229               	addwfc	?___wmul+1,f,c
  1874  000566  0E00               	movlw	low _servosets
  1875  000568  2428               	addwf	?___wmul,w,c
  1876  00056A  6E30               	movwf	strcat@from,c
  1877  00056C  0E01               	movlw	high _servosets
  1878  00056E  2029               	addwfc	?___wmul+1,w,c
  1879  000570  6E31               	movwf	strcat@from+1,c
  1880  000572  EC8E  F006         	call	_strcat	;wreg free
  1881                           
  1882                           ;main.c: 247: strcat(movementString, "P");
  1883  000576  0E00               	movlw	low _movementString
  1884  000578  6E2E               	movwf	strcat@to,c
  1885  00057A  0E02               	movlw	high _movementString
  1886  00057C  6E2F               	movwf	strcat@to+1,c
  1887  00057E  0E56               	movlw	low STR_2
  1888  000580  6E30               	movwf	strcat@from,c
  1889  000582  0E03               	movlw	high STR_2
  1890  000584  6E31               	movwf	strcat@from+1,c
  1891  000586  EC8E  F006         	call	_strcat	;wreg free
  1892                           
  1893                           ;main.c: 248: int deltaVertical = positions.verticalMovement[servosets[i].currentServoPo
      +                          sition] * servosets[i].multiplierVertical;
  1894  00058A  C084  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1895  00058E  C085  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1896  000592  0E00               	movlw	0
  1897  000594  6E2B               	movwf	___wmul@multiplicand+1,c
  1898  000596  0E15               	movlw	21
  1899  000598  6E2A               	movwf	___wmul@multiplicand,c
  1900  00059A  ECB0  F007         	call	___wmul	;wreg free
  1901  00059E  0E13               	movlw	19
  1902  0005A0  2628               	addwf	?___wmul,f,c
  1903  0005A2  0E00               	movlw	0
  1904  0005A4  2229               	addwfc	?___wmul+1,f,c
  1905  0005A6  0E00               	movlw	low _servosets
  1906  0005A8  2428               	addwf	?___wmul,w,c
  1907  0005AA  6ED9               	movwf	fsr2l,c
  1908  0005AC  0E01               	movlw	high _servosets
  1909  0005AE  2029               	addwfc	?___wmul+1,w,c
  1910  0005B0  6EDA               	movwf	fsr2h,c
  1911  0005B2  CFDE F080          	movff	postinc2,_FillServoPositionString$1057
  1912  0005B6  CFDD F081          	movff	postdec2,_FillServoPositionString$1057+1
  1913                           
  1914                           ;main.c: 248: int deltaVertical = positions.verticalMovement[servosets[i].currentServoPo
      +                          sition] * servosets[i].multiplierVertical;
  1915  0005BA  C084  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1916  0005BE  C085  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1917  0005C2  0E00               	movlw	0
  1918  0005C4  6E2B               	movwf	___wmul@multiplicand+1,c
  1919  0005C6  0E15               	movlw	21
  1920  0005C8  6E2A               	movwf	___wmul@multiplicand,c
  1921  0005CA  ECB0  F007         	call	___wmul	;wreg free
  1922  0005CE  0E00               	movlw	low _servosets
  1923  0005D0  2428               	addwf	?___wmul,w,c
  1924  0005D2  6ED9               	movwf	fsr2l,c
  1925  0005D4  0E01               	movlw	high _servosets
  1926  0005D6  2029               	addwfc	?___wmul+1,w,c
  1927  0005D8  6EDA               	movwf	fsr2h,c
  1928  0005DA  CFDE F06D          	movff	postinc2,??_FillServoPositionString
  1929  0005DE  CFDD F06E          	movff	postdec2,??_FillServoPositionString+1
  1930  0005E2  90D8               	bcf	status,0,c
  1931  0005E4  0100               	movlb	0	; () banked
  1932  0005E6  376D               	rlcf	??_FillServoPositionString& (0+255),f,b
  1933  0005E8  376E               	rlcf	(??_FillServoPositionString+1)& (0+255),f,b
  1934  0005EA  0E01               	movlw	low _positions
  1935  0005EC  256D               	addwf	??_FillServoPositionString& (0+255),w,b
  1936  0005EE  6EF6               	movwf	tblptrl,c
  1937  0005F0  0E03               	movlw	high _positions
  1938  0005F2  216E               	addwfc	(??_FillServoPositionString+1)& (0+255),w,b
  1939  0005F4  6EF7               	movwf	tblptrh,c
  1940  0005F6                     	if	0	;There are less than 3 active tblptr bytes
  1941  0005F6                     	endif
  1942  0005F6  0009               	tblrd		*+
  1943  0005F8  CFF5 F082          	movff	tablat,_FillServoPositionString$1058
  1944  0005FC  000A               	tblrd		*-
  1945  0005FE  CFF5 F083          	movff	tablat,_FillServoPositionString$1058+1
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;main.c: 248: int deltaVertical = positions.verticalMovement[servosets[i].currentServoPo
      +                          sition] * servosets[i].multiplierVertical;
  1949  000602  C080  F028         	movff	_FillServoPositionString$1057,___wmul@multiplier
  1950  000606  C081  F029         	movff	_FillServoPositionString$1057+1,___wmul@multiplier+1
  1951  00060A  C082  F02A         	movff	_FillServoPositionString$1058,___wmul@multiplicand
  1952  00060E  C083  F02B         	movff	_FillServoPositionString$1058+1,___wmul@multiplicand+1
  1953  000612  ECB0  F007         	call	___wmul	;wreg free
  1954  000616  C028  F075         	movff	?___wmul,FillServoPositionString@deltaVertical
  1955  00061A  C029  F076         	movff	?___wmul+1,FillServoPositionString@deltaVertical+1
  1956                           
  1957                           ;main.c: 249: int newVerticalPosition = servosets[i].verticalUpperMediumPosition + delta
      +                          Vertical;
  1958  00061E  C084  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  1959  000622  C085  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  1960  000626  0E00               	movlw	0
  1961  000628  6E2B               	movwf	___wmul@multiplicand+1,c
  1962  00062A  0E15               	movlw	21
  1963  00062C  6E2A               	movwf	___wmul@multiplicand,c
  1964  00062E  ECB0  F007         	call	___wmul	;wreg free
  1965  000632  0E0D               	movlw	13
  1966  000634  2628               	addwf	?___wmul,f,c
  1967  000636  0E00               	movlw	0
  1968  000638  2229               	addwfc	?___wmul+1,f,c
  1969  00063A  0E00               	movlw	low _servosets
  1970  00063C  2428               	addwf	?___wmul,w,c
  1971  00063E  6ED9               	movwf	fsr2l,c
  1972  000640  0E01               	movlw	high _servosets
  1973  000642  2029               	addwfc	?___wmul+1,w,c
  1974  000644  6EDA               	movwf	fsr2h,c
  1975  000646  CFDE F06D          	movff	postinc2,??_FillServoPositionString
  1976  00064A  CFDD F06E          	movff	postdec2,??_FillServoPositionString+1
  1977  00064E  0100               	movlb	0	; () banked
  1978  000650  5175               	movf	FillServoPositionString@deltaVertical& (0+255),w,b
  1979  000652  256D               	addwf	??_FillServoPositionString& (0+255),w,b
  1980  000654  6F77               	movwf	FillServoPositionString@newVerticalPosition& (0+255),b
  1981  000656  5176               	movf	(FillServoPositionString@deltaVertical+1)& (0+255),w,b
  1982  000658  216E               	addwfc	(??_FillServoPositionString+1)& (0+255),w,b
  1983  00065A  6F78               	movwf	(FillServoPositionString@newVerticalPosition+1)& (0+255),b
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;main.c: 250: sprintf(tmp, "%d", newVerticalPosition);
  1987  00065C  0E7B               	movlw	low FillServoPositionString@tmp
  1988  00065E  6F60               	movwf	sprintf@sp& (0+255),b
  1989  000660  0E00               	movlw	high FillServoPositionString@tmp
  1990  000662  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  1991  000664  0E51               	movlw	low STR_3
  1992  000666  6F62               	movwf	sprintf@f& (0+255),b
  1993  000668  0E03               	movlw	high STR_3
  1994  00066A  6F63               	movwf	(sprintf@f+1)& (0+255),b
  1995  00066C  C077  F064         	movff	FillServoPositionString@newVerticalPosition,?_sprintf+4
  1996  000670  C078  F065         	movff	FillServoPositionString@newVerticalPosition+1,?_sprintf+5
  1997  000674  EC11  F005         	call	_sprintf	;wreg free
  1998                           
  1999                           ;main.c: 251: strcat(movementString, tmp);
  2000  000678  0E00               	movlw	low _movementString
  2001  00067A  6E2E               	movwf	strcat@to,c
  2002  00067C  0E02               	movlw	high _movementString
  2003  00067E  6E2F               	movwf	strcat@to+1,c
  2004  000680  0E7B               	movlw	low FillServoPositionString@tmp
  2005  000682  6E30               	movwf	strcat@from,c
  2006  000684  0E00               	movlw	high FillServoPositionString@tmp
  2007  000686  6E31               	movwf	strcat@from+1,c
  2008  000688  EC8E  F006         	call	_strcat	;wreg free
  2009                           
  2010                           ;main.c: 252: strcat(movementString, "#");
  2011  00068C  0E00               	movlw	low _movementString
  2012  00068E  6E2E               	movwf	strcat@to,c
  2013  000690  0E02               	movlw	high _movementString
  2014  000692  6E2F               	movwf	strcat@to+1,c
  2015  000694  0E54               	movlw	low STR_1
  2016  000696  6E30               	movwf	strcat@from,c
  2017  000698  0E03               	movlw	high STR_1
  2018  00069A  6E31               	movwf	strcat@from+1,c
  2019  00069C  EC8E  F006         	call	_strcat	;wreg free
  2020                           
  2021                           ;main.c: 253: strcat(movementString, servosets[i].lowerVerticalServo);
  2022  0006A0  0E00               	movlw	low _movementString
  2023  0006A2  6E2E               	movwf	strcat@to,c
  2024  0006A4  0E02               	movlw	high _movementString
  2025  0006A6  6E2F               	movwf	strcat@to+1,c
  2026  0006A8  C084  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  2027  0006AC  C085  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  2028  0006B0  0E00               	movlw	0
  2029  0006B2  6E2B               	movwf	___wmul@multiplicand+1,c
  2030  0006B4  0E15               	movlw	21
  2031  0006B6  6E2A               	movwf	___wmul@multiplicand,c
  2032  0006B8  ECB0  F007         	call	___wmul	;wreg free
  2033  0006BC  0E08               	movlw	8
  2034  0006BE  2628               	addwf	?___wmul,f,c
  2035  0006C0  0E00               	movlw	0
  2036  0006C2  2229               	addwfc	?___wmul+1,f,c
  2037  0006C4  0E00               	movlw	low _servosets
  2038  0006C6  2428               	addwf	?___wmul,w,c
  2039  0006C8  6E30               	movwf	strcat@from,c
  2040  0006CA  0E01               	movlw	high _servosets
  2041  0006CC  2029               	addwfc	?___wmul+1,w,c
  2042  0006CE  6E31               	movwf	strcat@from+1,c
  2043  0006D0  EC8E  F006         	call	_strcat	;wreg free
  2044                           
  2045                           ;main.c: 254: strcat(movementString, "P");
  2046  0006D4  0E00               	movlw	low _movementString
  2047  0006D6  6E2E               	movwf	strcat@to,c
  2048  0006D8  0E02               	movlw	high _movementString
  2049  0006DA  6E2F               	movwf	strcat@to+1,c
  2050  0006DC  0E56               	movlw	low STR_2
  2051  0006DE  6E30               	movwf	strcat@from,c
  2052  0006E0  0E03               	movlw	high STR_2
  2053  0006E2  6E31               	movwf	strcat@from+1,c
  2054  0006E4  EC8E  F006         	call	_strcat	;wreg free
  2055                           
  2056                           ;main.c: 255: sprintf(tmp, "%d", servosets[i].verticalLowerMediumPosition);
  2057  0006E8  0E7B               	movlw	low FillServoPositionString@tmp
  2058  0006EA  0100               	movlb	0	; () banked
  2059  0006EC  6F60               	movwf	sprintf@sp& (0+255),b
  2060  0006EE  0E00               	movlw	high FillServoPositionString@tmp
  2061  0006F0  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  2062  0006F2  0E51               	movlw	low STR_3
  2063  0006F4  6F62               	movwf	sprintf@f& (0+255),b
  2064  0006F6  0E03               	movlw	high STR_3
  2065  0006F8  6F63               	movwf	(sprintf@f+1)& (0+255),b
  2066  0006FA  C084  F028         	movff	FillServoPositionString@i,___wmul@multiplier
  2067  0006FE  C085  F029         	movff	FillServoPositionString@i+1,___wmul@multiplier+1
  2068  000702  0E00               	movlw	0
  2069  000704  6E2B               	movwf	___wmul@multiplicand+1,c
  2070  000706  0E15               	movlw	21
  2071  000708  6E2A               	movwf	___wmul@multiplicand,c
  2072  00070A  ECB0  F007         	call	___wmul	;wreg free
  2073  00070E  0E0F               	movlw	15
  2074  000710  2628               	addwf	?___wmul,f,c
  2075  000712  0E00               	movlw	0
  2076  000714  2229               	addwfc	?___wmul+1,f,c
  2077  000716  0E00               	movlw	low _servosets
  2078  000718  2428               	addwf	?___wmul,w,c
  2079  00071A  6ED9               	movwf	fsr2l,c
  2080  00071C  0E01               	movlw	high _servosets
  2081  00071E  2029               	addwfc	?___wmul+1,w,c
  2082  000720  6EDA               	movwf	fsr2h,c
  2083  000722  CFDE F064          	movff	postinc2,?_sprintf+4
  2084  000726  CFDD F065          	movff	postdec2,?_sprintf+5
  2085  00072A  EC11  F005         	call	_sprintf	;wreg free
  2086                           
  2087                           ;main.c: 256: strcat(movementString, tmp);
  2088  00072E  0E00               	movlw	low _movementString
  2089  000730  6E2E               	movwf	strcat@to,c
  2090  000732  0E02               	movlw	high _movementString
  2091  000734  6E2F               	movwf	strcat@to+1,c
  2092  000736  0E7B               	movlw	low FillServoPositionString@tmp
  2093  000738  6E30               	movwf	strcat@from,c
  2094  00073A  0E00               	movlw	high FillServoPositionString@tmp
  2095  00073C  6E31               	movwf	strcat@from+1,c
  2096  00073E  EC8E  F006         	call	_strcat	;wreg free
  2097  000742  0100               	movlb	0	; () banked
  2098  000744  4B84               	infsnz	FillServoPositionString@i& (0+255),f,b
  2099  000746  2B85               	incf	(FillServoPositionString@i+1)& (0+255),f,b
  2100                           
  2101                           ; BSR set to: 0
  2102  000748  5185               	movf	(FillServoPositionString@i+1)& (0+255),w,b
  2103  00074A  E101               	bnz	l1403
  2104  00074C  D613               	goto	L2
  2105  00074E                     u550:
  2106  00074E                     l1403:
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;main.c: 257: }
  2110                           ;main.c: 258: strcat(movementString, "T400\r");
  2111  00074E  0E00               	movlw	low _movementString
  2112  000750  6E2E               	movwf	strcat@to,c
  2113  000752  0E02               	movlw	high _movementString
  2114  000754  6E2F               	movwf	strcat@to+1,c
  2115  000756  0E4B               	movlw	low STR_10
  2116  000758  6E30               	movwf	strcat@from,c
  2117  00075A  0E03               	movlw	high STR_10
  2118  00075C  6E31               	movwf	strcat@from+1,c
  2119  00075E  EC8E  F006         	call	_strcat	;wreg free
  2120  000762  0012               	return		;funcret
  2121  000764                     __end_of_FillServoPositionString:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           tblptrh	equ	0xFF7
  2125                           tblptrl	equ	0xFF6
  2126                           tablat	equ	0xFF5
  2127                           postinc0	equ	0xFEE
  2128                           wreg	equ	0xFE8
  2129                           postdec1	equ	0xFE5
  2130                           fsr1h	equ	0xFE2
  2131                           fsr1l	equ	0xFE1
  2132                           indf2	equ	0xFDF
  2133                           postinc2	equ	0xFDE
  2134                           postdec2	equ	0xFDD
  2135                           plusw2	equ	0xFDB
  2136                           fsr2h	equ	0xFDA
  2137                           fsr2l	equ	0xFD9
  2138                           status	equ	0xFD8
  2139                           
  2140 ;; *************** function _strcat *****************
  2141 ;; Defined at:
  2142 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcat.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;  to              2   45[COMRAM] PTR unsigned char 
  2145 ;;		 -> movementString(256), 
  2146 ;;  from            2   47[COMRAM] PTR const unsigned char 
  2147 ;;		 -> STR_22(2), STR_20(2), STR_19(2), STR_18(2), 
  2148 ;;		 -> STR_16(2), STR_15(2), STR_14(2), InitServos@tmp(5), 
  2149 ;;		 -> STR_12(2), STR_11(2), STR_10(6), STR_8(2), 
  2150 ;;		 -> STR_7(2), STR_5(2), STR_4(2), FillServoPositionString@tmp(5), 
  2151 ;;		 -> STR_2(2), STR_1(2), servosets.lowerVerticalServo(3), servosets.upperVerticalServo(3), 
  2152 ;;		 -> servosets.horizontalServo(3), servosets(126), 
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;  cp              2   49[COMRAM] PTR unsigned char 
  2155 ;;		 -> movementString(256), 
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  2   45[COMRAM] PTR unsigned char 
  2158 ;; Registers used:
  2159 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2165 ;;      Params:         4       0       0       0
  2166 ;;      Locals:         2       0       0       0
  2167 ;;      Temps:          0       0       0       0
  2168 ;;      Totals:         6       0       0       0
  2169 ;;Total ram usage:        6 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    2
  2172 ;; This function calls:
  2173 ;;		Nothing
  2174 ;; This function is called by:
  2175 ;;		_FillServoPositionString
  2176 ;;		_InitServos
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text8
  2181  000D1C                     __ptext8:
  2182                           	opt stack 0
  2183  000D1C                     _strcat:
  2184                           	opt stack 27
  2185                           
  2186                           ;incstack = 0
  2187  000D1C  C02E  F032         	movff	strcat@to,strcat@cp
  2188  000D20  C02F  F033         	movff	strcat@to+1,strcat@cp+1
  2189  000D24  D002               	goto	l698
  2190  000D26  4A32               	infsnz	strcat@cp,f,c
  2191  000D28  2A33               	incf	strcat@cp+1,f,c
  2192  000D2A                     l698:
  2193  000D2A  C032  FFD9         	movff	strcat@cp,fsr2l
  2194  000D2E  C033  FFDA         	movff	strcat@cp+1,fsr2h
  2195  000D32  50DF               	movf	indf2,w,c
  2196  000D34  B4D8               	btfsc	status,2,c
  2197  000D36  D005               	goto	l701
  2198  000D38  D7F6               	goto	l699
  2199  000D3A  4A32               	infsnz	strcat@cp,f,c
  2200  000D3C  2A33               	incf	strcat@cp+1,f,c
  2201  000D3E  4A30               	infsnz	strcat@from,f,c
  2202  000D40  2A31               	incf	strcat@from+1,f,c
  2203  000D42                     l701:
  2204  000D42  C030  FFF6         	movff	strcat@from,tblptrl
  2205  000D46  C031  FFF7         	movff	strcat@from+1,tblptrh
  2206  000D4A  6AF8               	clrf	tblptru,c
  2207  000D4C  C032  FFD9         	movff	strcat@cp,fsr2l
  2208  000D50  C033  FFDA         	movff	strcat@cp+1,fsr2h
  2209  000D54  0E02               	movlw	(high __ramtop+-1)
  2210  000D56  64F7               	cpfsgt	tblptrh,c
  2211  000D58  D003               	bra	u427
  2212  000D5A  0008               	tblrd		*
  2213  000D5C  50F5               	movf	tablat,w,c
  2214  000D5E  D005               	bra	u420
  2215  000D60                     u427:
  2216  000D60  CFF6 FFE1          	movff	tblptrl,fsr1l
  2217  000D64  CFF7 FFE2          	movff	tblptrh,fsr1h
  2218  000D68  50E7               	movf	indf1,w,c
  2219  000D6A                     u420:
  2220  000D6A  6EDF               	movwf	indf2,c
  2221  000D6C  50DF               	movf	indf2,w,c
  2222  000D6E  B4D8               	btfsc	status,2,c
  2223  000D70  0012               	return	
  2224  000D72  D7E3               	goto	l702
  2225  000D74                     __end_of_strcat:
  2226                           	opt stack 0
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           postinc0	equ	0xFEE
  2232                           wreg	equ	0xFE8
  2233                           indf1	equ	0xFE7
  2234                           postdec1	equ	0xFE5
  2235                           fsr1h	equ	0xFE2
  2236                           fsr1l	equ	0xFE1
  2237                           indf2	equ	0xFDF
  2238                           postinc2	equ	0xFDE
  2239                           postdec2	equ	0xFDD
  2240                           plusw2	equ	0xFDB
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _sprintf *****************
  2246 ;; Defined at:
  2247 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  2250 ;;		 -> InitServos@tmp(5), FillServoPositionString@tmp(5), 
  2251 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  2252 ;;		 -> STR_21(3), STR_17(3), STR_13(3), STR_9(3), 
  2253 ;;		 -> STR_6(3), STR_3(3), 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  tmpval          4    0        struct .
  2256 ;;  cp              3    0        PTR const unsigned char 
  2257 ;;  val             2   10[BANK0 ] unsigned int 
  2258 ;;  ap              2    6[BANK0 ] PTR void [1]
  2259 ;;		 -> ?_sprintf(2), 
  2260 ;;  len             2    0        unsigned int 
  2261 ;;  c               1   12[BANK0 ] char 
  2262 ;;  prec            1    9[BANK0 ] char 
  2263 ;;  flag            1    8[BANK0 ] unsigned char 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  2    0[BANK0 ] int 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2273 ;;      Params:         0       6       0       0
  2274 ;;      Locals:         0       7       0       0
  2275 ;;      Temps:          1       0       0       0
  2276 ;;      Totals:         1      13       0       0
  2277 ;;Total ram usage:       14 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    3
  2280 ;; This function calls:
  2281 ;;		___lwdiv
  2282 ;;		___lwmod
  2283 ;; This function is called by:
  2284 ;;		_FillServoPositionString
  2285 ;;		_InitServos
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text9
  2290  000A22                     __ptext9:
  2291                           	opt stack 0
  2292  000A22                     _sprintf:
  2293                           	opt stack 26
  2294                           
  2295                           ;doprnt.c: 494: va_list ap;
  2296                           ;doprnt.c: 499: signed char c;
  2297                           ;doprnt.c: 506: signed char prec;
  2298                           ;doprnt.c: 508: unsigned char flag;
  2299                           ;doprnt.c: 523: union {
  2300                           ;doprnt.c: 524: unsigned long vd;
  2301                           ;doprnt.c: 525: double integ;
  2302                           ;doprnt.c: 526: } tmpval;
  2303                           ;doprnt.c: 528: unsigned int val;
  2304                           ;doprnt.c: 529: unsigned len;
  2305                           ;doprnt.c: 530: const char * cp;
  2306                           ;doprnt.c: 533: *ap = __va_start();
  2307                           
  2308                           ;incstack = 0
  2309  000A22  0E64               	movlw	low (?_sprintf+4)
  2310  000A24  0100               	movlb	0	; () banked
  2311  000A26  6F66               	movwf	sprintf@ap& (0+255),b
  2312  000A28  0E00               	movlw	high (?_sprintf+4)
  2313  000A2A  6F67               	movwf	(sprintf@ap+1)& (0+255),b
  2314                           
  2315                           ;doprnt.c: 536: while(c = *f++) {
  2316  000A2C  D08D               	goto	u500
  2317  000A2E                     
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 538: if(c != '%')
  2320                           
  2321                           ; BSR set to: 0
  2322  000A2E  0E25               	movlw	37
  2323  000A30  196C               	xorwf	sprintf@c& (0+255),w,b
  2324  000A32  B4D8               	btfsc	status,2,c
  2325  000A34  D009               	goto	l127
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;doprnt.c: 540: {
  2329                           ;doprnt.c: 541: ((*sp++ = (c)));
  2330  000A36  C060  FFD9         	movff	sprintf@sp,fsr2l
  2331  000A3A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2332  000A3E  C06C  FFDF         	movff	sprintf@c,indf2
  2333                           
  2334                           ; BSR set to: 0
  2335  000A42  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2336  000A44  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2337                           
  2338                           ;doprnt.c: 542: continue;
  2339  000A46  D080               	goto	u500
  2340  000A48                     l127:
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;doprnt.c: 543: }
  2344                           ;doprnt.c: 548: flag = 0;
  2345                           
  2346                           ; BSR set to: 0
  2347  000A48  0E00               	movlw	0
  2348  000A4A  6F68               	movwf	sprintf@flag& (0+255),b
  2349                           
  2350                           ; BSR set to: 0
  2351                           
  2352                           ; BSR set to: 0
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;doprnt.c: 822: }
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;doprnt.c: 813: continue;
  2359                           
  2360                           ;doprnt.c: 802: default:
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;doprnt.c: 698: case 'i':
  2364                           ;doprnt.c: 699: break;
  2365                           
  2366                           ; BSR set to: 0
  2367                           
  2368                           ;doprnt.c: 697: case 'd':
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;doprnt.c: 638: goto alldone;
  2372                           
  2373                           ;doprnt.c: 637: case 0:
  2374                           
  2375                           ;doprnt.c: 635: switch(c = *f++) {
  2376  000A4C  C062  FFF6         	movff	sprintf@f,tblptrl
  2377  000A50  C063  FFF7         	movff	sprintf@f+1,tblptrh
  2378  000A54  4B62               	infsnz	sprintf@f& (0+255),f,b
  2379  000A56  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  2380  000A58                     	if	0	;tblptru may be non-zero
  2381  000A58                     	endif
  2382  000A58                     	if	0	;tblptru may be non-zero
  2383  000A58                     	endif
  2384  000A58  0008               	tblrd		*
  2385  000A5A  CFF5 F06C          	movff	tablat,sprintf@c
  2386  000A5E  516C               	movf	sprintf@c& (0+255),w,b
  2387                           
  2388                           ; Switch size 1, requested type "space"
  2389                           ; Number of cases is 3, Range of values is 0 to 105
  2390                           ; switch strategies available:
  2391                           ; Name         Instructions Cycles
  2392                           ; simple_byte           10     6 (average)
  2393                           ;	Chosen strategy is simple_byte
  2394  000A60  0A00               	xorlw	0	; case 0
  2395  000A62  B4D8               	btfsc	status,2,c
  2396  000A64  D07D               	goto	u510
  2397  000A66  0A64               	xorlw	100	; case 100
  2398  000A68  B4D8               	btfsc	status,2,c
  2399  000A6A  D003               	goto	l133
  2400  000A6C  0A0D               	xorlw	13	; case 105
  2401  000A6E  A4D8               	btfss	status,2,c
  2402  000A70  D06B               	goto	u500
  2403  000A72                     l133:
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;doprnt.c: 1253: {
  2407                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2408                           
  2409                           ; BSR set to: 0
  2410  000A72  C066  FFD9         	movff	sprintf@ap,fsr2l
  2411  000A76  C067  FFDA         	movff	sprintf@ap+1,fsr2h
  2412  000A7A  CFDE F06A          	movff	postinc2,sprintf@val
  2413  000A7E  CFDD F06B          	movff	postdec2,sprintf@val+1
  2414                           
  2415                           ; BSR set to: 0
  2416  000A82  0E02               	movlw	2
  2417  000A84  2766               	addwf	sprintf@ap& (0+255),f,b
  2418  000A86  0E00               	movlw	0
  2419  000A88  2367               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;doprnt.c: 1261: if((int)val < 0) {
  2423  000A8A  AF6B               	btfss	(sprintf@val+1)& (0+255),7,b
  2424  000A8C  D006               	goto	l135
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;doprnt.c: 1262: flag |= 0x03;
  2428  000A8E  0E03               	movlw	3
  2429  000A90  1368               	iorwf	sprintf@flag& (0+255),f,b
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;doprnt.c: 1263: val = -val;
  2433  000A92  6D6A               	negf	sprintf@val& (0+255),b
  2434  000A94  1F6B               	comf	(sprintf@val+1)& (0+255),f,b
  2435  000A96  B0D8               	btfsc	status,0,c
  2436  000A98  2B6B               	incf	(sprintf@val+1)& (0+255),f,b
  2437  000A9A                     l135:
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;doprnt.c: 1264: }
  2441                           ;doprnt.c: 1266: }
  2442                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2443                           
  2444                           ; BSR set to: 0
  2445  000A9A  0E01               	movlw	1
  2446  000A9C  6F6C               	movwf	sprintf@c& (0+255),b
  2447  000A9E                     l1225:
  2448                           
  2449                           ; BSR set to: 0
  2450  000A9E  0E05               	movlw	5
  2451  000AA0  196C               	xorwf	sprintf@c& (0+255),w,b
  2452  000AA2  B4D8               	btfsc	status,2,c
  2453  000AA4  D012               	goto	u480
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;doprnt.c: 1306: if(val < dpowers[c])
  2457                           
  2458                           ; BSR set to: 0
  2459                           
  2460                           ; BSR set to: 0
  2461  000AA6  516C               	movf	sprintf@c& (0+255),w,b
  2462  000AA8  0D02               	mullw	2
  2463  000AAA  0E11               	movlw	low _dpowers
  2464  000AAC  24F3               	addwf	prodl,w,c
  2465  000AAE  6EF6               	movwf	tblptrl,c
  2466  000AB0  0E03               	movlw	high _dpowers
  2467  000AB2  20F4               	addwfc	prodh,w,c
  2468  000AB4  6EF7               	movwf	tblptrh,c
  2469  000AB6                     	if	0	;There are less than 3 active tblptr bytes
  2470  000AB6                     	endif
  2471  000AB6  0009               	tblrd		*+
  2472  000AB8  50F5               	movf	tablat,w,c
  2473  000ABA  5D6A               	subwf	sprintf@val& (0+255),w,b
  2474  000ABC  0009               	tblrd		*+
  2475  000ABE  50F5               	movf	tablat,w,c
  2476  000AC0  596B               	subwfb	(sprintf@val+1)& (0+255),w,b
  2477  000AC2  A0D8               	btfss	status,0,c
  2478  000AC4  D002               	goto	u480
  2479                           
  2480                           ; BSR set to: 0
  2481                           
  2482                           ; BSR set to: 0
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;doprnt.c: 1307: break;
  2486  000AC6  2B6C               	incf	sprintf@c& (0+255),f,b
  2487  000AC8  D7EA               	goto	l1225
  2488  000ACA                     u480:
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;doprnt.c: 1422: {
  2492                           ;doprnt.c: 1438: if(flag & 0x03)
  2493                           
  2494                           ; BSR set to: 0
  2495  000ACA  C068  F034         	movff	sprintf@flag,??_sprintf
  2496  000ACE  0E03               	movlw	3
  2497  000AD0  1634               	andwf	??_sprintf,f,c
  2498  000AD2  B4D8               	btfsc	status,2,c
  2499  000AD4  D008               	goto	l139
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2503  000AD6  C060  FFD9         	movff	sprintf@sp,fsr2l
  2504  000ADA  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2505  000ADE  0E2D               	movlw	45
  2506  000AE0  6EDF               	movwf	indf2,c
  2507                           
  2508                           ; BSR set to: 0
  2509  000AE2  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2510  000AE4  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2511  000AE6                     l139:
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;doprnt.c: 1469: }
  2515                           ;doprnt.c: 1472: prec = c;
  2516                           
  2517                           ; BSR set to: 0
  2518  000AE6  C06C  F069         	movff	sprintf@c,sprintf@prec
  2519                           
  2520                           ;doprnt.c: 1474: while(prec--) {
  2521  000AEA  D02A               	goto	l140
  2522  000AEC                     
  2523                           ; BSR set to: 0
  2524                           ;doprnt.c: 1478: {
  2525                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2526                           
  2527                           ; BSR set to: 0
  2528  000AEC  5169               	movf	sprintf@prec& (0+255),w,b
  2529  000AEE  0D02               	mullw	2
  2530  000AF0  0E11               	movlw	low _dpowers
  2531  000AF2  24F3               	addwf	prodl,w,c
  2532  000AF4  6EF6               	movwf	tblptrl,c
  2533  000AF6  0E03               	movlw	high _dpowers
  2534  000AF8  20F4               	addwfc	prodh,w,c
  2535  000AFA  6EF7               	movwf	tblptrh,c
  2536  000AFC                     	if	0	;There are less than 3 active tblptr bytes
  2537  000AFC                     	endif
  2538  000AFC  0009               	tblrd		*+
  2539  000AFE  CFF5 F02A          	movff	tablat,___lwdiv@divisor
  2540  000B02  000A               	tblrd		*-
  2541  000B04  CFF5 F02B          	movff	tablat,___lwdiv@divisor+1
  2542  000B08  C06A  F028         	movff	sprintf@val,___lwdiv@dividend
  2543  000B0C  C06B  F029         	movff	sprintf@val+1,___lwdiv@dividend+1
  2544  000B10  ECE5  F006         	call	___lwdiv	;wreg free
  2545  000B14  C028  F02F         	movff	?___lwdiv,___lwmod@dividend
  2546  000B18  C029  F030         	movff	?___lwdiv+1,___lwmod@dividend+1
  2547  000B1C  0E00               	movlw	0
  2548  000B1E  6E32               	movwf	___lwmod@divisor+1,c
  2549  000B20  0E0A               	movlw	10
  2550  000B22  6E31               	movwf	___lwmod@divisor,c
  2551  000B24  EC2F  F007         	call	___lwmod	;wreg free
  2552  000B28  502F               	movf	?___lwmod,w,c
  2553  000B2A  0F30               	addlw	48
  2554  000B2C  0100               	movlb	0	; () banked
  2555  000B2E  6F6C               	movwf	sprintf@c& (0+255),b
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;doprnt.c: 1523: }
  2559                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2560  000B30  C060  FFD9         	movff	sprintf@sp,fsr2l
  2561  000B34  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2562  000B38  C06C  FFDF         	movff	sprintf@c,indf2
  2563                           
  2564                           ; BSR set to: 0
  2565  000B3C  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2566  000B3E  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2567  000B40                     l140:
  2568                           
  2569                           ; BSR set to: 0
  2570                           
  2571                           ; BSR set to: 0
  2572  000B40  0769               	decf	sprintf@prec& (0+255),f,b
  2573  000B42  2969               	incf	sprintf@prec& (0+255),w,b
  2574  000B44  A4D8               	btfss	status,2,c
  2575  000B46  D7D2               	goto	l141
  2576  000B48                     u500:
  2577                           
  2578                           ; BSR set to: 0
  2579                           
  2580                           ; BSR set to: 0
  2581                           
  2582                           ; BSR set to: 0
  2583  000B48  C062  FFF6         	movff	sprintf@f,tblptrl
  2584  000B4C  C063  FFF7         	movff	sprintf@f+1,tblptrh
  2585  000B50  4B62               	infsnz	sprintf@f& (0+255),f,b
  2586  000B52  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  2587  000B54                     	if	0	;tblptru may be non-zero
  2588  000B54                     	endif
  2589  000B54                     	if	0	;tblptru may be non-zero
  2590  000B54                     	endif
  2591  000B54  0008               	tblrd		*
  2592  000B56  CFF5 F06C          	movff	tablat,sprintf@c
  2593  000B5A  516C               	movf	sprintf@c& (0+255),w,b
  2594  000B5C  A4D8               	btfss	status,2,c
  2595  000B5E  D767               	goto	l126
  2596  000B60                     u510:
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;doprnt.c: 1538: *sp = 0;
  2600                           
  2601                           ; BSR set to: 0
  2602                           
  2603                           ;doprnt.c: 1525: }
  2604                           ;doprnt.c: 1533: }
  2605                           ;doprnt.c: 1535: alldone:
  2606                           
  2607                           ; BSR set to: 0
  2608  000B60  C060  FFD9         	movff	sprintf@sp,fsr2l
  2609  000B64  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2610  000B68  0E00               	movlw	0
  2611  000B6A  6EDF               	movwf	indf2,c
  2612  000B6C  0012               	return	
  2613  000B6E                     __end_of_sprintf:
  2614                           	opt stack 0
  2615                           tblptru	equ	0xFF8
  2616                           tblptrh	equ	0xFF7
  2617                           tblptrl	equ	0xFF6
  2618                           tablat	equ	0xFF5
  2619                           prodh	equ	0xFF4
  2620                           prodl	equ	0xFF3
  2621                           postinc0	equ	0xFEE
  2622                           wreg	equ	0xFE8
  2623                           indf1	equ	0xFE7
  2624                           postdec1	equ	0xFE5
  2625                           fsr1h	equ	0xFE2
  2626                           fsr1l	equ	0xFE1
  2627                           indf2	equ	0xFDF
  2628                           postinc2	equ	0xFDE
  2629                           postdec2	equ	0xFDD
  2630                           plusw2	equ	0xFDB
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function ___lwmod *****************
  2636 ;; Defined at:
  2637 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  dividend        2   46[COMRAM] unsigned int 
  2640 ;;  divisor         2   48[COMRAM] unsigned int 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  counter         1   50[COMRAM] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  2   46[COMRAM] unsigned int 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2652 ;;      Params:         4       0       0       0
  2653 ;;      Locals:         1       0       0       0
  2654 ;;      Temps:          0       0       0       0
  2655 ;;      Totals:         5       0       0       0
  2656 ;;Total ram usage:        5 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    2
  2659 ;; This function calls:
  2660 ;;		Nothing
  2661 ;; This function is called by:
  2662 ;;		_sprintf
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text10
  2667  000E5E                     __ptext10:
  2668                           	opt stack 0
  2669  000E5E                     ___lwmod:
  2670                           	opt stack 26
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;incstack = 0
  2674  000E5E  5031               	movf	___lwmod@divisor,w,c
  2675  000E60  1032               	iorwf	___lwmod@divisor+1,w,c
  2676  000E62  B4D8               	btfsc	status,2,c
  2677  000E64  D018               	goto	l563
  2678  000E66  0E01               	movlw	1
  2679  000E68  6E33               	movwf	___lwmod@counter,c
  2680  000E6A  D004               	goto	l558
  2681  000E6C  90D8               	bcf	status,0,c
  2682  000E6E  3631               	rlcf	___lwmod@divisor,f,c
  2683  000E70  3632               	rlcf	___lwmod@divisor+1,f,c
  2684  000E72  2A33               	incf	___lwmod@counter,f,c
  2685  000E74                     l558:
  2686  000E74  AE32               	btfss	___lwmod@divisor+1,7,c
  2687  000E76  D7FA               	goto	l559
  2688  000E78                     u370:
  2689  000E78  5031               	movf	___lwmod@divisor,w,c
  2690  000E7A  5C2F               	subwf	___lwmod@dividend,w,c
  2691  000E7C  5032               	movf	___lwmod@divisor+1,w,c
  2692  000E7E  5830               	subwfb	___lwmod@dividend+1,w,c
  2693  000E80  A0D8               	btfss	status,0,c
  2694  000E82  D004               	goto	l562
  2695  000E84  5031               	movf	___lwmod@divisor,w,c
  2696  000E86  5E2F               	subwf	___lwmod@dividend,f,c
  2697  000E88  5032               	movf	___lwmod@divisor+1,w,c
  2698  000E8A  5A30               	subwfb	___lwmod@dividend+1,f,c
  2699  000E8C                     l562:
  2700  000E8C  90D8               	bcf	status,0,c
  2701  000E8E  3232               	rrcf	___lwmod@divisor+1,f,c
  2702  000E90  3231               	rrcf	___lwmod@divisor,f,c
  2703  000E92  2E33               	decfsz	___lwmod@counter,f,c
  2704  000E94  D7F1               	goto	u370
  2705  000E96                     l563:
  2706  000E96  C02F  F02F         	movff	___lwmod@dividend,?___lwmod
  2707  000E9A  C030  F030         	movff	___lwmod@dividend+1,?___lwmod+1
  2708  000E9E  0012               	return		;funcret
  2709  000EA0                     __end_of___lwmod:
  2710                           	opt stack 0
  2711                           tblptru	equ	0xFF8
  2712                           tblptrh	equ	0xFF7
  2713                           tblptrl	equ	0xFF6
  2714                           tablat	equ	0xFF5
  2715                           prodh	equ	0xFF4
  2716                           prodl	equ	0xFF3
  2717                           postinc0	equ	0xFEE
  2718                           wreg	equ	0xFE8
  2719                           indf1	equ	0xFE7
  2720                           postdec1	equ	0xFE5
  2721                           fsr1h	equ	0xFE2
  2722                           fsr1l	equ	0xFE1
  2723                           indf2	equ	0xFDF
  2724                           postinc2	equ	0xFDE
  2725                           postdec2	equ	0xFDD
  2726                           plusw2	equ	0xFDB
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function ___lwdiv *****************
  2732 ;; Defined at:
  2733 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;  dividend        2   39[COMRAM] unsigned int 
  2736 ;;  divisor         2   41[COMRAM] unsigned int 
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;  quotient        2   43[COMRAM] unsigned int 
  2739 ;;  counter         1   45[COMRAM] unsigned char 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  2   39[COMRAM] unsigned int 
  2742 ;; Registers used:
  2743 ;;		wreg, status,2, status,0
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2749 ;;      Params:         4       0       0       0
  2750 ;;      Locals:         3       0       0       0
  2751 ;;      Temps:          0       0       0       0
  2752 ;;      Totals:         7       0       0       0
  2753 ;;Total ram usage:        7 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    2
  2756 ;; This function calls:
  2757 ;;		Nothing
  2758 ;; This function is called by:
  2759 ;;		_sprintf
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text11
  2764  000DCA                     __ptext11:
  2765                           	opt stack 0
  2766  000DCA                     ___lwdiv:
  2767                           	opt stack 26
  2768                           
  2769                           ;incstack = 0
  2770  000DCA  0E00               	movlw	0
  2771  000DCC  6E2D               	movwf	___lwdiv@quotient+1,c
  2772  000DCE  0E00               	movlw	0
  2773  000DD0  6E2C               	movwf	___lwdiv@quotient,c
  2774  000DD2  502A               	movf	___lwdiv@divisor,w,c
  2775  000DD4  102B               	iorwf	___lwdiv@divisor+1,w,c
  2776  000DD6  B4D8               	btfsc	status,2,c
  2777  000DD8  D01C               	goto	l553
  2778  000DDA  0E01               	movlw	1
  2779  000DDC  6E2E               	movwf	___lwdiv@counter,c
  2780  000DDE  D004               	goto	l548
  2781  000DE0  90D8               	bcf	status,0,c
  2782  000DE2  362A               	rlcf	___lwdiv@divisor,f,c
  2783  000DE4  362B               	rlcf	___lwdiv@divisor+1,f,c
  2784  000DE6  2A2E               	incf	___lwdiv@counter,f,c
  2785  000DE8                     l548:
  2786  000DE8  AE2B               	btfss	___lwdiv@divisor+1,7,c
  2787  000DEA  D7FA               	goto	l549
  2788  000DEC                     u340:
  2789  000DEC  90D8               	bcf	status,0,c
  2790  000DEE  362C               	rlcf	___lwdiv@quotient,f,c
  2791  000DF0  362D               	rlcf	___lwdiv@quotient+1,f,c
  2792  000DF2  502A               	movf	___lwdiv@divisor,w,c
  2793  000DF4  5C28               	subwf	___lwdiv@dividend,w,c
  2794  000DF6  502B               	movf	___lwdiv@divisor+1,w,c
  2795  000DF8  5829               	subwfb	___lwdiv@dividend+1,w,c
  2796  000DFA  A0D8               	btfss	status,0,c
  2797  000DFC  D005               	goto	l552
  2798  000DFE  502A               	movf	___lwdiv@divisor,w,c
  2799  000E00  5E28               	subwf	___lwdiv@dividend,f,c
  2800  000E02  502B               	movf	___lwdiv@divisor+1,w,c
  2801  000E04  5A29               	subwfb	___lwdiv@dividend+1,f,c
  2802  000E06  802C               	bsf	___lwdiv@quotient,0,c
  2803  000E08                     l552:
  2804  000E08  90D8               	bcf	status,0,c
  2805  000E0A  322B               	rrcf	___lwdiv@divisor+1,f,c
  2806  000E0C  322A               	rrcf	___lwdiv@divisor,f,c
  2807  000E0E  2E2E               	decfsz	___lwdiv@counter,f,c
  2808  000E10  D7ED               	goto	u340
  2809  000E12                     l553:
  2810  000E12  C02C  F028         	movff	___lwdiv@quotient,?___lwdiv
  2811  000E16  C02D  F029         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2812  000E1A  0012               	return		;funcret
  2813  000E1C                     __end_of___lwdiv:
  2814                           	opt stack 0
  2815                           tblptru	equ	0xFF8
  2816                           tblptrh	equ	0xFF7
  2817                           tblptrl	equ	0xFF6
  2818                           tablat	equ	0xFF5
  2819                           prodh	equ	0xFF4
  2820                           prodl	equ	0xFF3
  2821                           postinc0	equ	0xFEE
  2822                           wreg	equ	0xFE8
  2823                           indf1	equ	0xFE7
  2824                           postdec1	equ	0xFE5
  2825                           fsr1h	equ	0xFE2
  2826                           fsr1l	equ	0xFE1
  2827                           indf2	equ	0xFDF
  2828                           postinc2	equ	0xFDE
  2829                           postdec2	equ	0xFDD
  2830                           plusw2	equ	0xFDB
  2831                           fsr2h	equ	0xFDA
  2832                           fsr2l	equ	0xFD9
  2833                           status	equ	0xFD8
  2834                           
  2835 ;; *************** function ___wmul *****************
  2836 ;; Defined at:
  2837 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  multiplier      2   39[COMRAM] unsigned int 
  2840 ;;  multiplicand    2   41[COMRAM] unsigned int 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;  product         2   43[COMRAM] unsigned int 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  2   39[COMRAM] unsigned int 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, status,0, prodl, prodh
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2852 ;;      Params:         4       0       0       0
  2853 ;;      Locals:         2       0       0       0
  2854 ;;      Temps:          0       0       0       0
  2855 ;;      Totals:         6       0       0       0
  2856 ;;Total ram usage:        6 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    2
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		_FillServoPositionString
  2863 ;;		_InitServos
  2864 ;;		_RotatePositions
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text12
  2869  000F60                     __ptext12:
  2870                           	opt stack 0
  2871  000F60                     ___wmul:
  2872                           	opt stack 27
  2873                           
  2874                           ;incstack = 0
  2875  000F60  5028               	movf	___wmul@multiplier,w,c
  2876  000F62  022A               	mulwf	___wmul@multiplicand,c
  2877  000F64  CFF3 F02C          	movff	prodl,___wmul@product
  2878  000F68  CFF4 F02D          	movff	prodh,___wmul@product+1
  2879  000F6C  5028               	movf	___wmul@multiplier,w,c
  2880  000F6E  022B               	mulwf	___wmul@multiplicand+1,c
  2881  000F70  50F3               	movf	prodl,w,c
  2882  000F72  262D               	addwf	___wmul@product+1,f,c
  2883  000F74  5029               	movf	___wmul@multiplier+1,w,c
  2884  000F76  022A               	mulwf	___wmul@multiplicand,c
  2885  000F78  50F3               	movf	prodl,w,c
  2886  000F7A  262D               	addwf	___wmul@product+1,f,c
  2887  000F7C  C02C  F028         	movff	___wmul@product,?___wmul
  2888  000F80  C02D  F029         	movff	___wmul@product+1,?___wmul+1
  2889  000F84  0012               	return	
  2890  000F86                     __end_of___wmul:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           prodh	equ	0xFF4
  2897                           prodl	equ	0xFF3
  2898                           postinc0	equ	0xFEE
  2899                           wreg	equ	0xFE8
  2900                           indf1	equ	0xFE7
  2901                           postdec1	equ	0xFE5
  2902                           fsr1h	equ	0xFE2
  2903                           fsr1l	equ	0xFE1
  2904                           indf2	equ	0xFDF
  2905                           postinc2	equ	0xFDE
  2906                           postdec2	equ	0xFDD
  2907                           plusw2	equ	0xFDB
  2908                           fsr2h	equ	0xFDA
  2909                           fsr2l	equ	0xFD9
  2910                           status	equ	0xFD8
  2911                           
  2912 ;; *************** function _EmptyMovementString *****************
  2913 ;; Defined at:
  2914 ;;		line 262 in file "main.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;		None
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;		None
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  1    wreg      void 
  2921 ;; Registers used:
  2922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2928 ;;      Params:         0       0       0       0
  2929 ;;      Locals:         0       0       0       0
  2930 ;;      Temps:          0       0       0       0
  2931 ;;      Totals:         0       0       0       0
  2932 ;;Total ram usage:        0 bytes
  2933 ;; Hardware stack levels used:    1
  2934 ;; Hardware stack levels required when called:    3
  2935 ;; This function calls:
  2936 ;;		_memset
  2937 ;; This function is called by:
  2938 ;;		_FillServoPositionString
  2939 ;;		_InitServos
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text13
  2944  000F86                     __ptext13:
  2945                           	opt stack 0
  2946  000F86                     _EmptyMovementString:
  2947                           	opt stack 26
  2948                           
  2949                           ;main.c: 263: memset(&movementString[0], 0, sizeof(movementString));
  2950                           
  2951                           ;incstack = 0
  2952  000F86  0E00               	movlw	low _movementString
  2953  000F88  6E28               	movwf	memset@p1,c
  2954  000F8A  0E02               	movlw	high _movementString
  2955  000F8C  6E29               	movwf	memset@p1+1,c
  2956  000F8E  0E00               	movlw	0
  2957  000F90  6E2B               	movwf	memset@c+1,c
  2958  000F92  0E00               	movlw	0
  2959  000F94  6E2A               	movwf	memset@c,c
  2960  000F96  0E01               	movlw	1
  2961  000F98  6E2D               	movwf	memset@n+1,c
  2962  000F9A  0E00               	movlw	0
  2963  000F9C  6E2C               	movwf	memset@n,c
  2964  000F9E  EC9A  F007         	call	_memset	;wreg free
  2965  000FA2  0012               	return		;funcret
  2966  000FA4                     __end_of_EmptyMovementString:
  2967                           	opt stack 0
  2968                           tblptru	equ	0xFF8
  2969                           tblptrh	equ	0xFF7
  2970                           tblptrl	equ	0xFF6
  2971                           tablat	equ	0xFF5
  2972                           prodh	equ	0xFF4
  2973                           prodl	equ	0xFF3
  2974                           postinc0	equ	0xFEE
  2975                           wreg	equ	0xFE8
  2976                           indf1	equ	0xFE7
  2977                           postdec1	equ	0xFE5
  2978                           fsr1h	equ	0xFE2
  2979                           fsr1l	equ	0xFE1
  2980                           indf2	equ	0xFDF
  2981                           postinc2	equ	0xFDE
  2982                           postdec2	equ	0xFDD
  2983                           plusw2	equ	0xFDB
  2984                           fsr2h	equ	0xFDA
  2985                           fsr2l	equ	0xFD9
  2986                           status	equ	0xFD8
  2987                           
  2988 ;; *************** function _memset *****************
  2989 ;; Defined at:
  2990 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memset.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  p1              2   39[COMRAM] PTR void 
  2993 ;;		 -> movementString(256), 
  2994 ;;  c               2   41[COMRAM] int 
  2995 ;;  n               2   43[COMRAM] unsigned int 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;  p               2   45[COMRAM] PTR unsigned char 
  2998 ;;		 -> movementString(256), 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  2   39[COMRAM] PTR void 
  3001 ;; Registers used:
  3002 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3008 ;;      Params:         6       0       0       0
  3009 ;;      Locals:         2       0       0       0
  3010 ;;      Temps:          0       0       0       0
  3011 ;;      Totals:         8       0       0       0
  3012 ;;Total ram usage:        8 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    2
  3015 ;; This function calls:
  3016 ;;		Nothing
  3017 ;; This function is called by:
  3018 ;;		_EmptyMovementString
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           	psect	text14
  3023  000F34                     __ptext14:
  3024                           	opt stack 0
  3025  000F34                     _memset:
  3026                           	opt stack 26
  3027                           
  3028                           ;incstack = 0
  3029  000F34  C028  F02E         	movff	memset@p1,memset@p
  3030  000F38  C029  F02F         	movff	memset@p1+1,memset@p+1
  3031  000F3C  D008               	goto	l572
  3032  000F3E                     l1127:
  3033  000F3E  C02E  FFD9         	movff	memset@p,fsr2l
  3034  000F42  C02F  FFDA         	movff	memset@p+1,fsr2h
  3035  000F46  C02A  FFDF         	movff	memset@c,indf2
  3036  000F4A  4A2E               	infsnz	memset@p,f,c
  3037  000F4C  2A2F               	incf	memset@p+1,f,c
  3038  000F4E                     l572:
  3039  000F4E  062C               	decf	memset@n,f,c
  3040  000F50  A0D8               	btfss	status,0,c
  3041  000F52  062D               	decf	memset@n+1,f,c
  3042  000F54  282C               	incf	memset@n,w,c
  3043  000F56  E1F3               	bnz	l1127
  3044  000F58  282D               	incf	memset@n+1,w,c
  3045  000F5A  B4D8               	btfsc	status,2,c
  3046  000F5C  0012               	return	
  3047  000F5E  D7EF               	goto	l573
  3048  000F60                     __end_of_memset:
  3049                           	opt stack 0
  3050                           tblptru	equ	0xFF8
  3051                           tblptrh	equ	0xFF7
  3052                           tblptrl	equ	0xFF6
  3053                           tablat	equ	0xFF5
  3054                           prodh	equ	0xFF4
  3055                           prodl	equ	0xFF3
  3056                           postinc0	equ	0xFEE
  3057                           wreg	equ	0xFE8
  3058                           indf1	equ	0xFE7
  3059                           postdec1	equ	0xFE5
  3060                           fsr1h	equ	0xFE2
  3061                           fsr1l	equ	0xFE1
  3062                           indf2	equ	0xFDF
  3063                           postinc2	equ	0xFDE
  3064                           postdec2	equ	0xFDD
  3065                           plusw2	equ	0xFDB
  3066                           fsr2h	equ	0xFDA
  3067                           fsr2l	equ	0xFD9
  3068                           status	equ	0xFD8
  3069                           
  3070 ;; *************** function _ConfigureOscillator *****************
  3071 ;; Defined at:
  3072 ;;		line 23 in file "system.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;		None
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;		None
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      void 
  3079 ;; Registers used:
  3080 ;;		wreg, status,2
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3086 ;;      Params:         0       0       0       0
  3087 ;;      Locals:         0       0       0       0
  3088 ;;      Temps:          0       0       0       0
  3089 ;;      Totals:         0       0       0       0
  3090 ;;Total ram usage:        0 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    2
  3093 ;; This function calls:
  3094 ;;		Nothing
  3095 ;; This function is called by:
  3096 ;;		_main
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099                           
  3100                           	psect	text15
  3101  000FA4                     __ptext15:
  3102                           	opt stack 0
  3103  000FA4                     _ConfigureOscillator:
  3104                           	opt stack 28
  3105                           
  3106                           ;system.c: 25: OSCTUNEbits.INTSRC = 0b1;
  3107                           
  3108                           ;incstack = 0
  3109  000FA4  8E9B               	bsf	3995,7,c	;volatile
  3110                           
  3111                           ;system.c: 26: OSCTUNEbits.PLLEN = 0b0;
  3112  000FA6  9C9B               	bcf	3995,6,c	;volatile
  3113                           
  3114                           ;system.c: 27: OSCTUNEbits.TUN = 0b00000;
  3115  000FA8  909B               	bcf	3995,0,c	;volatile
  3116  000FAA  929B               	bcf	3995,1,c	;volatile
  3117  000FAC  949B               	bcf	3995,2,c	;volatile
  3118  000FAE  969B               	bcf	3995,3,c	;volatile
  3119  000FB0  989B               	bcf	3995,4,c	;volatile
  3120                           
  3121                           ;system.c: 28: OSCCONbits.IDLEN = 0b0;
  3122  000FB2  9ED3               	bcf	4051,7,c	;volatile
  3123                           
  3124                           ;system.c: 29: OSCCONbits.IRCF = 0b101;
  3125  000FB4  50D3               	movf	4051,w,c	;volatile
  3126  000FB6  0B8F               	andlw	-113
  3127  000FB8  0950               	iorlw	80
  3128  000FBA  6ED3               	movwf	4051,c	;volatile
  3129  000FBC  0012               	return		;funcret
  3130  000FBE                     __end_of_ConfigureOscillator:
  3131                           	opt stack 0
  3132                           tblptru	equ	0xFF8
  3133                           tblptrh	equ	0xFF7
  3134                           tblptrl	equ	0xFF6
  3135                           tablat	equ	0xFF5
  3136                           prodh	equ	0xFF4
  3137                           prodl	equ	0xFF3
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           indf1	equ	0xFE7
  3141                           postdec1	equ	0xFE5
  3142                           fsr1h	equ	0xFE2
  3143                           fsr1l	equ	0xFE1
  3144                           indf2	equ	0xFDF
  3145                           postinc2	equ	0xFDE
  3146                           postdec2	equ	0xFDD
  3147                           plusw2	equ	0xFDB
  3148                           fsr2h	equ	0xFDA
  3149                           fsr2l	equ	0xFD9
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _low_isr *****************
  3153 ;; Defined at:
  3154 ;;		line 67 in file "interrupts.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		None
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3168 ;;      Params:         0       0       0       0
  3169 ;;      Locals:         0       0       0       0
  3170 ;;      Temps:         21       0       0       0
  3171 ;;      Totals:        21       0       0       0
  3172 ;;Total ram usage:       21 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    1
  3175 ;; This function calls:
  3176 ;;		Nothing
  3177 ;; This function is called by:
  3178 ;;		Interrupt level 1
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	intcodelo
  3183  000018                     __pintcodelo:
  3184                           	opt stack 0
  3185  000018                     _low_isr:
  3186                           	opt stack 26
  3187                           
  3188                           ;incstack = 0
  3189  000018  8036               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3190  00001A  CFD8 F013          	movff	status,??_low_isr
  3191  00001E  CFE8 F014          	movff	wreg,??_low_isr+1
  3192  000022  CFE0 F015          	movff	bsr,??_low_isr+2
  3193  000026  CFFA F016          	movff	pclath,??_low_isr+3
  3194  00002A  CFFB F017          	movff	pclatu,??_low_isr+4
  3195  00002E  CFE9 F018          	movff	fsr0l,??_low_isr+5
  3196  000032  CFEA F019          	movff	fsr0h,??_low_isr+6
  3197  000036  CFE1 F01A          	movff	fsr1l,??_low_isr+7
  3198  00003A  CFE2 F01B          	movff	fsr1h,??_low_isr+8
  3199  00003E  CFD9 F01C          	movff	fsr2l,??_low_isr+9
  3200  000042  CFDA F01D          	movff	fsr2h,??_low_isr+10
  3201  000046  CFF3 F01E          	movff	prodl,??_low_isr+11
  3202  00004A  CFF4 F01F          	movff	prodh,??_low_isr+12
  3203  00004E  CFF6 F020          	movff	tblptrl,??_low_isr+13
  3204  000052  CFF7 F021          	movff	tblptrh,??_low_isr+14
  3205  000056  CFF8 F022          	movff	tblptru,??_low_isr+15
  3206  00005A  CFF5 F023          	movff	tablat,??_low_isr+16
  3207  00005E  C036  F024         	movff	btemp,??_low_isr+17
  3208  000062  C037  F025         	movff	btemp+1,??_low_isr+18
  3209  000066  C038  F026         	movff	btemp+2,??_low_isr+19
  3210  00006A  C039  F027         	movff	btemp+3,??_low_isr+20
  3211  00006E  C027  F039         	movff	??_low_isr+20,btemp+3
  3212  000072  C026  F038         	movff	??_low_isr+19,btemp+2
  3213  000076  C025  F037         	movff	??_low_isr+18,btemp+1
  3214  00007A  C024  F036         	movff	??_low_isr+17,btemp
  3215  00007E  C023  FFF5         	movff	??_low_isr+16,tablat
  3216  000082  C022  FFF8         	movff	??_low_isr+15,tblptru
  3217  000086  C021  FFF7         	movff	??_low_isr+14,tblptrh
  3218  00008A  C020  FFF6         	movff	??_low_isr+13,tblptrl
  3219  00008E  C01F  FFF4         	movff	??_low_isr+12,prodh
  3220  000092  C01E  FFF3         	movff	??_low_isr+11,prodl
  3221  000096  C01D  FFDA         	movff	??_low_isr+10,fsr2h
  3222  00009A  C01C  FFD9         	movff	??_low_isr+9,fsr2l
  3223  00009E  C01B  FFE2         	movff	??_low_isr+8,fsr1h
  3224  0000A2  C01A  FFE1         	movff	??_low_isr+7,fsr1l
  3225  0000A6  C019  FFEA         	movff	??_low_isr+6,fsr0h
  3226  0000AA  C018  FFE9         	movff	??_low_isr+5,fsr0l
  3227  0000AE  C017  FFFB         	movff	??_low_isr+4,pclatu
  3228  0000B2  C016  FFFA         	movff	??_low_isr+3,pclath
  3229  0000B6  C015  FFE0         	movff	??_low_isr+2,bsr
  3230  0000BA  C014  FFE8         	movff	??_low_isr+1,wreg
  3231  0000BE  C013  FFD8         	movff	??_low_isr,status
  3232  0000C2  9036               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3233  0000C4  0010               	retfie	
  3234  0000C6                     __end_of_low_isr:
  3235                           	opt stack 0
  3236                           pclatu	equ	0xFFB
  3237                           pclath	equ	0xFFA
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           prodh	equ	0xFF4
  3243                           prodl	equ	0xFF3
  3244                           postinc0	equ	0xFEE
  3245                           fsr0h	equ	0xFEA
  3246                           fsr0l	equ	0xFE9
  3247                           wreg	equ	0xFE8
  3248                           indf1	equ	0xFE7
  3249                           postdec1	equ	0xFE5
  3250                           fsr1h	equ	0xFE2
  3251                           fsr1l	equ	0xFE1
  3252                           bsr	equ	0xFE0
  3253                           indf2	equ	0xFDF
  3254                           postinc2	equ	0xFDE
  3255                           postdec2	equ	0xFDD
  3256                           plusw2	equ	0xFDB
  3257                           fsr2h	equ	0xFDA
  3258                           fsr2l	equ	0xFD9
  3259                           status	equ	0xFD8
  3260                           
  3261 ;; *************** function _high_isr *****************
  3262 ;; Defined at:
  3263 ;;		line 27 in file "interrupts.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;		None
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;		None
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  1    wreg      void 
  3270 ;; Registers used:
  3271 ;;		None
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3277 ;;      Params:         0       0       0       0
  3278 ;;      Locals:         0       0       0       0
  3279 ;;      Temps:         18       0       0       0
  3280 ;;      Totals:        18       0       0       0
  3281 ;;Total ram usage:       18 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; This function calls:
  3284 ;;		Nothing
  3285 ;; This function is called by:
  3286 ;;		Interrupt level 2
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	intcode
  3291  000008                     __pintcode:
  3292                           	opt stack 0
  3293  000008                     _high_isr:
  3294                           	opt stack 26
  3295                           
  3296                           ;incstack = 0
  3297  000008  8236               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3298  00000A  ED04  F006         	call	int_func,f	;refresh shadow registers
  3299                           pclatu	equ	0xFFB
  3300                           pclath	equ	0xFFA
  3301                           tblptru	equ	0xFF8
  3302                           tblptrh	equ	0xFF7
  3303                           tblptrl	equ	0xFF6
  3304                           tablat	equ	0xFF5
  3305                           prodh	equ	0xFF4
  3306                           prodl	equ	0xFF3
  3307                           postinc0	equ	0xFEE
  3308                           fsr0h	equ	0xFEA
  3309                           fsr0l	equ	0xFE9
  3310                           wreg	equ	0xFE8
  3311                           indf1	equ	0xFE7
  3312                           postdec1	equ	0xFE5
  3313                           fsr1h	equ	0xFE2
  3314                           fsr1l	equ	0xFE1
  3315                           bsr	equ	0xFE0
  3316                           indf2	equ	0xFDF
  3317                           postinc2	equ	0xFDE
  3318                           postdec2	equ	0xFDD
  3319                           plusw2	equ	0xFDB
  3320                           fsr2h	equ	0xFDA
  3321                           fsr2l	equ	0xFD9
  3322                           status	equ	0xFD8
  3323                           
  3324                           	psect	intcode_body
  3325  000C08                     __pintcode_body:
  3326                           	opt stack 26
  3327  000C08                     int_func:
  3328                           	opt stack 26
  3329  000C08  0006               	pop		; remove dummy address from shadow register refresh
  3330  000C0A  CFFA F001          	movff	pclath,??_high_isr
  3331  000C0E  CFFB F002          	movff	pclatu,??_high_isr+1
  3332  000C12  CFE9 F003          	movff	fsr0l,??_high_isr+2
  3333  000C16  CFEA F004          	movff	fsr0h,??_high_isr+3
  3334  000C1A  CFE1 F005          	movff	fsr1l,??_high_isr+4
  3335  000C1E  CFE2 F006          	movff	fsr1h,??_high_isr+5
  3336  000C22  CFD9 F007          	movff	fsr2l,??_high_isr+6
  3337  000C26  CFDA F008          	movff	fsr2h,??_high_isr+7
  3338  000C2A  CFF3 F009          	movff	prodl,??_high_isr+8
  3339  000C2E  CFF4 F00A          	movff	prodh,??_high_isr+9
  3340  000C32  CFF6 F00B          	movff	tblptrl,??_high_isr+10
  3341  000C36  CFF7 F00C          	movff	tblptrh,??_high_isr+11
  3342  000C3A  CFF8 F00D          	movff	tblptru,??_high_isr+12
  3343  000C3E  CFF5 F00E          	movff	tablat,??_high_isr+13
  3344  000C42  C036  F00F         	movff	btemp,??_high_isr+14
  3345  000C46  C037  F010         	movff	btemp+1,??_high_isr+15
  3346  000C4A  C038  F011         	movff	btemp+2,??_high_isr+16
  3347  000C4E  C039  F012         	movff	btemp+3,??_high_isr+17
  3348  000C52  C012  F039         	movff	??_high_isr+17,btemp+3
  3349  000C56  C011  F038         	movff	??_high_isr+16,btemp+2
  3350  000C5A  C010  F037         	movff	??_high_isr+15,btemp+1
  3351  000C5E  C00F  F036         	movff	??_high_isr+14,btemp
  3352  000C62  C00E  FFF5         	movff	??_high_isr+13,tablat
  3353  000C66  C00D  FFF8         	movff	??_high_isr+12,tblptru
  3354  000C6A  C00C  FFF7         	movff	??_high_isr+11,tblptrh
  3355  000C6E  C00B  FFF6         	movff	??_high_isr+10,tblptrl
  3356  000C72  C00A  FFF4         	movff	??_high_isr+9,prodh
  3357  000C76  C009  FFF3         	movff	??_high_isr+8,prodl
  3358  000C7A  C008  FFDA         	movff	??_high_isr+7,fsr2h
  3359  000C7E  C007  FFD9         	movff	??_high_isr+6,fsr2l
  3360  000C82  C006  FFE2         	movff	??_high_isr+5,fsr1h
  3361  000C86  C005  FFE1         	movff	??_high_isr+4,fsr1l
  3362  000C8A  C004  FFEA         	movff	??_high_isr+3,fsr0h
  3363  000C8E  C003  FFE9         	movff	??_high_isr+2,fsr0l
  3364  000C92  C002  FFFB         	movff	??_high_isr+1,pclatu
  3365  000C96  C001  FFFA         	movff	??_high_isr,pclath
  3366  000C9A  9236               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3367  000C9C  0011               	retfie		f
  3368  000C9E                     __end_of_high_isr:
  3369                           	opt stack 0
  3370                           pclatu	equ	0xFFB
  3371                           pclath	equ	0xFFA
  3372                           tblptru	equ	0xFF8
  3373                           tblptrh	equ	0xFF7
  3374                           tblptrl	equ	0xFF6
  3375                           tablat	equ	0xFF5
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           postinc0	equ	0xFEE
  3379                           fsr0h	equ	0xFEA
  3380                           fsr0l	equ	0xFE9
  3381                           wreg	equ	0xFE8
  3382                           indf1	equ	0xFE7
  3383                           postdec1	equ	0xFE5
  3384                           fsr1h	equ	0xFE2
  3385                           fsr1l	equ	0xFE1
  3386                           bsr	equ	0xFE0
  3387                           indf2	equ	0xFDF
  3388                           postinc2	equ	0xFDE
  3389                           postdec2	equ	0xFDD
  3390                           plusw2	equ	0xFDB
  3391                           fsr2h	equ	0xFDA
  3392                           fsr2l	equ	0xFD9
  3393                           status	equ	0xFD8
  3394                           pclatu	equ	0xFFB
  3395                           pclath	equ	0xFFA
  3396                           tblptru	equ	0xFF8
  3397                           tblptrh	equ	0xFF7
  3398                           tblptrl	equ	0xFF6
  3399                           tablat	equ	0xFF5
  3400                           prodh	equ	0xFF4
  3401                           prodl	equ	0xFF3
  3402                           postinc0	equ	0xFEE
  3403                           fsr0h	equ	0xFEA
  3404                           fsr0l	equ	0xFE9
  3405                           wreg	equ	0xFE8
  3406                           indf1	equ	0xFE7
  3407                           postdec1	equ	0xFE5
  3408                           fsr1h	equ	0xFE2
  3409                           fsr1l	equ	0xFE1
  3410                           bsr	equ	0xFE0
  3411                           indf2	equ	0xFDF
  3412                           postinc2	equ	0xFDE
  3413                           postdec2	equ	0xFDD
  3414                           plusw2	equ	0xFDB
  3415                           fsr2h	equ	0xFDA
  3416                           fsr2l	equ	0xFD9
  3417                           status	equ	0xFD8
  3418                           
  3419                           	psect	rparam
  3420  0000                     pclatu	equ	0xFFB
  3421                           pclath	equ	0xFFA
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           postinc0	equ	0xFEE
  3429                           fsr0h	equ	0xFEA
  3430                           fsr0l	equ	0xFE9
  3431                           wreg	equ	0xFE8
  3432                           indf1	equ	0xFE7
  3433                           postdec1	equ	0xFE5
  3434                           fsr1h	equ	0xFE2
  3435                           fsr1l	equ	0xFE1
  3436                           bsr	equ	0xFE0
  3437                           indf2	equ	0xFDF
  3438                           postinc2	equ	0xFDE
  3439                           postdec2	equ	0xFDD
  3440                           plusw2	equ	0xFDB
  3441                           fsr2h	equ	0xFDA
  3442                           fsr2l	equ	0xFD9
  3443                           status	equ	0xFD8
  3444                           
  3445                           	psect	temp
  3446  000036                     btemp:
  3447                           	opt stack 0
  3448  000036                     	ds	1
  3449  0000                     int$flags	set	btemp
  3450  0000                     wtemp6	set	btemp+1
  3451                           pclatu	equ	0xFFB
  3452                           pclath	equ	0xFFA
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           prodh	equ	0xFF4
  3458                           prodl	equ	0xFF3
  3459                           postinc0	equ	0xFEE
  3460                           fsr0h	equ	0xFEA
  3461                           fsr0l	equ	0xFE9
  3462                           wreg	equ	0xFE8
  3463                           indf1	equ	0xFE7
  3464                           postdec1	equ	0xFE5
  3465                           fsr1h	equ	0xFE2
  3466                           fsr1l	equ	0xFE1
  3467                           bsr	equ	0xFE0
  3468                           indf2	equ	0xFDF
  3469                           postinc2	equ	0xFDE
  3470                           postdec2	equ	0xFDD
  3471                           plusw2	equ	0xFDB
  3472                           fsr2h	equ	0xFDA
  3473                           fsr2l	equ	0xFD9
  3474                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    74
    Data        126
    BSS         256
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      53
    BANK0           160     38      40
    BANK1           256      0     126
    BANK2           256      0     256

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 126
		 -> STR_22(CODE[2]), STR_20(CODE[2]), STR_19(CODE[2]), STR_18(CODE[2]), 
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), InitServos@tmp(BANK0[5]), 
		 -> STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[6]), STR_8(CODE[2]), 
		 -> STR_7(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), FillServoPositionString@tmp(BANK0[5]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), servosets.lowerVerticalServo(BANK1[3]), servosets.upperVerticalServo(BANK1[3]), 
		 -> servosets.horizontalServo(BANK1[3]), servosets(BANK1[126]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    memset@p1	PTR void  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    memset@p	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_21(CODE[3]), STR_17(CODE[3]), STR_13(CODE[3]), STR_9(CODE[3]), 
		 -> STR_6(CODE[3]), STR_3(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 5
		 -> InitServos@tmp(BANK0[5]), FillServoPositionString@tmp(BANK0[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    UART_Write_String@str	PTR const unsigned char  size(2) Largest target is 256
		 -> movementString(BANK2[256]), 

    currentDirection	PTR int  size(2) Largest target is 48
		 -> NULL(NULL[0]), turns.left(CODE[12]), turns(CODE[48]), 


Critical Paths under _main in COMRAM

    _main->_UART_Write_String
    _RotatePositions->___wmul
    _InitServos->_UART_Write_String
    _UART_Write_String->_strlen
    _FillServoPositionString->_sprintf
    _strcat->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _EmptyMovementString->_memset

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_FillServoPositionString
    _InitServos->_sprintf
    _FillServoPositionString->_sprintf

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   26262
                _ConfigureOscillator
            _FillServoPositionString
                         _InitServos
                    _RotatePositions
                          _UART_Init
                  _UART_Write_String
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            2     2      0       0
                                             39 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RotatePositions                                      4     4      0    3615
                                             45 COMRAM     4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _InitServos                                           7     7      0   11165
                                             13 BANK0      7     7      0
                _EmptyMovementString
                  _UART_Write_String
                             ___wmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (1) _UART_Write_String                                    8     6      2     650
                                             45 COMRAM     8     6      2
                         _UART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     166
                                             39 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                             39 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _FillServoPositionString                             25    25      0   10832
                                             13 BANK0     25    25      0
                _EmptyMovementString
                             ___wmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               6     2      4    4354
                                             45 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             23    17      6    2014
                                             51 COMRAM     1     1      0
                                              0 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                             46 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                             39 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3503
                                             39 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _EmptyMovementString                                  0     0      0     324
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     324
                                             39 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             21    21      0       0
                                             18 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _FillServoPositionString
     _EmptyMovementString
       _memset
     ___wmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
     _strcat
       ___wmul (ARG)
   _InitServos
     _EmptyMovementString
       _memset
     _UART_Write_String
       _UART_Write
       _strlen
     ___wmul
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
     _strcat
       ___wmul (ARG)
   _RotatePositions
     ___wmul
   _UART_Init
   _UART_Write_String
     _UART_Write
     _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0     100       8      100.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      7E       6       49.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     26      28       4       25.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      35       1       56.4%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1DB       9        0.0%
DATA                 0      0     1DB      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Oct 07 01:06:10 2017

                                          l67 0F1E                                            l76 0DB4  
                                          l77 0D92                                            l89 0380  
                                          l97 0786                                            l99 0A20  
                                          bsr 000FE0                           ___wmul@multiplicand 002A  
                                 __CFG_BORV$3 000000                    __size_of_UART_Write_String 0056  
                                __CFG_CP0$OFF 000000                                  __CFG_CP1$OFF 000000  
                                         l104 0BD8                                           l105 0C00  
                                         l106 0C06                                           l140 0B40  
                                         l141 0AEC                                           l133 0A72  
                                         l126 0A2E                                           l135 0A9A  
                                         l127 0A48                                           l139 0AE6  
                                         l701 0D42                                           l702 0D3A  
                                         l552 0E08                                           l553 0E12  
                                         l562 0E8C                                           l563 0E96  
                                         l707 0EAE                                           l572 0F4E  
                                         l548 0DE8                                           l708 0EAA  
                                         l573 0F3E                                           l549 0DE0  
                                         l558 0E74                                           l559 0E6C  
                                         l698 0D2A                                           l699 0D26  
                                __CFG_CPB$OFF 000000                                           u340 0DEC  
                                         u500 0B48                                           u420 0D6A  
                                         u510 0B60                                           u520 0784  
                                         u370 0E78                                  __CFG_CPD$OFF 000000  
                                         u427 0D60                                           u540 037E  
                                         u550 074E                                           u480 0ACA  
                                         u597 0EFA                              RotatePositions@i 0030  
                                         wreg 000FE8                                  __CFG_IESO$ON 000000  
                       ??_EmptyMovementString 0030                                  __CFG_LVP$OFF 000000  
                                __CFG_WDT$OFF 000000                                          l1121 0FC0  
                                        l1127 0F3E                                          l1225 0A9E  
                                        l1403 074E                                          l1415 0BD8  
                                        l1407 0B76                                          STR_1 0354  
                                        STR_2 0356                                          STR_3 0351  
                                        STR_4 0354                                          STR_5 0356  
                                        STR_6 0351                                          STR_7 0354  
                                        STR_8 0356                                          STR_9 0351  
                                        _TRMT 007D61                                          _main 0F08  
                                        fsr0h 000FEA                                          fsr1h 000FE2  
                                        fsr2h 000FDA                                          fsr0l 000FE9  
                                        indf1 000FE7                                          indf2 000FDF  
                                        fsr1l 000FE1                                          fsr2l 000FD9  
                                        btemp 0036                                          prodh 000FF4  
                                        prodl 000FF3                                          start 00C6  
FillServoPositionString@newHorizontalPosition 0073                                 __CFG_MCLRE$ON 000000  
                                ___param_bank 000000                      __size_of_RotatePositions 009A  
                                       ?_main 0001                                         STR_10 034B  
                                       STR_11 0354                                         STR_20 0356  
                                       STR_12 0356                                         STR_21 0351  
                                       STR_13 0351                                         STR_22 034F  
                                       STR_14 034F                                         STR_15 0354  
                                       STR_16 0356                                         STR_17 0351  
                                       STR_18 034F                                         STR_19 0354  
                             __end_of___lwdiv 0E1C                               __end_of___lwmod 0EA0  
            __size_of_FillServoPositionString 040A                                         _SPBRG 000FAF  
                                       _TXREG 000FAD                           _ConfigureOscillator 0FA4  
                               __CFG_PWRT$OFF 000000                                 __CFG_WRT0$OFF 000000  
                               __CFG_WRT1$OFF 000000                                __CFG_EBTR0$OFF 000000  
                              __CFG_FCMEN$OFF 000000                                __CFG_EBTR1$OFF 000000  
                                 ?_UART_Write 0001                            __size_of_UART_Init 002E  
                               __CFG_WRTB$OFF 000000                                 __CFG_WRTC$OFF 000000  
                               __CFG_WRTD$OFF 000000                                __CFG_EBTRB$OFF 000000  
                             __end_of_dpowers 031B                                         _turns 031B  
                             __end_of_low_isr 00C6                                         pclath 000FFA  
                                       tablat 000FF5                                   InitServos@i 0072  
                                       plusw2 000FDB                                         status 000FD8  
                                       wtemp6 0037                               __end_of_sprintf 0B6E  
                              __CFG_PBADEN$ON 000000                          ?_ConfigureOscillator 0001  
                             __initialization 0E1C                                    _InitServos 0764  
                                __end_of_main 0F34        FillServoPositionString@deltaHorizontal 0071  
                                      ??_main 0036                                 __activetblptr 000002  
                             __CFG_BBSIZ$1024 000000                                        _SPBRGH 000FB0  
                       ??_ConfigureOscillator 0028                                __CFG_XINST$OFF 000000  
                           __end_of_UART_Init 0F08                              __end_of_high_isr 0C9E  
                         __size_of_UART_Write 000C                                        ___wmul 0F60  
                              __CFG_STVREN$ON 000000                                     ??___lwdiv 002C  
                                   ??___lwmod 0033                                        _memset 0F34  
                                      clear_0 0E44                                        _strcat 0D1C  
                                      _strlen 0EA0                             ??_RotatePositions 002E  
                             __CFG_BOREN$BOHW 000000                                  __mediumconst 0000  
                                   ??_low_isr 0013                                        tblptrh 000FF7  
                                      tblptrl 000FF6                                        tblptru 000FF8  
                                   ??_sprintf 0034                                    __accesstop 0060  
                     __end_of__initialization 0E50                    FillServoPositionString@tmp 007B  
                               ___rparam_used 000001                                __pcstackCOMRAM 0001  
                    FillServoPositionString@i 0084                                   ?_InitServos 0001  
                                __pidataBANK1 0C9E                                 __end_of_turns 034B  
                     _FillServoPositionString 035A                               __CFG_OSC$IRCIO7 000000  
                                  __pbssBANK2 0200                  UART_Write_String@arrayLength 0031  
                                     ?___wmul 0028                                       ?_memset 0028  
                                     ?_strcat 002E                                       ?_strlen 0028  
                 __end_of_EmptyMovementString 0FA4                                  ??_UART_Write 0028  
                         __size_of_InitServos 02BE                                     ?_high_isr 0001  
                            _currentDirection 0086                                       __Hparam 0000  
                                     __Lparam 0000                               __size_of___wmul 0026  
                          __end_of_UART_Write 0FCA                     ??_FillServoPositionString 006D  
                                     ___lwdiv 0DCA                                       ___lwmod 0E5E  
                                __psmallconst 0300                                       __pcinit 0E1C  
                             __size_of_memset 002C                                       __ramtop 0300  
                                     __ptext0 0F08                                       __ptext1 0EDA  
                                     __ptext2 0B6E                                       __ptext3 0764  
                                     __ptext4 0D74                                       __ptext5 0EA0  
                                     __ptext6 0FBE                                       __ptext7 035A  
                                     __ptext8 0D1C                                       __ptext9 0A22  
                             __size_of_strcat 0058                               __size_of_strlen 003A  
                                     _dpowers 0311                                       _low_isr 0018  
                                     _sprintf 0A22                                    ??_high_isr 0001  
                              __pintcode_body 0C08                          end_of_initialization 0E50  
                                     memset@c 002A                                       memset@n 002C  
                                     memset@p 002E                                 __Lmediumconst 0000  
                                     int_func 0C08                                 InitServos@tmp 006D  
                             _RotatePositions 0B6E                                     _RCSTAbits 000FAB  
                           __end_of_positions 0311                                       postdec1 000FE5  
                                     postdec2 000FDD                                       postinc0 000FEE  
                                     postinc2 000FDE                                       strlen@s 0028  
                                   _UART_Init 0EDA                                UART_Write@data 0028  
                                   _TRISCbits 000F94                   __end_of_ConfigureOscillator 0FBE  
                              _movementString 0200                                     _TXSTAbits 000FAC  
                                ??_InitServos 0036                                __end_of___wmul 0F86  
                                 _BAUDCONbits 000FB8                                    ?_UART_Init 0001  
                              __end_of_memset 0F60                                __end_of_strcat 0D74  
                              __end_of_strlen 0EDA                           start_initialization 0E1C  
                          __end_of_InitServos 0A22                       __end_of_RotatePositions 0C08  
                                    ??___wmul 002C                                   __pdataBANK1 0100  
                            __CFG_LPT1OSC$OFF 000000                                      ??_memset 002E  
                _FillServoPositionString$1057 0080                  _FillServoPositionString$1058 0082  
                _FillServoPositionString$1059 0079                                      ??_strcat 0032  
                                    ??_strlen 002A                                 __pcstackBANK0 0060  
                           __size_of_high_isr 0C96                                   sprintf@flag 0068  
  FillServoPositionString@newVerticalPosition 0077                                   sprintf@prec 0069  
                                   __pnvBANK0 0086                              ___lwdiv@dividend 0028  
                                   __pintcode 0008                                      ?___lwdiv 0028  
                                    ?___lwmod 002F                                   __pintcodelo 0018  
                                 ??_UART_Init 0028                                   __smallconst 0300  
                                    ?_low_isr 0001                              ___lwdiv@quotient 002C  
                __size_of_EmptyMovementString 001E                                      ?_sprintf 0060  
                            ?_RotatePositions 0001                                ___wmul@product 002C  
                            __CFG_WDTPS$32768 000000                                     _servosets 0100  
                                   _positions 0301                          UART_Write_String@str 002E  
                           ___wmul@multiplier 0028          FillServoPositionString@deltaVertical 0075  
                                   copy_data0 0E30                                      __Hrparam 0000  
                    ?_FillServoPositionString 0001                                      __Lrparam 0000  
                            __size_of___lwdiv 0052                              __size_of___lwmod 0042  
                           _UART_Write_String 0D74                                    sprintf@val 006A  
                                  strcat@from 0030                            ?_UART_Write_String 002E  
                             ___lwdiv@divisor 002A                               ___lwdiv@counter 002E  
                            __size_of_low_isr 00AE                                      __ptext10 0E5E  
                                    __ptext11 0DCA                                      __ptext12 0F60  
                                    __ptext13 0F86                                      __ptext14 0F34  
                                    __ptext15 0FA4                                      _high_isr 0008  
                            __size_of_sprintf 014C                           ??_UART_Write_String 0030  
                               __size_of_main 002C                  __size_of_ConfigureOscillator 001A  
                                    int$flags 0036                     __end_of_UART_Write_String 0DCA  
                                 _OSCTUNEbits 000F9B                                      memset@p1 0028  
                                    intlevel1 0000                                      intlevel2 0000  
                                   sprintf@ap 0066                                     sprintf@sp 0060  
             __end_of_FillServoPositionString 0764                              ___lwmod@dividend 002F  
                                  _OSCCONbits 000FD3                            UART_Write_String@a 0035  
                          UART_Write_String@i 0033                           _EmptyMovementString 0F86  
                                    sprintf@c 006C                                      sprintf@f 0062  
                                    strcat@cp 0032                                      strcat@to 002E  
                             ___lwmod@divisor 0031                                      strlen@cp 002C  
                             ___lwmod@counter 0033                                    _UART_Write 0FBE  
                        ?_EmptyMovementString 0001  
